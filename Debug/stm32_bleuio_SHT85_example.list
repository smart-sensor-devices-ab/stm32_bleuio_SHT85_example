
stm32_bleuio_SHT85_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bf8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08010e98  08010e98  00020e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080113b4  080113b4  000213b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080113bc  080113bc  000213bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080113c0  080113c0  000213c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  24000000  080113c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000200  080115c4  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000260  08011624  00030260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e28  240002c0  08011684  000302c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240010e8  08011684  000310e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c5f1  00000000  00000000  000302ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059be  00000000  00000000  0006c8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  000722a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad0  00000000  00000000  00073f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c9f3  00000000  00000000  000759f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254ee  00000000  00000000  000b23eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016fb91  00000000  00000000  000d78d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0024746a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008990  00000000  00000000  002474c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002c0 	.word	0x240002c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010e80 	.word	0x08010e80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002c4 	.word	0x240002c4
 80002dc:	08010e80 	.word	0x08010e80

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b0a3      	sub	sp, #140	; 0x8c
 800068c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f001 f933 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f961 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 faef 	bl	8000c78 <MX_GPIO_Init>
  MX_ETH_Init();
 800069a:	f000 f9dd 	bl	8000a58 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069e:	f000 fa9f 	bl	8000be0 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 80006a2:	f00d fa1d 	bl	800dae0 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 80006a6:	f000 fa23 	bl	8000af0 <MX_I2C2_Init>
  MX_TIM6_Init();
 80006aa:	f000 fa61 	bl	8000b70 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  isBleuIOReady = false;
 80006ae:	4b96      	ldr	r3, [pc, #600]	; (8000908 <main+0x280>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]

  // scan i2c bus 2 (external)
  i2c_bus_scan(hi2c2);
 80006b4:	4e95      	ldr	r6, [pc, #596]	; (800090c <main+0x284>)
 80006b6:	466d      	mov	r5, sp
 80006b8:	f106 0410 	add.w	r4, r6, #16
 80006bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006d4:	f000 fccc 	bl	8001070 <i2c_bus_scan>
  HAL_Delay(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f001 f99e 	bl	8001a1c <HAL_Delay>

  // Turns on all LEDs on start up
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2101      	movs	r1, #1
 80006e4:	488a      	ldr	r0, [pc, #552]	; (8000910 <main+0x288>)
 80006e6:	f002 fe23 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2102      	movs	r1, #2
 80006ee:	4889      	ldr	r0, [pc, #548]	; (8000914 <main+0x28c>)
 80006f0:	f002 fe1e 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4885      	ldr	r0, [pc, #532]	; (8000910 <main+0x288>)
 80006fc:	f002 fe18 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f001 f98a 	bl	8001a1c <HAL_Delay>

  // Turns off all LEDs except Red
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2101      	movs	r1, #1
 800070c:	4880      	ldr	r0, [pc, #512]	; (8000910 <main+0x288>)
 800070e:	f002 fe0f 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2102      	movs	r1, #2
 8000716:	487f      	ldr	r0, [pc, #508]	; (8000914 <main+0x28c>)
 8000718:	f002 fe0a 	bl	8003330 <HAL_GPIO_WritePin>

  // Sends welcome message to uart
  uart_buf_len = sprintf(uart_tx_buf, "\r\nWelcome to the STM32 BleuIO SHT85 Example!\r\n");
 800071c:	497e      	ldr	r1, [pc, #504]	; (8000918 <main+0x290>)
 800071e:	487f      	ldr	r0, [pc, #508]	; (800091c <main+0x294>)
 8000720:	f00e fab0 	bl	800ec84 <siprintf>
 8000724:	4603      	mov	r3, r0
 8000726:	4a7e      	ldr	r2, [pc, #504]	; (8000920 <main+0x298>)
 8000728:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 800072a:	4b7d      	ldr	r3, [pc, #500]	; (8000920 <main+0x298>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	b29a      	uxth	r2, r3
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	4979      	ldr	r1, [pc, #484]	; (800091c <main+0x294>)
 8000736:	487b      	ldr	r0, [pc, #492]	; (8000924 <main+0x29c>)
 8000738:	f008 febc 	bl	80094b4 <HAL_UART_Transmit>


  //
  // SHT85 init
  //
  uint8_t sendbuff[2]={0,};
 800073c:	2300      	movs	r3, #0
 800073e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  sendbuff[0]=(uint8_t)(CMD_SOFT_RESET>>8);
 8000742:	2330      	movs	r3, #48	; 0x30
 8000744:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  sendbuff[1]=(uint8_t)(CMD_SOFT_RESET& 0xFF);
 8000748:	23a2      	movs	r3, #162	; 0xa2
 800074a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  err0r=HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR<<1),sendbuff,2,HAL_MAX_DELAY);
 800074e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2302      	movs	r3, #2
 800075a:	2188      	movs	r1, #136	; 0x88
 800075c:	486b      	ldr	r0, [pc, #428]	; (800090c <main+0x284>)
 800075e:	f004 fbf5 	bl	8004f4c <HAL_I2C_Master_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b70      	ldr	r3, [pc, #448]	; (8000928 <main+0x2a0>)
 8000768:	701a      	strb	r2, [r3, #0]

  HAL_Delay(200); // in ms
 800076a:	20c8      	movs	r0, #200	; 0xc8
 800076c:	f001 f956 	bl	8001a1c <HAL_Delay>

  // Raed and print SHT85 Serial Number
  SHT85_ReadSerialNumber(&serialNumber);
 8000770:	486e      	ldr	r0, [pc, #440]	; (800092c <main+0x2a4>)
 8000772:	f000 fbad 	bl	8000ed0 <SHT85_ReadSerialNumber>
  HAL_Delay(200); // in ms
 8000776:	20c8      	movs	r0, #200	; 0xc8
 8000778:	f001 f950 	bl	8001a1c <HAL_Delay>
  uart_buf_len = sprintf(uart_tx_buf,  "\r\nSensor SerialNumber: 0x%08X\r\n", (int)serialNumber);
 800077c:	4b6b      	ldr	r3, [pc, #428]	; (800092c <main+0x2a4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	496b      	ldr	r1, [pc, #428]	; (8000930 <main+0x2a8>)
 8000784:	4865      	ldr	r0, [pc, #404]	; (800091c <main+0x294>)
 8000786:	f00e fa7d 	bl	800ec84 <siprintf>
 800078a:	4603      	mov	r3, r0
 800078c:	4a64      	ldr	r2, [pc, #400]	; (8000920 <main+0x298>)
 800078e:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, 100);
 8000790:	4b63      	ldr	r3, [pc, #396]	; (8000920 <main+0x298>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b29a      	uxth	r2, r3
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	4960      	ldr	r1, [pc, #384]	; (800091c <main+0x294>)
 800079a:	4862      	ldr	r0, [pc, #392]	; (8000924 <main+0x29c>)
 800079c:	f008 fe8a 	bl	80094b4 <HAL_UART_Transmit>
  HAL_Delay(200); // in ms
 80007a0:	20c8      	movs	r0, #200	; 0xc8
 80007a2:	f001 f93b 	bl	8001a1c <HAL_Delay>
  bool advOn = false;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  char serialNr_str[10];
  char temp_str[10];
  char humidity_str[10];

   WriteCommand(PERI_MEAS_HIGH_1_HZ); // Set SHT85 read frequency
 80007ac:	f242 1030 	movw	r0, #8496	; 0x2130
 80007b0:	f000 fb66 	bl	8000e80 <WriteCommand>

   HAL_TIM_Base_Start_IT(&htim6);
 80007b4:	485f      	ldr	r0, [pc, #380]	; (8000934 <main+0x2ac>)
 80007b6:	f008 fb35 	bl	8008e24 <HAL_TIM_Base_Start_IT>
   systemTime = 25;
 80007ba:	4b5f      	ldr	r3, [pc, #380]	; (8000938 <main+0x2b0>)
 80007bc:	2219      	movs	r2, #25
 80007be:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007c0:	f00d f9b4 	bl	800db2c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // Simple handler for uart input
    if(systemTime < 0)
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <main+0x2b0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	daf9      	bge.n	80007c0 <main+0x138>
    {
    	if(!advOn && isBleuIOReady)
 80007cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007d0:	f083 0301 	eor.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00a      	beq.n	80007f0 <main+0x168>
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <main+0x280>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <main+0x168>
    	{
    		writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 80007e2:	4856      	ldr	r0, [pc, #344]	; (800093c <main+0x2b4>)
 80007e4:	f00d f968 	bl	800dab8 <writeToDongle>
    		advOn = true;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80007ee:	e089      	b.n	8000904 <main+0x27c>
    	} else
    	{
			SHT85_SingleMeasurment(&temperature, &humidity, SINGLE_MEAS_HIGH, 50);
 80007f0:	2332      	movs	r3, #50	; 0x32
 80007f2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80007f6:	4952      	ldr	r1, [pc, #328]	; (8000940 <main+0x2b8>)
 80007f8:	4852      	ldr	r0, [pc, #328]	; (8000944 <main+0x2bc>)
 80007fa:	f000 fbe7 	bl	8000fcc <SHT85_SingleMeasurment>
			systemTime = 10;
 80007fe:	4b4e      	ldr	r3, [pc, #312]	; (8000938 <main+0x2b0>)
 8000800:	220a      	movs	r2, #10
 8000802:	601a      	str	r2, [r3, #0]
			sprintf(serialNr_str, "%08X",(int) serialNumber);
 8000804:	4b49      	ldr	r3, [pc, #292]	; (800092c <main+0x2a4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800080e:	494e      	ldr	r1, [pc, #312]	; (8000948 <main+0x2c0>)
 8000810:	4618      	mov	r0, r3
 8000812:	f00e fa37 	bl	800ec84 <siprintf>
			sprintf(temp_str, "%04X", (int)(temperature * 100));
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <main+0x2bc>)
 8000818:	edd3 7a00 	vldr	s15, [r3]
 800081c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800094c <main+0x2c4>
 8000820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082c:	ee17 2a90 	vmov	r2, s15
 8000830:	4947      	ldr	r1, [pc, #284]	; (8000950 <main+0x2c8>)
 8000832:	4618      	mov	r0, r3
 8000834:	f00e fa26 	bl	800ec84 <siprintf>
			sprintf(humidity_str, "%04X",(int)(humidity * 100));
 8000838:	4b41      	ldr	r3, [pc, #260]	; (8000940 <main+0x2b8>)
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800094c <main+0x2c4>
 8000842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	ee17 2a90 	vmov	r2, s15
 8000852:	493f      	ldr	r1, [pc, #252]	; (8000950 <main+0x2c8>)
 8000854:	4618      	mov	r0, r3
 8000856:	f00e fa15 	bl	800ec84 <siprintf>
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 800085a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 800085e:	469c      	mov	ip, r3
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 8000860:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 8000864:	469e      	mov	lr, r3
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 8000866:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 800086a:	4618      	mov	r0, r3
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 800086c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 8000870:	461c      	mov	r4, r3
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 8000872:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 8000876:	461d      	mov	r5, r3
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 8000878:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 800087c:	461e      	mov	r6, r3
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 800087e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 8000882:	61fb      	str	r3, [r7, #28]
					serialNr_str[0],serialNr_str[1],serialNr_str[2],serialNr_str[3],serialNr_str[4],serialNr_str[5],serialNr_str[6],serialNr_str[7],
 8000884:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 8000888:	61bb      	str	r3, [r7, #24]
					temp_str[0],temp_str[1],temp_str[2],temp_str[3],
 800088a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 800088e:	617b      	str	r3, [r7, #20]
					temp_str[0],temp_str[1],temp_str[2],temp_str[3],
 8000890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 8000894:	613b      	str	r3, [r7, #16]
					temp_str[0],temp_str[1],temp_str[2],temp_str[3],
 8000896:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 800089a:	60fb      	str	r3, [r7, #12]
					temp_str[0],temp_str[1],temp_str[2],temp_str[3],
 800089c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 80008a0:	60bb      	str	r3, [r7, #8]
					humidity_str[0],humidity_str[1],humidity_str[2],humidity_str[3]);
 80008a2:	f897 3020 	ldrb.w	r3, [r7, #32]
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 80008a6:	607b      	str	r3, [r7, #4]
					humidity_str[0],humidity_str[1],humidity_str[2],humidity_str[3]);
 80008a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 80008ac:	4619      	mov	r1, r3
					humidity_str[0],humidity_str[1],humidity_str[2],humidity_str[3]);
 80008ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 80008b2:	461a      	mov	r2, r3
					humidity_str[0],humidity_str[1],humidity_str[2],humidity_str[3]);
 80008b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
			uart_buf_len = sprintf(uart_tx_buf,  "AT+ADVDATA=0B:FF:5B:07:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c:%c%c\r\n",
 80008b8:	930d      	str	r3, [sp, #52]	; 0x34
 80008ba:	920c      	str	r2, [sp, #48]	; 0x30
 80008bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	920a      	str	r2, [sp, #40]	; 0x28
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	9209      	str	r2, [sp, #36]	; 0x24
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	9208      	str	r2, [sp, #32]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	9207      	str	r2, [sp, #28]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	9206      	str	r2, [sp, #24]
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	9205      	str	r2, [sp, #20]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	9304      	str	r3, [sp, #16]
 80008da:	9603      	str	r6, [sp, #12]
 80008dc:	9502      	str	r5, [sp, #8]
 80008de:	9401      	str	r4, [sp, #4]
 80008e0:	9000      	str	r0, [sp, #0]
 80008e2:	4673      	mov	r3, lr
 80008e4:	4662      	mov	r2, ip
 80008e6:	491b      	ldr	r1, [pc, #108]	; (8000954 <main+0x2cc>)
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <main+0x294>)
 80008ea:	f00e f9cb 	bl	800ec84 <siprintf>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <main+0x298>)
 80008f2:	6013      	str	r3, [r2, #0]
			if(isBleuIOReady)
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <main+0x280>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f43f af61 	beq.w	80007c0 <main+0x138>
			{
				writeToDongle((uint8_t *)uart_tx_buf);
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <main+0x294>)
 8000900:	f00d f8da 	bl	800dab8 <writeToDongle>
    MX_USB_HOST_Process();
 8000904:	e75c      	b.n	80007c0 <main+0x138>
 8000906:	bf00      	nop
 8000908:	2400048c 	.word	0x2400048c
 800090c:	24000490 	.word	0x24000490
 8000910:	58020400 	.word	0x58020400
 8000914:	58021000 	.word	0x58021000
 8000918:	08010e98 	.word	0x08010e98
 800091c:	240002e0 	.word	0x240002e0
 8000920:	24000488 	.word	0x24000488
 8000924:	240003f8 	.word	0x240003f8
 8000928:	240005f4 	.word	0x240005f4
 800092c:	24000534 	.word	0x24000534
 8000930:	08010ec8 	.word	0x08010ec8
 8000934:	240004e8 	.word	0x240004e8
 8000938:	240002dc 	.word	0x240002dc
 800093c:	08010ee8 	.word	0x08010ee8
 8000940:	240004e0 	.word	0x240004e0
 8000944:	240004dc 	.word	0x240004dc
 8000948:	08010ef8 	.word	0x08010ef8
 800094c:	42c80000 	.word	0x42c80000
 8000950:	08010f00 	.word	0x08010f00
 8000954:	08010f08 	.word	0x08010f08

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	; 0x70
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	224c      	movs	r2, #76	; 0x4c
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00d fc86 	bl	800e278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2220      	movs	r2, #32
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00d fc80 	bl	800e278 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000978:	2002      	movs	r0, #2
 800097a:	f005 feb3 	bl	80066e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <SystemClock_Config+0xf8>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	4a32      	ldr	r2, [pc, #200]	; (8000a50 <SystemClock_Config+0xf8>)
 8000988:	f023 0301 	bic.w	r3, r3, #1
 800098c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <SystemClock_Config+0xf8>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <SystemClock_Config+0xfc>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a0:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <SystemClock_Config+0xfc>)
 80009a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <SystemClock_Config+0xfc>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b4:	bf00      	nop
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <SystemClock_Config+0xfc>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c2:	d1f8      	bne.n	80009b6 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009c4:	2303      	movs	r3, #3
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d2:	2340      	movs	r3, #64	; 0x40
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	2302      	movs	r3, #2
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009e2:	2318      	movs	r3, #24
 80009e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f2:	230c      	movs	r3, #12
 80009f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 feb8 	bl	8006778 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a0e:	f000 fb8f 	bl	8001130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	233f      	movs	r3, #63	; 0x3f
 8000a14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2101      	movs	r1, #1
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 faae 	bl	8006f98 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000a42:	f000 fb75 	bl	8001130 <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	58000400 	.word	0x58000400
 8000a54:	58024800 	.word	0x58024800

08000a58 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_ETH_Init+0x80>)
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <MX_ETH_Init+0x84>)
 8000a60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_ETH_Init+0x88>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_ETH_Init+0x88>)
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_ETH_Init+0x88>)
 8000a70:	22e1      	movs	r2, #225	; 0xe1
 8000a72:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_ETH_Init+0x88>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_ETH_Init+0x88>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_ETH_Init+0x88>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_ETH_Init+0x80>)
 8000a88:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <MX_ETH_Init+0x88>)
 8000a8a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_ETH_Init+0x80>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_ETH_Init+0x80>)
 8000a94:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_ETH_Init+0x8c>)
 8000a96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_ETH_Init+0x80>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MX_ETH_Init+0x90>)
 8000a9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_ETH_Init+0x80>)
 8000aa0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aa4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_ETH_Init+0x80>)
 8000aa8:	f001 fe7c 	bl	80027a4 <HAL_ETH_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ab2:	f000 fb3d 	bl	8001130 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ab6:	2234      	movs	r2, #52	; 0x34
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_ETH_Init+0x94>)
 8000abc:	f00d fbdc 	bl	800e278 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_ETH_Init+0x94>)
 8000ac2:	2221      	movs	r2, #33	; 0x21
 8000ac4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_ETH_Init+0x94>)
 8000ac8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000acc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_ETH_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000538 	.word	0x24000538
 8000adc:	40028000 	.word	0x40028000
 8000ae0:	240003dc 	.word	0x240003dc
 8000ae4:	24000260 	.word	0x24000260
 8000ae8:	24000200 	.word	0x24000200
 8000aec:	240005c0 	.word	0x240005c0

08000af0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_I2C2_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <MX_I2C2_Init+0x7c>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b2c:	f004 f97e 	bl	8004e2c <HAL_I2C_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b36:	f000 fafb 	bl	8001130 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b3e:	f005 fd39 	bl	80065b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b48:	f000 faf2 	bl	8001130 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_I2C2_Init+0x74>)
 8000b50:	f005 fd7b 	bl	800664a <HAL_I2CEx_ConfigDigitalFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 fae9 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	24000490 	.word	0x24000490
 8000b68:	40005800 	.word	0x40005800
 8000b6c:	10707dbc 	.word	0x10707dbc

08000b70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000b82:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <MX_TIM6_Init+0x6c>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6400 -1;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000b88:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000b8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 -1;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000b96:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000ba4:	f008 f8e6 	bl	8008d74 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bae:	f000 fabf 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_TIM6_Init+0x68>)
 8000bc0:	f008 fb82 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000bca:	f000 fab1 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	240004e8 	.word	0x240004e8
 8000bdc:	40001000 	.word	0x40001000

08000be0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <MX_USART3_UART_Init+0x94>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c2a:	f008 fbf3 	bl	8009414 <HAL_UART_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 fa7c 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c3c:	f009 ff31 	bl	800aaa2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 fa73 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c4e:	f009 ff66 	bl	800ab1e <HAL_UARTEx_SetRxFifoThreshold>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 fa6a 	bl	8001130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_USART3_UART_Init+0x90>)
 8000c5e:	f009 fee7 	bl	800aa30 <HAL_UARTEx_DisableFifoMode>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 fa62 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	240003f8 	.word	0x240003f8
 8000c74:	40004800 	.word	0x40004800

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b69      	ldr	r3, [pc, #420]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a67      	ldr	r2, [pc, #412]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b65      	ldr	r3, [pc, #404]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	623b      	str	r3, [r7, #32]
 8000caa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cac:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a60      	ldr	r2, [pc, #384]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b5d      	ldr	r3, [pc, #372]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a58      	ldr	r2, [pc, #352]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b4e      	ldr	r3, [pc, #312]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a49      	ldr	r2, [pc, #292]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d24:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a42      	ldr	r2, [pc, #264]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	4a3a      	ldr	r2, [pc, #232]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d60:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	4a33      	ldr	r2, [pc, #204]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_GPIO_Init+0x1bc>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d84:	482c      	ldr	r0, [pc, #176]	; (8000e38 <MX_GPIO_Init+0x1c0>)
 8000d86:	f002 fad3 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d90:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_GPIO_Init+0x1c4>)
 8000d92:	f002 facd 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4829      	ldr	r0, [pc, #164]	; (8000e40 <MX_GPIO_Init+0x1c8>)
 8000d9c:	f002 fac8 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4823      	ldr	r0, [pc, #140]	; (8000e44 <MX_GPIO_Init+0x1cc>)
 8000db6:	f002 f90b 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dba:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4819      	ldr	r0, [pc, #100]	; (8000e38 <MX_GPIO_Init+0x1c0>)
 8000dd4:	f002 f8fc 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4812      	ldr	r0, [pc, #72]	; (8000e3c <MX_GPIO_Init+0x1c4>)
 8000df2:	f002 f8ed 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_GPIO_Init+0x1d0>)
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	4810      	ldr	r0, [pc, #64]	; (8000e4c <MX_GPIO_Init+0x1d4>)
 8000e0a:	f002 f8e1 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_GPIO_Init+0x1c8>)
 8000e26:	f002 f8d3 	bl	8002fd0 <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	; 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020400 	.word	0x58020400
 8000e3c:	58020c00 	.word	0x58020c00
 8000e40:	58021000 	.word	0x58021000
 8000e44:	58020800 	.word	0x58020800
 8000e48:	11110000 	.word	0x11110000
 8000e4c:	58021800 	.word	0x58021800

08000e50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and add to systemTime counter.
  if (htim == &htim6 )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d104      	bne.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
	systemTime--;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e68:	6013      	str	r3, [r2, #0]
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	240004e8 	.word	0x240004e8
 8000e7c:	240002dc 	.word	0x240002dc

08000e80 <WriteCommand>:
/**
  * @brief
  * @retval None
  */
void WriteCommand(etCommands command)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
    uint8_t sendbuff[2]={0,};
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	81bb      	strh	r3, [r7, #12]


    sendbuff[0]=(uint8_t)(command>>8);
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	733b      	strb	r3, [r7, #12]
    sendbuff[1]=(uint8_t)(command& 0xFF);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	737b      	strb	r3, [r7, #13]

    err0r=  HAL_I2C_Master_Transmit(&hi2c2,(uint16_t)(I2C_ADDR<<1),sendbuff,2,HAL_MAX_DELAY);
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	2188      	movs	r1, #136	; 0x88
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <WriteCommand+0x48>)
 8000eae:	f004 f84d 	bl	8004f4c <HAL_I2C_Master_Transmit>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <WriteCommand+0x4c>)
 8000eb8:	701a      	strb	r2, [r3, #0]
    HAL_Delay(2); // in ms
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 fdae 	bl	8001a1c <HAL_Delay>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	24000490 	.word	0x24000490
 8000ecc:	240005f4 	.word	0x240005f4

08000ed0 <SHT85_ReadSerialNumber>:
/**
  * @brief
  * @retval None
  */
void  SHT85_ReadSerialNumber(uint32_t* serialNumber)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
  uint8_t serialNumWords[10];
  uint16_t serialNumWordsHL[2]={0,};
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]

    WriteCommand(CMD_READ_SERIALNBR);
 8000edc:	f44f 505e 	mov.w	r0, #14208	; 0x3780
 8000ee0:	f7ff ffce 	bl	8000e80 <WriteCommand>

    err0r=HAL_I2C_Master_Receive(&hi2c2,(uint16_t)(I2C_ADDR<<1),serialNumWords, 6, HAL_MAX_DELAY);
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2306      	movs	r3, #6
 8000ef0:	2188      	movs	r1, #136	; 0x88
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <SHT85_ReadSerialNumber+0x6c>)
 8000ef4:	f004 f91e 	bl	8005134 <HAL_I2C_Master_Receive>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <SHT85_ReadSerialNumber+0x70>)
 8000efe:	701a      	strb	r2, [r3, #0]

     serialNumWordsHL[0]= (uint16_t)(serialNumWords[0] << 8) | serialNumWords[1];
 8000f00:	7b3b      	ldrb	r3, [r7, #12]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	7b7b      	ldrb	r3, [r7, #13]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	813b      	strh	r3, [r7, #8]
     serialNumWordsHL[1]=(uint16_t)(serialNumWords[2] << 8) | serialNumWords[3];
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	817b      	strh	r3, [r7, #10]
    *serialNumber = (serialNumWordsHL[0] << 16) | serialNumWordsHL[1];
 8000f24:	893b      	ldrh	r3, [r7, #8]
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	897a      	ldrh	r2, [r7, #10]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]

}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24000490 	.word	0x24000490
 8000f40:	240005f4 	.word	0x240005f4

08000f44 <CalcTemperature>:
/**
  * @brief Temperature conversion formula, result in °C
  * @retval None
  */
static float CalcTemperature(uint16_t rawValue)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  // calculate temperature [°C]
  // T = -45 + 175 * rawValue / (2^16-1)
  return 175.0f * (float)rawValue / 65535.0f - 45.0f;
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f58:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000f80 <CalcTemperature+0x3c>
 8000f5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f60:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000f84 <CalcTemperature+0x40>
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f88 <CalcTemperature+0x44>
 8000f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8000f70:	eeb0 0a67 	vmov.f32	s0, s15
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	432f0000 	.word	0x432f0000
 8000f84:	477fff00 	.word	0x477fff00
 8000f88:	42340000 	.word	0x42340000

08000f8c <CalcHumidity>:
/**
  * @brief  Relative humidity conversion formula (result in %RH):
  * @retval None
  */
static float CalcHumidity(uint16_t rawValue)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
  // calculate relative humidity [%RH]
  // RH = rawValue / (2^16-1) * 100
  return 100.0f * (float)rawValue / 65535.0f;
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fc4 <CalcHumidity+0x38>
 8000fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fc8 <CalcHumidity+0x3c>
 8000fac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fb0:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	42c80000 	.word	0x42c80000
 8000fc8:	477fff00 	.word	0x477fff00

08000fcc <SHT85_SingleMeasurment>:
  * @retval None
  */
void SHT85_SingleMeasurment(float* temperature, float* humidity,
                               etSingleMeasureModes measureMode,
                               uint8_t timeout)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	717b      	strb	r3, [r7, #5]
  uint16_t rawValueTemp;    // temperature raw value from sensor
  uint16_t rawValueHumi;    // humidity raw value from sensor
  uint8_t revbufff[10];

  *temperature = 0;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
  *humidity = 0;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]

  WriteCommand((etCommands)measureMode);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff43 	bl	8000e80 <WriteCommand>

  HAL_Delay(200); // in ms
 8000ffa:	20c8      	movs	r0, #200	; 0xc8
 8000ffc:	f000 fd0e 	bl	8001a1c <HAL_Delay>

  err0r= HAL_I2C_Master_Receive(&hi2c2,(uint16_t)(I2C_ADDR<<1),revbufff, 6, HAL_MAX_DELAY);
 8001000:	f107 0210 	add.w	r2, r7, #16
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2306      	movs	r3, #6
 800100c:	2188      	movs	r1, #136	; 0x88
 800100e:	4816      	ldr	r0, [pc, #88]	; (8001068 <SHT85_SingleMeasurment+0x9c>)
 8001010:	f004 f890 	bl	8005134 <HAL_I2C_Master_Receive>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <SHT85_SingleMeasurment+0xa0>)
 800101a:	701a      	strb	r2, [r3, #0]

    rawValueTemp=(uint16_t)(revbufff[0] << 8) | revbufff[1];
 800101c:	7c3b      	ldrb	r3, [r7, #16]
 800101e:	b29b      	uxth	r3, r3
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b29a      	uxth	r2, r3
 8001024:	7c7b      	ldrb	r3, [r7, #17]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	83fb      	strh	r3, [r7, #30]
    rawValueHumi=(uint16_t)(revbufff[3] << 8) | revbufff[4];
 800102c:	7cfb      	ldrb	r3, [r7, #19]
 800102e:	b29b      	uxth	r3, r3
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b29a      	uxth	r2, r3
 8001034:	7d3b      	ldrb	r3, [r7, #20]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	83bb      	strh	r3, [r7, #28]

    *temperature = CalcTemperature(rawValueTemp);
 800103c:	8bfb      	ldrh	r3, [r7, #30]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff80 	bl	8000f44 <CalcTemperature>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	edc3 7a00 	vstr	s15, [r3]
    *humidity = CalcHumidity(rawValueHumi);
 800104e:	8bbb      	ldrh	r3, [r7, #28]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff9b 	bl	8000f8c <CalcHumidity>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	edc3 7a00 	vstr	s15, [r3]

}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	24000490 	.word	0x24000490
 800106c:	240005f4 	.word	0x240005f4

08001070 <i2c_bus_scan>:
  * @brief  Function scans the devices connected to i2c bus.
  * @param  argument: Not used
  * @retval None
  */
void i2c_bus_scan(I2C_HandleTypeDef hi2c )
{
 8001070:	b084      	sub	sp, #16
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	f107 0c18 	add.w	ip, r7, #24
 800107c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int uart__len;
	int i,nr;
	HAL_StatusTypeDef res;


	uart__len = sprintf(uart_tx_buf,  "\r\n I2C bus Scan: \r\n ");
 8001080:	4926      	ldr	r1, [pc, #152]	; (800111c <i2c_bus_scan+0xac>)
 8001082:	4827      	ldr	r0, [pc, #156]	; (8001120 <i2c_bus_scan+0xb0>)
 8001084:	f00d fdfe 	bl	800ec84 <siprintf>
 8001088:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart__len, 100);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b29a      	uxth	r2, r3
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	4923      	ldr	r1, [pc, #140]	; (8001120 <i2c_bus_scan+0xb0>)
 8001092:	4824      	ldr	r0, [pc, #144]	; (8001124 <i2c_bus_scan+0xb4>)
 8001094:	f008 fa0e 	bl	80094b4 <HAL_UART_Transmit>


	// scan all i2c addresses
	for (i=1,nr=0; i<128; i++)
 8001098:	2301      	movs	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	e024      	b.n	80010ec <i2c_bus_scan+0x7c>
	  	 * timeout 2
	  	 */



	  	 res = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t)(i<<1), 2, 2);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	b299      	uxth	r1, r3
 80010aa:	2302      	movs	r3, #2
 80010ac:	2202      	movs	r2, #2
 80010ae:	f107 0018 	add.w	r0, r7, #24
 80010b2:	f004 f935 	bl	8005320 <HAL_I2C_IsDeviceReady>
 80010b6:	4603      	mov	r3, r0
 80010b8:	70fb      	strb	r3, [r7, #3]

	  	 if (res != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <i2c_bus_scan+0x56>
	  	 {
	  	 	 	 nr++;//
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
	  	 }

	  	 if (res == HAL_OK)
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10c      	bne.n	80010e6 <i2c_bus_scan+0x76>
	  	 {
	  	 	 uart__len = sprintf(uart_tx_buf,  "0x%X \r\n", i);
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4916      	ldr	r1, [pc, #88]	; (8001128 <i2c_bus_scan+0xb8>)
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <i2c_bus_scan+0xb0>)
 80010d2:	f00d fdd7 	bl	800ec84 <siprintf>
 80010d6:	6078      	str	r0, [r7, #4]

	  		 HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart__len, 100);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	4910      	ldr	r1, [pc, #64]	; (8001120 <i2c_bus_scan+0xb0>)
 80010e0:	4810      	ldr	r0, [pc, #64]	; (8001124 <i2c_bus_scan+0xb4>)
 80010e2:	f008 f9e7 	bl	80094b4 <HAL_UART_Transmit>
	for (i=1,nr=0; i<128; i++)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b7f      	cmp	r3, #127	; 0x7f
 80010f0:	ddd7      	ble.n	80010a2 <i2c_bus_scan+0x32>

	  	 }
	  }

	  uart__len = sprintf(uart_tx_buf,  "scans 0x%X \r\n", nr);
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	490d      	ldr	r1, [pc, #52]	; (800112c <i2c_bus_scan+0xbc>)
 80010f6:	480a      	ldr	r0, [pc, #40]	; (8001120 <i2c_bus_scan+0xb0>)
 80010f8:	f00d fdc4 	bl	800ec84 <siprintf>
 80010fc:	6078      	str	r0, [r7, #4]

	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart__len, 100);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	b29a      	uxth	r2, r3
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	4906      	ldr	r1, [pc, #24]	; (8001120 <i2c_bus_scan+0xb0>)
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <i2c_bus_scan+0xb4>)
 8001108:	f008 f9d4 	bl	80094b4 <HAL_UART_Transmit>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001116:	b004      	add	sp, #16
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	08010f4c 	.word	0x08010f4c
 8001120:	240002e0 	.word	0x240002e0
 8001124:	240003f8 	.word	0x240003f8
 8001128:	08010f64 	.word	0x08010f64
 800112c:	08010f6c 	.word	0x08010f6c

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_MspInit+0x30>)
 8001144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001148:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x30>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x30>)
 8001154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	58024400 	.word	0x58024400

08001170 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	; 0x38
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a59      	ldr	r2, [pc, #356]	; (80012f4 <HAL_ETH_MspInit+0x184>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f040 80ab 	bne.w	80012ea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 8001196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800119a:	4a57      	ldr	r2, [pc, #348]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 800119c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011a4:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011b2:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c2:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011d0:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d6:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e0:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	4a40      	ldr	r2, [pc, #256]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001212:	4a39      	ldr	r2, [pc, #228]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 8001250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_ETH_MspInit+0x188>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001266:	2332      	movs	r3, #50	; 0x32
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001276:	230b      	movs	r3, #11
 8001278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	481e      	ldr	r0, [pc, #120]	; (80012fc <HAL_ETH_MspInit+0x18c>)
 8001282:	f001 fea5 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001286:	2386      	movs	r3, #134	; 0x86
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001296:	230b      	movs	r3, #11
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4817      	ldr	r0, [pc, #92]	; (8001300 <HAL_ETH_MspInit+0x190>)
 80012a2:	f001 fe95 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b8:	230b      	movs	r3, #11
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4810      	ldr	r0, [pc, #64]	; (8001304 <HAL_ETH_MspInit+0x194>)
 80012c4:	f001 fe84 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80012c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012da:	230b      	movs	r3, #11
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	4619      	mov	r1, r3
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <HAL_ETH_MspInit+0x198>)
 80012e6:	f001 fe73 	bl	8002fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3738      	adds	r7, #56	; 0x38
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40028000 	.word	0x40028000
 80012f8:	58024400 	.word	0x58024400
 80012fc:	58020800 	.word	0x58020800
 8001300:	58020000 	.word	0x58020000
 8001304:	58020400 	.word	0x58020400
 8001308:	58021800 	.word	0x58021800

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0b8      	sub	sp, #224	; 0xe0
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	22bc      	movs	r2, #188	; 0xbc
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00c ffa3 	bl	800e278 <memset>
  if(hi2c->Instance==I2C2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <HAL_I2C_MspInit+0xdc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d151      	bne.n	80013e0 <HAL_I2C_MspInit+0xd4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800133c:	2308      	movs	r3, #8
 800133e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4618      	mov	r0, r3
 800134c:	f006 f9b0 	bl	80076b0 <HAL_RCCEx_PeriphCLKConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001356:	f7ff feeb 	bl	8001130 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_I2C_MspInit+0xe0>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <HAL_I2C_MspInit+0xe0>)
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_I2C_MspInit+0xe0>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001378:	2303      	movs	r3, #3
 800137a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137e:	2312      	movs	r3, #18
 8001380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001384:	2301      	movs	r3, #1
 8001386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001390:	2304      	movs	r3, #4
 8001392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001396:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139a:	4619      	mov	r1, r3
 800139c:	4814      	ldr	r0, [pc, #80]	; (80013f0 <HAL_I2C_MspInit+0xe4>)
 800139e:	f001 fe17 	bl	8002fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_I2C_MspInit+0xe0>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_I2C_MspInit+0xe0>)
 80013aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_I2C_MspInit+0xe0>)
 80013b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2021      	movs	r0, #33	; 0x21
 80013c6:	f000 fc48 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80013ca:	2021      	movs	r0, #33	; 0x21
 80013cc:	f000 fc5f 	bl	8001c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2022      	movs	r0, #34	; 0x22
 80013d6:	f000 fc40 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80013da:	2022      	movs	r0, #34	; 0x22
 80013dc:	f000 fc57 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	37e0      	adds	r7, #224	; 0xe0
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40005800 	.word	0x40005800
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58021400 	.word	0x58021400

080013f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_TIM_Base_MspInit+0x48>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d116      	bne.n	8001434 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_TIM_Base_MspInit+0x4c>)
 8001408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_TIM_Base_MspInit+0x4c>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_Base_MspInit+0x4c>)
 8001418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2036      	movs	r0, #54	; 0x36
 800142a:	f000 fc16 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800142e:	2036      	movs	r0, #54	; 0x36
 8001430:	f000 fc2d 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40001000 	.word	0x40001000
 8001440:	58024400 	.word	0x58024400

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0b8      	sub	sp, #224	; 0xe0
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	22bc      	movs	r2, #188	; 0xbc
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f00c ff07 	bl	800e278 <memset>
  if(huart->Instance==USART3)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_UART_MspInit+0xd0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d14a      	bne.n	800150a <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001474:	2302      	movs	r3, #2
 8001476:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4618      	mov	r0, r3
 8001484:	f006 f914 	bl	80076b0 <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800148e:	f7ff fe4f 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_UART_MspInit+0xd4>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_UART_MspInit+0xd4>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_UART_MspInit+0xd4>)
 80014a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_UART_MspInit+0xd4>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <HAL_UART_MspInit+0xd4>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_MspInit+0xd4>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e8:	2307      	movs	r3, #7
 80014ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f2:	4619      	mov	r1, r3
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <HAL_UART_MspInit+0xd8>)
 80014f6:	f001 fd6b 	bl	8002fd0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2027      	movs	r0, #39	; 0x27
 8001500:	f000 fbab 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001504:	2027      	movs	r0, #39	; 0x27
 8001506:	f000 fbc2 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	37e0      	adds	r7, #224	; 0xe0
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40004800 	.word	0x40004800
 8001518:	58024400 	.word	0x58024400
 800151c:	58020c00 	.word	0x58020c00

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 fa36 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <I2C2_EV_IRQHandler+0x10>)
 800157a:	f003 ffd9 	bl	8005530 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000490 	.word	0x24000490

08001588 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <I2C2_ER_IRQHandler+0x10>)
 800158e:	f003 ffe9 	bl	8005564 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	24000490 	.word	0x24000490

0800159c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <USART3_IRQHandler+0x10>)
 80015a2:	f008 f81d 	bl	80095e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	240003f8 	.word	0x240003f8

080015b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM6_DAC_IRQHandler+0x10>)
 80015b6:	f007 fca5 	bl	8008f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	240004e8 	.word	0x240004e8

080015c4 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 80015ca:	f002 f935 	bl	8003838 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000dd4 	.word	0x24000dd4

080015d8 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 80015de:	f002 f92b 	bl	8003838 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	24000dd4 	.word	0x24000dd4

080015ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <OTG_FS_IRQHandler+0x10>)
 80015f2:	f002 f921 	bl	8003838 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24000dd4 	.word	0x24000dd4

08001600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_kill>:

int _kill(int pid, int sig)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800161a:	f00c fdf3 	bl	800e204 <__errno>
 800161e:	4603      	mov	r3, r0
 8001620:	2216      	movs	r2, #22
 8001622:	601a      	str	r2, [r3, #0]
	return -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_exit>:

void _exit (int status)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ffe7 	bl	8001610 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001642:	e7fe      	b.n	8001642 <_exit+0x12>

08001644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00a      	b.n	800166c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001656:	f3af 8000 	nop.w
 800165a:	4601      	mov	r1, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf0      	blt.n	8001656 <_read+0x12>
	}

return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e009      	b.n	80016a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf1      	blt.n	8001690 <_write+0x12>
	}
	return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_close>:

int _close(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
	return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016de:	605a      	str	r2, [r3, #4]
	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_isatty>:

int _isatty(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	return 1;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f00c fd58 	bl	800e204 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	24080000 	.word	0x24080000
 8001780:	00000400 	.word	0x00000400
 8001784:	240003e4 	.word	0x240003e4
 8001788:	240010e8 	.word	0x240010e8

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <SystemInit+0xec>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001796:	4a38      	ldr	r2, [pc, #224]	; (8001878 <SystemInit+0xec>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017a0:	4b36      	ldr	r3, [pc, #216]	; (800187c <SystemInit+0xf0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	2b06      	cmp	r3, #6
 80017aa:	d807      	bhi.n	80017bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <SystemInit+0xf0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 030f 	bic.w	r3, r3, #15
 80017b4:	4a31      	ldr	r2, [pc, #196]	; (800187c <SystemInit+0xf0>)
 80017b6:	f043 0307 	orr.w	r3, r3, #7
 80017ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <SystemInit+0xf4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2f      	ldr	r2, [pc, #188]	; (8001880 <SystemInit+0xf4>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <SystemInit+0xf4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <SystemInit+0xf4>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	492b      	ldr	r1, [pc, #172]	; (8001880 <SystemInit+0xf4>)
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <SystemInit+0xf8>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <SystemInit+0xf0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <SystemInit+0xf0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 030f 	bic.w	r3, r3, #15
 80017ee:	4a23      	ldr	r2, [pc, #140]	; (800187c <SystemInit+0xf0>)
 80017f0:	f043 0307 	orr.w	r3, r3, #7
 80017f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <SystemInit+0xf4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <SystemInit+0xf4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <SystemInit+0xf4>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <SystemInit+0xf4>)
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <SystemInit+0xfc>)
 800180c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <SystemInit+0xf4>)
 8001810:	4a1e      	ldr	r2, [pc, #120]	; (800188c <SystemInit+0x100>)
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <SystemInit+0xf4>)
 8001816:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <SystemInit+0x104>)
 8001818:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <SystemInit+0xf4>)
 800181c:	2200      	movs	r2, #0
 800181e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <SystemInit+0xf4>)
 8001822:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <SystemInit+0x104>)
 8001824:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <SystemInit+0xf4>)
 8001828:	2200      	movs	r2, #0
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <SystemInit+0xf4>)
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <SystemInit+0x104>)
 8001830:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <SystemInit+0xf4>)
 8001834:	2200      	movs	r2, #0
 8001836:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <SystemInit+0xf4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a10      	ldr	r2, [pc, #64]	; (8001880 <SystemInit+0xf4>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <SystemInit+0xf4>)
 8001846:	2200      	movs	r2, #0
 8001848:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <SystemInit+0x108>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <SystemInit+0x10c>)
 8001850:	4013      	ands	r3, r2
 8001852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001856:	d202      	bcs.n	800185e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <SystemInit+0x110>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <SystemInit+0x114>)
 8001860:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001864:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SystemInit+0xec>)
 8001868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800186c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	52002000 	.word	0x52002000
 8001880:	58024400 	.word	0x58024400
 8001884:	eaf6ed7f 	.word	0xeaf6ed7f
 8001888:	02020200 	.word	0x02020200
 800188c:	01ff0000 	.word	0x01ff0000
 8001890:	01010280 	.word	0x01010280
 8001894:	5c001000 	.word	0x5c001000
 8001898:	ffff0000 	.word	0xffff0000
 800189c:	51008108 	.word	0x51008108
 80018a0:	52004000 	.word	0x52004000

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a8:	f7ff ff70 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	; (80018e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	; (80018f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f00c fc9d 	bl	800e210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7fe fed7 	bl	8000688 <main>
  bx  lr
 80018da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018e4:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 80018e8:	080113c4 	.word	0x080113c4
  ldr r2, =_sbss
 80018ec:	240002c0 	.word	0x240002c0
  ldr r4, =_ebss
 80018f0:	240010e8 	.word	0x240010e8

080018f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC3_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fe:	2003      	movs	r0, #3
 8001900:	f000 f9a0 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001904:	f005 fcfe 	bl	8007304 <HAL_RCC_GetSysClockFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_Init+0x68>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	4913      	ldr	r1, [pc, #76]	; (8001964 <HAL_Init+0x6c>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_Init+0x68>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_Init+0x6c>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_Init+0x70>)
 800193a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_Init+0x74>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001942:	2000      	movs	r0, #0
 8001944:	f000 f814 	bl	8001970 <HAL_InitTick>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e002      	b.n	8001958 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001952:	f7ff fbf3 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58024400 	.word	0x58024400
 8001964:	08010f9c 	.word	0x08010f9c
 8001968:	24000004 	.word	0x24000004
 800196c:	24000000 	.word	0x24000000

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_InitTick+0x60>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e021      	b.n	80019c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_InitTick+0x64>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_InitTick+0x60>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f985 	bl	8001caa <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 f94f 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HAL_InitTick+0x68>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2400000c 	.word	0x2400000c
 80019d4:	24000000 	.word	0x24000000
 80019d8:	24000008 	.word	0x24000008

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	2400000c 	.word	0x2400000c
 8001a00:	240005f8 	.word	0x240005f8

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	240005f8 	.word	0x240005f8

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d005      	beq.n	8001a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_Delay+0x44>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a42:	bf00      	nop
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8f7      	bhi.n	8001a44 <HAL_Delay+0x28>
  {
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2400000c 	.word	0x2400000c

08001a64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetREVID+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	5c001000 	.word	0x5c001000

08001a7c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a8c:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	58000400 	.word	0x58000400

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	05fa0000 	.word	0x05fa0000

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff40 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff90 	bl	8001b98 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5f 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff33 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffa4 	bl	8001c00 <SysTick_Config>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff fe9a 	bl	8001a04 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e2dc      	b.n	8002296 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e2cd      	b.n	8002296 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a76      	ldr	r2, [pc, #472]	; (8001ed8 <HAL_DMA_Abort+0x214>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04a      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a74      	ldr	r2, [pc, #464]	; (8001edc <HAL_DMA_Abort+0x218>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d045      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a73      	ldr	r2, [pc, #460]	; (8001ee0 <HAL_DMA_Abort+0x21c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d040      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a71      	ldr	r2, [pc, #452]	; (8001ee4 <HAL_DMA_Abort+0x220>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d03b      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a70      	ldr	r2, [pc, #448]	; (8001ee8 <HAL_DMA_Abort+0x224>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d036      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_DMA_Abort+0x228>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a6d      	ldr	r2, [pc, #436]	; (8001ef0 <HAL_DMA_Abort+0x22c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d02c      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6b      	ldr	r2, [pc, #428]	; (8001ef4 <HAL_DMA_Abort+0x230>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d027      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6a      	ldr	r2, [pc, #424]	; (8001ef8 <HAL_DMA_Abort+0x234>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a68      	ldr	r2, [pc, #416]	; (8001efc <HAL_DMA_Abort+0x238>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a67      	ldr	r2, [pc, #412]	; (8001f00 <HAL_DMA_Abort+0x23c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a65      	ldr	r2, [pc, #404]	; (8001f04 <HAL_DMA_Abort+0x240>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a64      	ldr	r2, [pc, #400]	; (8001f08 <HAL_DMA_Abort+0x244>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a62      	ldr	r2, [pc, #392]	; (8001f0c <HAL_DMA_Abort+0x248>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a61      	ldr	r2, [pc, #388]	; (8001f10 <HAL_DMA_Abort+0x24c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_DMA_Abort+0xd6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a5f      	ldr	r2, [pc, #380]	; (8001f14 <HAL_DMA_Abort+0x250>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA_Abort+0xda>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_Abort+0xdc>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 021e 	bic.w	r2, r2, #30
 8001db2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e00a      	b.n	8001de2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020e 	bic.w	r2, r2, #14
 8001dda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3c      	ldr	r2, [pc, #240]	; (8001ed8 <HAL_DMA_Abort+0x214>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d072      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3a      	ldr	r2, [pc, #232]	; (8001edc <HAL_DMA_Abort+0x218>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d06d      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a39      	ldr	r2, [pc, #228]	; (8001ee0 <HAL_DMA_Abort+0x21c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d068      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a37      	ldr	r2, [pc, #220]	; (8001ee4 <HAL_DMA_Abort+0x220>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d063      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a36      	ldr	r2, [pc, #216]	; (8001ee8 <HAL_DMA_Abort+0x224>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05e      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a34      	ldr	r2, [pc, #208]	; (8001eec <HAL_DMA_Abort+0x228>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d059      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a33      	ldr	r2, [pc, #204]	; (8001ef0 <HAL_DMA_Abort+0x22c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d054      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a31      	ldr	r2, [pc, #196]	; (8001ef4 <HAL_DMA_Abort+0x230>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04f      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a30      	ldr	r2, [pc, #192]	; (8001ef8 <HAL_DMA_Abort+0x234>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04a      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2e      	ldr	r2, [pc, #184]	; (8001efc <HAL_DMA_Abort+0x238>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d045      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <HAL_DMA_Abort+0x23c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d040      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <HAL_DMA_Abort+0x240>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d03b      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <HAL_DMA_Abort+0x244>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d036      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <HAL_DMA_Abort+0x248>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d031      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_DMA_Abort+0x24c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d02c      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <HAL_DMA_Abort+0x250>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d027      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <HAL_DMA_Abort+0x254>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d022      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_DMA_Abort+0x258>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01d      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <HAL_DMA_Abort+0x25c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_DMA_Abort+0x260>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_DMA_Abort+0x264>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_DMA_Abort+0x268>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_DMA_Abort+0x26c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_DMA_Abort+0x20e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_DMA_Abort+0x270>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d132      	bne.n	8001f38 <HAL_DMA_Abort+0x274>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e031      	b.n	8001f3a <HAL_DMA_Abort+0x276>
 8001ed6:	bf00      	nop
 8001ed8:	40020010 	.word	0x40020010
 8001edc:	40020028 	.word	0x40020028
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	40020070 	.word	0x40020070
 8001eec:	40020088 	.word	0x40020088
 8001ef0:	400200a0 	.word	0x400200a0
 8001ef4:	400200b8 	.word	0x400200b8
 8001ef8:	40020410 	.word	0x40020410
 8001efc:	40020428 	.word	0x40020428
 8001f00:	40020440 	.word	0x40020440
 8001f04:	40020458 	.word	0x40020458
 8001f08:	40020470 	.word	0x40020470
 8001f0c:	40020488 	.word	0x40020488
 8001f10:	400204a0 	.word	0x400204a0
 8001f14:	400204b8 	.word	0x400204b8
 8001f18:	58025408 	.word	0x58025408
 8001f1c:	5802541c 	.word	0x5802541c
 8001f20:	58025430 	.word	0x58025430
 8001f24:	58025444 	.word	0x58025444
 8001f28:	58025458 	.word	0x58025458
 8001f2c:	5802546c 	.word	0x5802546c
 8001f30:	58025480 	.word	0x58025480
 8001f34:	58025494 	.word	0x58025494
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6d      	ldr	r2, [pc, #436]	; (8002108 <HAL_DMA_Abort+0x444>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04a      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6b      	ldr	r2, [pc, #428]	; (800210c <HAL_DMA_Abort+0x448>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d045      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6a      	ldr	r2, [pc, #424]	; (8002110 <HAL_DMA_Abort+0x44c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a68      	ldr	r2, [pc, #416]	; (8002114 <HAL_DMA_Abort+0x450>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d03b      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a67      	ldr	r2, [pc, #412]	; (8002118 <HAL_DMA_Abort+0x454>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d036      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a65      	ldr	r2, [pc, #404]	; (800211c <HAL_DMA_Abort+0x458>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a64      	ldr	r2, [pc, #400]	; (8002120 <HAL_DMA_Abort+0x45c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d02c      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a62      	ldr	r2, [pc, #392]	; (8002124 <HAL_DMA_Abort+0x460>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a61      	ldr	r2, [pc, #388]	; (8002128 <HAL_DMA_Abort+0x464>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a5f      	ldr	r2, [pc, #380]	; (800212c <HAL_DMA_Abort+0x468>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5e      	ldr	r2, [pc, #376]	; (8002130 <HAL_DMA_Abort+0x46c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_DMA_Abort+0x470>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5b      	ldr	r2, [pc, #364]	; (8002138 <HAL_DMA_Abort+0x474>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a59      	ldr	r2, [pc, #356]	; (800213c <HAL_DMA_Abort+0x478>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_DMA_Abort+0x47c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort+0x32a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_DMA_Abort+0x480>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <HAL_DMA_Abort+0x33c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e007      	b.n	8002010 <HAL_DMA_Abort+0x34c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002010:	e013      	b.n	800203a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002012:	f7ff fcf7 	bl	8001a04 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b05      	cmp	r3, #5
 800201e:	d90c      	bls.n	800203a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2203      	movs	r2, #3
 8002032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e12d      	b.n	8002296 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e5      	bne.n	8002012 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <HAL_DMA_Abort+0x444>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04a      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2d      	ldr	r2, [pc, #180]	; (800210c <HAL_DMA_Abort+0x448>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d045      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <HAL_DMA_Abort+0x44c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d040      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_DMA_Abort+0x450>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d03b      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_DMA_Abort+0x454>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d036      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_DMA_Abort+0x458>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_DMA_Abort+0x45c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d02c      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <HAL_DMA_Abort+0x460>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d027      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a23      	ldr	r2, [pc, #140]	; (8002128 <HAL_DMA_Abort+0x464>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a21      	ldr	r2, [pc, #132]	; (800212c <HAL_DMA_Abort+0x468>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01d      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a20      	ldr	r2, [pc, #128]	; (8002130 <HAL_DMA_Abort+0x46c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d018      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_DMA_Abort+0x470>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_DMA_Abort+0x474>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_DMA_Abort+0x478>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <HAL_DMA_Abort+0x47c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d004      	beq.n	80020e6 <HAL_DMA_Abort+0x422>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_DMA_Abort+0x480>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Abort+0x426>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_DMA_Abort+0x428>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d02b      	beq.n	8002148 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	223f      	movs	r2, #63	; 0x3f
 8002100:	409a      	lsls	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	e02a      	b.n	800215e <HAL_DMA_Abort+0x49a>
 8002108:	40020010 	.word	0x40020010
 800210c:	40020028 	.word	0x40020028
 8002110:	40020040 	.word	0x40020040
 8002114:	40020058 	.word	0x40020058
 8002118:	40020070 	.word	0x40020070
 800211c:	40020088 	.word	0x40020088
 8002120:	400200a0 	.word	0x400200a0
 8002124:	400200b8 	.word	0x400200b8
 8002128:	40020410 	.word	0x40020410
 800212c:	40020428 	.word	0x40020428
 8002130:	40020440 	.word	0x40020440
 8002134:	40020458 	.word	0x40020458
 8002138:	40020470 	.word	0x40020470
 800213c:	40020488 	.word	0x40020488
 8002140:	400204a0 	.word	0x400204a0
 8002144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2201      	movs	r2, #1
 8002158:	409a      	lsls	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a4f      	ldr	r2, [pc, #316]	; (80022a0 <HAL_DMA_Abort+0x5dc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d072      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a4d      	ldr	r2, [pc, #308]	; (80022a4 <HAL_DMA_Abort+0x5e0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d06d      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <HAL_DMA_Abort+0x5e4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d068      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a4a      	ldr	r2, [pc, #296]	; (80022ac <HAL_DMA_Abort+0x5e8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d063      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_DMA_Abort+0x5ec>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d05e      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <HAL_DMA_Abort+0x5f0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d059      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a46      	ldr	r2, [pc, #280]	; (80022b8 <HAL_DMA_Abort+0x5f4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d054      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a44      	ldr	r2, [pc, #272]	; (80022bc <HAL_DMA_Abort+0x5f8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04f      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a43      	ldr	r2, [pc, #268]	; (80022c0 <HAL_DMA_Abort+0x5fc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04a      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a41      	ldr	r2, [pc, #260]	; (80022c4 <HAL_DMA_Abort+0x600>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d045      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a40      	ldr	r2, [pc, #256]	; (80022c8 <HAL_DMA_Abort+0x604>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d040      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3e      	ldr	r2, [pc, #248]	; (80022cc <HAL_DMA_Abort+0x608>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d03b      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <HAL_DMA_Abort+0x60c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d036      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <HAL_DMA_Abort+0x610>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a3a      	ldr	r2, [pc, #232]	; (80022d8 <HAL_DMA_Abort+0x614>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d02c      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a38      	ldr	r2, [pc, #224]	; (80022dc <HAL_DMA_Abort+0x618>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d027      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a37      	ldr	r2, [pc, #220]	; (80022e0 <HAL_DMA_Abort+0x61c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a35      	ldr	r2, [pc, #212]	; (80022e4 <HAL_DMA_Abort+0x620>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01d      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <HAL_DMA_Abort+0x624>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d018      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_DMA_Abort+0x628>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a31      	ldr	r2, [pc, #196]	; (80022f0 <HAL_DMA_Abort+0x62c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2f      	ldr	r2, [pc, #188]	; (80022f4 <HAL_DMA_Abort+0x630>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <HAL_DMA_Abort+0x634>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_DMA_Abort+0x58a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <HAL_DMA_Abort+0x638>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Abort+0x58e>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_DMA_Abort+0x590>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002260:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002278:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002282:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40020010 	.word	0x40020010
 80022a4:	40020028 	.word	0x40020028
 80022a8:	40020040 	.word	0x40020040
 80022ac:	40020058 	.word	0x40020058
 80022b0:	40020070 	.word	0x40020070
 80022b4:	40020088 	.word	0x40020088
 80022b8:	400200a0 	.word	0x400200a0
 80022bc:	400200b8 	.word	0x400200b8
 80022c0:	40020410 	.word	0x40020410
 80022c4:	40020428 	.word	0x40020428
 80022c8:	40020440 	.word	0x40020440
 80022cc:	40020458 	.word	0x40020458
 80022d0:	40020470 	.word	0x40020470
 80022d4:	40020488 	.word	0x40020488
 80022d8:	400204a0 	.word	0x400204a0
 80022dc:	400204b8 	.word	0x400204b8
 80022e0:	58025408 	.word	0x58025408
 80022e4:	5802541c 	.word	0x5802541c
 80022e8:	58025430 	.word	0x58025430
 80022ec:	58025444 	.word	0x58025444
 80022f0:	58025458 	.word	0x58025458
 80022f4:	5802546c 	.word	0x5802546c
 80022f8:	58025480 	.word	0x58025480
 80022fc:	58025494 	.word	0x58025494

08002300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e205      	b.n	800271e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e1fa      	b.n	800271e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a8c      	ldr	r2, [pc, #560]	; (8002560 <HAL_DMA_Abort_IT+0x260>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d04a      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a8b      	ldr	r2, [pc, #556]	; (8002564 <HAL_DMA_Abort_IT+0x264>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d045      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a89      	ldr	r2, [pc, #548]	; (8002568 <HAL_DMA_Abort_IT+0x268>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d040      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a88      	ldr	r2, [pc, #544]	; (800256c <HAL_DMA_Abort_IT+0x26c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d03b      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a86      	ldr	r2, [pc, #536]	; (8002570 <HAL_DMA_Abort_IT+0x270>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d036      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a85      	ldr	r2, [pc, #532]	; (8002574 <HAL_DMA_Abort_IT+0x274>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d031      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a83      	ldr	r2, [pc, #524]	; (8002578 <HAL_DMA_Abort_IT+0x278>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02c      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a82      	ldr	r2, [pc, #520]	; (800257c <HAL_DMA_Abort_IT+0x27c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d027      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a80      	ldr	r2, [pc, #512]	; (8002580 <HAL_DMA_Abort_IT+0x280>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d022      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7f      	ldr	r2, [pc, #508]	; (8002584 <HAL_DMA_Abort_IT+0x284>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d01d      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a7d      	ldr	r2, [pc, #500]	; (8002588 <HAL_DMA_Abort_IT+0x288>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d018      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7c      	ldr	r2, [pc, #496]	; (800258c <HAL_DMA_Abort_IT+0x28c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7a      	ldr	r2, [pc, #488]	; (8002590 <HAL_DMA_Abort_IT+0x290>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00e      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_DMA_Abort_IT+0x294>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a77      	ldr	r2, [pc, #476]	; (8002598 <HAL_DMA_Abort_IT+0x298>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_DMA_Abort_IT+0xc8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a76      	ldr	r2, [pc, #472]	; (800259c <HAL_DMA_Abort_IT+0x29c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_DMA_Abort_IT+0xcc>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_DMA_Abort_IT+0xce>
 80023cc:	2300      	movs	r3, #0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d065      	beq.n	800249e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2204      	movs	r2, #4
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a60      	ldr	r2, [pc, #384]	; (8002560 <HAL_DMA_Abort_IT+0x260>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a5e      	ldr	r2, [pc, #376]	; (8002564 <HAL_DMA_Abort_IT+0x264>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_DMA_Abort_IT+0x268>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a5b      	ldr	r2, [pc, #364]	; (800256c <HAL_DMA_Abort_IT+0x26c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_DMA_Abort_IT+0x270>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a58      	ldr	r2, [pc, #352]	; (8002574 <HAL_DMA_Abort_IT+0x274>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_DMA_Abort_IT+0x278>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_DMA_Abort_IT+0x27c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a54      	ldr	r2, [pc, #336]	; (8002580 <HAL_DMA_Abort_IT+0x280>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a52      	ldr	r2, [pc, #328]	; (8002584 <HAL_DMA_Abort_IT+0x284>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a51      	ldr	r2, [pc, #324]	; (8002588 <HAL_DMA_Abort_IT+0x288>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a4f      	ldr	r2, [pc, #316]	; (800258c <HAL_DMA_Abort_IT+0x28c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_DMA_Abort_IT+0x290>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a4c      	ldr	r2, [pc, #304]	; (8002594 <HAL_DMA_Abort_IT+0x294>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_DMA_Abort_IT+0x298>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort_IT+0x17a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a49      	ldr	r2, [pc, #292]	; (800259c <HAL_DMA_Abort_IT+0x29c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d108      	bne.n	800248c <HAL_DMA_Abort_IT+0x18c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e147      	b.n	800271c <HAL_DMA_Abort_IT+0x41c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e13e      	b.n	800271c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 020e 	bic.w	r2, r2, #14
 80024ac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <HAL_DMA_Abort_IT+0x260>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04a      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a29      	ldr	r2, [pc, #164]	; (8002564 <HAL_DMA_Abort_IT+0x264>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d045      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a28      	ldr	r2, [pc, #160]	; (8002568 <HAL_DMA_Abort_IT+0x268>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d040      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_DMA_Abort_IT+0x26c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d03b      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a25      	ldr	r2, [pc, #148]	; (8002570 <HAL_DMA_Abort_IT+0x270>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d036      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_DMA_Abort_IT+0x274>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d031      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <HAL_DMA_Abort_IT+0x278>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d02c      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_DMA_Abort_IT+0x27c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d027      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_DMA_Abort_IT+0x280>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_DMA_Abort_IT+0x284>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01d      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_DMA_Abort_IT+0x288>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1a      	ldr	r2, [pc, #104]	; (800258c <HAL_DMA_Abort_IT+0x28c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_DMA_Abort_IT+0x290>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_DMA_Abort_IT+0x294>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <HAL_DMA_Abort_IT+0x298>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_DMA_Abort_IT+0x24e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_DMA_Abort_IT+0x29c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d128      	bne.n	80025a0 <HAL_DMA_Abort_IT+0x2a0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e027      	b.n	80025b0 <HAL_DMA_Abort_IT+0x2b0>
 8002560:	40020010 	.word	0x40020010
 8002564:	40020028 	.word	0x40020028
 8002568:	40020040 	.word	0x40020040
 800256c:	40020058 	.word	0x40020058
 8002570:	40020070 	.word	0x40020070
 8002574:	40020088 	.word	0x40020088
 8002578:	400200a0 	.word	0x400200a0
 800257c:	400200b8 	.word	0x400200b8
 8002580:	40020410 	.word	0x40020410
 8002584:	40020428 	.word	0x40020428
 8002588:	40020440 	.word	0x40020440
 800258c:	40020458 	.word	0x40020458
 8002590:	40020470 	.word	0x40020470
 8002594:	40020488 	.word	0x40020488
 8002598:	400204a0 	.word	0x400204a0
 800259c:	400204b8 	.word	0x400204b8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5c      	ldr	r2, [pc, #368]	; (8002728 <HAL_DMA_Abort_IT+0x428>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d072      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a5b      	ldr	r2, [pc, #364]	; (800272c <HAL_DMA_Abort_IT+0x42c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d06d      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a59      	ldr	r2, [pc, #356]	; (8002730 <HAL_DMA_Abort_IT+0x430>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d068      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_DMA_Abort_IT+0x434>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d063      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a56      	ldr	r2, [pc, #344]	; (8002738 <HAL_DMA_Abort_IT+0x438>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d05e      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_DMA_Abort_IT+0x43c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d059      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a53      	ldr	r2, [pc, #332]	; (8002740 <HAL_DMA_Abort_IT+0x440>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d054      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_DMA_Abort_IT+0x444>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d04f      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a50      	ldr	r2, [pc, #320]	; (8002748 <HAL_DMA_Abort_IT+0x448>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d04a      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a4f      	ldr	r2, [pc, #316]	; (800274c <HAL_DMA_Abort_IT+0x44c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d045      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <HAL_DMA_Abort_IT+0x450>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d040      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_DMA_Abort_IT+0x454>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d03b      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <HAL_DMA_Abort_IT+0x458>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d036      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a49      	ldr	r2, [pc, #292]	; (800275c <HAL_DMA_Abort_IT+0x45c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_DMA_Abort_IT+0x460>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02c      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_DMA_Abort_IT+0x464>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d027      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a44      	ldr	r2, [pc, #272]	; (8002768 <HAL_DMA_Abort_IT+0x468>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d022      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a43      	ldr	r2, [pc, #268]	; (800276c <HAL_DMA_Abort_IT+0x46c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d01d      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a41      	ldr	r2, [pc, #260]	; (8002770 <HAL_DMA_Abort_IT+0x470>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d018      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a40      	ldr	r2, [pc, #256]	; (8002774 <HAL_DMA_Abort_IT+0x474>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a3e      	ldr	r2, [pc, #248]	; (8002778 <HAL_DMA_Abort_IT+0x478>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00e      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3d      	ldr	r2, [pc, #244]	; (800277c <HAL_DMA_Abort_IT+0x47c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3b      	ldr	r2, [pc, #236]	; (8002780 <HAL_DMA_Abort_IT+0x480>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x3a0>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <HAL_DMA_Abort_IT+0x484>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d101      	bne.n	80026a4 <HAL_DMA_Abort_IT+0x3a4>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_DMA_Abort_IT+0x3a6>
 80026a4:	2300      	movs	r3, #0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d028      	beq.n	80026fc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40020010 	.word	0x40020010
 800272c:	40020028 	.word	0x40020028
 8002730:	40020040 	.word	0x40020040
 8002734:	40020058 	.word	0x40020058
 8002738:	40020070 	.word	0x40020070
 800273c:	40020088 	.word	0x40020088
 8002740:	400200a0 	.word	0x400200a0
 8002744:	400200b8 	.word	0x400200b8
 8002748:	40020410 	.word	0x40020410
 800274c:	40020428 	.word	0x40020428
 8002750:	40020440 	.word	0x40020440
 8002754:	40020458 	.word	0x40020458
 8002758:	40020470 	.word	0x40020470
 800275c:	40020488 	.word	0x40020488
 8002760:	400204a0 	.word	0x400204a0
 8002764:	400204b8 	.word	0x400204b8
 8002768:	58025408 	.word	0x58025408
 800276c:	5802541c 	.word	0x5802541c
 8002770:	58025430 	.word	0x58025430
 8002774:	58025444 	.word	0x58025444
 8002778:	58025458 	.word	0x58025458
 800277c:	5802546c 	.word	0x5802546c
 8002780:	58025480 	.word	0x58025480
 8002784:	58025494 	.word	0x58025494

08002788 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002796:	b2db      	uxtb	r3, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0c6      	b.n	8002944 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fcd6 	bl	8001170 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2223      	movs	r2, #35	; 0x23
 80027c8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	4b60      	ldr	r3, [pc, #384]	; (800294c <HAL_ETH_Init+0x1a8>)
 80027cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027d0:	4a5e      	ldr	r2, [pc, #376]	; (800294c <HAL_ETH_Init+0x1a8>)
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_ETH_Init+0x1a8>)
 80027dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7a1b      	ldrb	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff f943 	bl	8001a7c <HAL_SYSCFG_ETHInterfaceSelect>
 80027f6:	e003      	b.n	8002800 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80027f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80027fc:	f7ff f93e 	bl	8001a7c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002818:	f7ff f8f4 	bl	8001a04 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800281e:	e00f      	b.n	8002840 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002820:	f7ff f8f0 	bl	8001a04 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800282e:	d907      	bls.n	8002840 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	22e0      	movs	r2, #224	; 0xe0
 800283a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e081      	b.n	8002944 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e6      	bne.n	8002820 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fac0 	bl	8002dd8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002858:	f004 fece 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 800285c:	4603      	mov	r3, r0
 800285e:	4a3c      	ldr	r2, [pc, #240]	; (8002950 <HAL_ETH_Init+0x1ac>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	0c9a      	lsrs	r2, r3, #18
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3a01      	subs	r2, #1
 800286c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fa13 	bl	8002c9c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800288c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002890:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	22e0      	movs	r2, #224	; 0xe0
 80028a8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e04a      	b.n	8002944 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80028b6:	4413      	add	r3, r2
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_ETH_Init+0x1b0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6952      	ldr	r2, [r2, #20]
 80028c2:	0052      	lsls	r2, r2, #1
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	6809      	ldr	r1, [r1, #0]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	f241 1308 	movw	r3, #4360	; 0x1108
 80028ce:	440b      	add	r3, r1
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fad8 	bl	8002e88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fb1c 	bl	8002f16 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	3305      	adds	r3, #5
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	3303      	adds	r3, #3
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	061a      	lsls	r2, r3, #24
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	3302      	adds	r3, #2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	3301      	adds	r3, #1
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800291c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800292a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800292c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2210      	movs	r2, #16
 800293a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2210      	movs	r2, #16
 8002940:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	58024400 	.word	0x58024400
 8002950:	431bde83 	.word	0x431bde83
 8002954:	ffff8001 	.word	0xffff8001

08002958 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800296a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	791b      	ldrb	r3, [r3, #4]
 8002970:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002972:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	7b1b      	ldrb	r3, [r3, #12]
 8002978:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800297a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	7b5b      	ldrb	r3, [r3, #13]
 8002980:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002982:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	7b9b      	ldrb	r3, [r3, #14]
 8002988:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800298a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	7bdb      	ldrb	r3, [r3, #15]
 8002990:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002992:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	7c12      	ldrb	r2, [r2, #16]
 8002998:	2a00      	cmp	r2, #0
 800299a:	d102      	bne.n	80029a2 <ETH_SetMACConfig+0x4a>
 800299c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029a0:	e000      	b.n	80029a4 <ETH_SetMACConfig+0x4c>
 80029a2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80029a4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	7c52      	ldrb	r2, [r2, #17]
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	d102      	bne.n	80029b4 <ETH_SetMACConfig+0x5c>
 80029ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b2:	e000      	b.n	80029b6 <ETH_SetMACConfig+0x5e>
 80029b4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80029b6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	7c9b      	ldrb	r3, [r3, #18]
 80029bc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80029be:	431a      	orrs	r2, r3
                                macconf->Speed |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80029c4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80029ca:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	7f1b      	ldrb	r3, [r3, #28]
 80029d0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80029d2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	7f5b      	ldrb	r3, [r3, #29]
 80029d8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80029da:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	7f92      	ldrb	r2, [r2, #30]
 80029e0:	2a00      	cmp	r2, #0
 80029e2:	d102      	bne.n	80029ea <ETH_SetMACConfig+0x92>
 80029e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e8:	e000      	b.n	80029ec <ETH_SetMACConfig+0x94>
 80029ea:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80029ec:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	7fdb      	ldrb	r3, [r3, #31]
 80029f2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80029f4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d102      	bne.n	8002a06 <ETH_SetMACConfig+0xae>
 8002a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a04:	e000      	b.n	8002a08 <ETH_SetMACConfig+0xb0>
 8002a06:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002a08:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002a0e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a16:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002a18:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b56      	ldr	r3, [pc, #344]	; (8002b84 <ETH_SetMACConfig+0x22c>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a42:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002a44:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a4c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002a4e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a56:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002a58:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d102      	bne.n	8002a6a <ETH_SetMACConfig+0x112>
 8002a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a68:	e000      	b.n	8002a6c <ETH_SetMACConfig+0x114>
 8002a6a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002a6c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <ETH_SetMACConfig+0x230>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	430b      	orrs	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a90:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <ETH_SetMACConfig+0x234>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ab4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002aba:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d101      	bne.n	8002aca <ETH_SetMACConfig+0x172>
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	e000      	b.n	8002acc <ETH_SetMACConfig+0x174>
 8002aca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002acc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ade:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	68f9      	ldr	r1, [r7, #12]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002af4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002afc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f023 0103 	bic.w	r1, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002b22:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d101      	bne.n	8002b46 <ETH_SetMACConfig+0x1ee>
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	e000      	b.n	8002b48 <ETH_SetMACConfig+0x1f0>
 8002b46:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002b48:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002b50:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002b52:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002b5a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002b68:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	00048083 	.word	0x00048083
 8002b88:	c0f88000 	.word	0xc0f88000
 8002b8c:	fffffef0 	.word	0xfffffef0

08002b90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <ETH_SetDMAConfig+0xf8>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	6809      	ldr	r1, [r1, #0]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002bb6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	791b      	ldrb	r3, [r3, #4]
 8002bbc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bc2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	7b1b      	ldrb	r3, [r3, #12]
 8002bc8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	f241 0304 	movw	r3, #4100	; 0x1004
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <ETH_SetDMAConfig+0xfc>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6811      	ldr	r1, [r2, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	f241 0304 	movw	r3, #4100	; 0x1004
 8002bea:	440b      	add	r3, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	7b5b      	ldrb	r3, [r3, #13]
 8002bf2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <ETH_SetDMAConfig+0x100>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6811      	ldr	r1, [r2, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002c16:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7d1b      	ldrb	r3, [r3, #20]
 8002c20:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c22:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	7f5b      	ldrb	r3, [r3, #29]
 8002c28:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f241 1304 	movw	r3, #4356	; 0x1104
 8002c36:	4413      	add	r3, r2
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <ETH_SetDMAConfig+0x104>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6811      	ldr	r1, [r2, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	f241 1304 	movw	r3, #4356	; 0x1104
 8002c4a:	440b      	add	r3, r1
 8002c4c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	7f1b      	ldrb	r3, [r3, #28]
 8002c52:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c64:	4413      	add	r3, r2
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <ETH_SetDMAConfig+0x108>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6811      	ldr	r1, [r2, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	f241 1308 	movw	r3, #4360	; 0x1108
 8002c78:	440b      	add	r3, r1
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	ffff87fd 	.word	0xffff87fd
 8002c8c:	ffff2ffe 	.word	0xffff2ffe
 8002c90:	fffec000 	.word	0xfffec000
 8002c94:	ffc0efef 	.word	0xffc0efef
 8002c98:	7fc0ffff 	.word	0x7fc0ffff

08002c9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0a4      	sub	sp, #144	; 0x90
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002caa:	2300      	movs	r3, #0
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cdc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002cf4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002cf8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d00:	2300      	movs	r3, #0
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002d16:	2300      	movs	r3, #0
 8002d18:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002d34:	2320      	movs	r3, #32
 8002d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002d46:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d50:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002d76:	2300      	movs	r3, #0
 8002d78:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fde6 	bl	8002958 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d90:	2301      	movs	r3, #1
 8002d92:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002da6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002daa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002db0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002db4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002dbc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff fee1 	bl	8002b90 <ETH_SetDMAConfig>
}
 8002dce:	bf00      	nop
 8002dd0:	3790      	adds	r7, #144	; 0x90
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002df2:	f004 fc01 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8002df6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d908      	bls.n	8002e12 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d804      	bhi.n	8002e12 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e027      	b.n	8002e62 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d908      	bls.n	8002e2c <ETH_MAC_MDIO_ClkConfig+0x54>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d204      	bcs.n	8002e2c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e01a      	b.n	8002e62 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d303      	bcc.n	8002e3c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d911      	bls.n	8002e60 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d908      	bls.n	8002e56 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d804      	bhi.n	8002e56 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e005      	b.n	8002e62 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e000      	b.n	8002e62 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002e60:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	01312cff 	.word	0x01312cff
 8002e78:	02160ebf 	.word	0x02160ebf
 8002e7c:	03938700 	.word	0x03938700
 8002e80:	05f5e0ff 	.word	0x05f5e0ff
 8002e84:	08f0d17f 	.word	0x08f0d17f

08002e88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e01d      	b.n	8002ed2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68d9      	ldr	r1, [r3, #12]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	3206      	adds	r2, #6
 8002ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d9de      	bls.n	8002e96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f241 132c 	movw	r3, #4396	; 0x112c
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2203      	movs	r2, #3
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68d9      	ldr	r1, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f241 1314 	movw	r3, #4372	; 0x1114
 8002ef8:	4413      	add	r3, r2
 8002efa:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e024      	b.n	8002f6e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6919      	ldr	r1, [r3, #16]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3310      	adds	r3, #16
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d9d7      	bls.n	8002f24 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f241 1330 	movw	r3, #4400	; 0x1130
 8002f9a:	4413      	add	r3, r2
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6919      	ldr	r1, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	f241 131c 	movw	r3, #4380	; 0x111c
 8002fac:	4413      	add	r3, r2
 8002fae:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	f241 1328 	movw	r3, #4392	; 0x1128
 8002fc0:	4413      	add	r3, r2
 8002fc2:	6019      	str	r1, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_GPIO_Init+0x234>)
 8002fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fe2:	e194      	b.n	800330e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8186 	beq.w	8003308 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d00b      	beq.n	800301c <HAL_GPIO_Init+0x4c>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d007      	beq.n	800301c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003010:	2b11      	cmp	r3, #17
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b12      	cmp	r3, #18
 800301a:	d130      	bne.n	800307e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003052:	2201      	movs	r2, #1
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0201 	and.w	r2, r3, #1
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0xee>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b12      	cmp	r3, #18
 80030bc:	d123      	bne.n	8003106 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0203 	and.w	r2, r3, #3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80e0 	beq.w	8003308 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_GPIO_Init+0x238>)
 800314a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800314e:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <HAL_GPIO_Init+0x238>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_GPIO_Init+0x238>)
 800315a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_GPIO_Init+0x23c>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <HAL_GPIO_Init+0x240>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d052      	beq.n	8003238 <HAL_GPIO_Init+0x268>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_GPIO_Init+0x244>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_GPIO_Init+0x22e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <HAL_GPIO_Init+0x248>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <HAL_GPIO_Init+0x22a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <HAL_GPIO_Init+0x24c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d025      	beq.n	80031f6 <HAL_GPIO_Init+0x226>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_GPIO_Init+0x250>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01f      	beq.n	80031f2 <HAL_GPIO_Init+0x222>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_GPIO_Init+0x254>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x21e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <HAL_GPIO_Init+0x258>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x21a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_GPIO_Init+0x25c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x216>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_GPIO_Init+0x260>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x212>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_GPIO_Init+0x264>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x20e>
 80031da:	2309      	movs	r3, #9
 80031dc:	e02d      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031de:	230a      	movs	r3, #10
 80031e0:	e02b      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031e2:	2308      	movs	r3, #8
 80031e4:	e029      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031e6:	2307      	movs	r3, #7
 80031e8:	e027      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e025      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e023      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e021      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e01f      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e01d      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031fe:	2301      	movs	r3, #1
 8003200:	e01b      	b.n	800323a <HAL_GPIO_Init+0x26a>
 8003202:	bf00      	nop
 8003204:	58000080 	.word	0x58000080
 8003208:	58024400 	.word	0x58024400
 800320c:	58000400 	.word	0x58000400
 8003210:	58020000 	.word	0x58020000
 8003214:	58020400 	.word	0x58020400
 8003218:	58020800 	.word	0x58020800
 800321c:	58020c00 	.word	0x58020c00
 8003220:	58021000 	.word	0x58021000
 8003224:	58021400 	.word	0x58021400
 8003228:	58021800 	.word	0x58021800
 800322c:	58021c00 	.word	0x58021c00
 8003230:	58022000 	.word	0x58022000
 8003234:	58022400 	.word	0x58022400
 8003238:	2300      	movs	r3, #0
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324a:	4938      	ldr	r1, [pc, #224]	; (800332c <HAL_GPIO_Init+0x35c>)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	3302      	adds	r3, #2
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3301      	adds	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f ae63 	bne.w	8002fe4 <HAL_GPIO_Init+0x14>
  }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	3724      	adds	r7, #36	; 0x24
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	58000400 	.word	0x58000400

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800334c:	e003      	b.n	8003356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003364:	b08f      	sub	sp, #60	; 0x3c
 8003366:	af0a      	add	r7, sp, #40	; 0x28
 8003368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e054      	b.n	800341e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f00a fc5e 	bl	800dc50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f007 fcbf 	bl	800ad36 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	687e      	ldr	r6, [r7, #4]
 80033c0:	466d      	mov	r5, sp
 80033c2:	f106 0410 	add.w	r4, r6, #16
 80033c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033d6:	1d33      	adds	r3, r6, #4
 80033d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	f007 fc2c 	bl	800ac38 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f007 fcb6 	bl	800ad58 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	687e      	ldr	r6, [r7, #4]
 80033f4:	466d      	mov	r5, sp
 80033f6:	f106 0410 	add.w	r4, r6, #16
 80033fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003406:	e885 0003 	stmia.w	r5, {r0, r1}
 800340a:	1d33      	adds	r3, r6, #4
 800340c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800340e:	6838      	ldr	r0, [r7, #0]
 8003410:	f007 fe00 	bl	800b014 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003426 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003426:	b590      	push	{r4, r7, lr}
 8003428:	b089      	sub	sp, #36	; 0x24
 800342a:	af04      	add	r7, sp, #16
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	4608      	mov	r0, r1
 8003430:	4611      	mov	r1, r2
 8003432:	461a      	mov	r2, r3
 8003434:	4603      	mov	r3, r0
 8003436:	70fb      	strb	r3, [r7, #3]
 8003438:	460b      	mov	r3, r1
 800343a:	70bb      	strb	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_HCD_HC_Init+0x28>
 800344a:	2302      	movs	r3, #2
 800344c:	e076      	b.n	800353c <HAL_HCD_HC_Init+0x116>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	333d      	adds	r3, #61	; 0x3d
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3338      	adds	r3, #56	; 0x38
 8003476:	787a      	ldrb	r2, [r7, #1]
 8003478:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3340      	adds	r3, #64	; 0x40
 8003488:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800348a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3339      	adds	r3, #57	; 0x39
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	333f      	adds	r3, #63	; 0x3f
 80034ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	78ba      	ldrb	r2, [r7, #2]
 80034b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ba:	b2d0      	uxtb	r0, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	333a      	adds	r3, #58	; 0x3a
 80034c8:	4602      	mov	r2, r0
 80034ca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80034cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da09      	bge.n	80034e8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	333b      	adds	r3, #59	; 0x3b
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e008      	b.n	80034fa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	333b      	adds	r3, #59	; 0x3b
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	333c      	adds	r3, #60	; 0x3c
 8003508:	f897 2020 	ldrb.w	r2, [r7, #32]
 800350c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	787c      	ldrb	r4, [r7, #1]
 8003514:	78ba      	ldrb	r2, [r7, #2]
 8003516:	78f9      	ldrb	r1, [r7, #3]
 8003518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800351a:	9302      	str	r3, [sp, #8]
 800351c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	4623      	mov	r3, r4
 800352a:	f007 feef 	bl	800b30c <USB_HC_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	bd90      	pop	{r4, r7, pc}

08003544 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_HCD_HC_Halt+0x1e>
 800355e:	2302      	movs	r3, #2
 8003560:	e00f      	b.n	8003582 <HAL_HCD_HC_Halt+0x3e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f008 f92b 	bl	800b7ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	70fb      	strb	r3, [r7, #3]
 800359e:	460b      	mov	r3, r1
 80035a0:	70bb      	strb	r3, [r7, #2]
 80035a2:	4613      	mov	r3, r2
 80035a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	333b      	adds	r3, #59	; 0x3b
 80035b4:	78ba      	ldrb	r2, [r7, #2]
 80035b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	333f      	adds	r3, #63	; 0x3f
 80035c6:	787a      	ldrb	r2, [r7, #1]
 80035c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80035ca:	7c3b      	ldrb	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d112      	bne.n	80035f6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	3342      	adds	r3, #66	; 0x42
 80035de:	2203      	movs	r2, #3
 80035e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	333d      	adds	r3, #61	; 0x3d
 80035f0:	7f3a      	ldrb	r2, [r7, #28]
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e008      	b.n	8003608 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	3342      	adds	r3, #66	; 0x42
 8003604:	2202      	movs	r2, #2
 8003606:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b03      	cmp	r3, #3
 800360c:	f200 80c6 	bhi.w	800379c <HAL_HCD_HC_SubmitRequest+0x210>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003789 	.word	0x08003789
 8003620:	0800368d 	.word	0x0800368d
 8003624:	0800370b 	.word	0x0800370b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003628:	7c3b      	ldrb	r3, [r7, #16]
 800362a:	2b01      	cmp	r3, #1
 800362c:	f040 80b8 	bne.w	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003630:	78bb      	ldrb	r3, [r7, #2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 80b4 	bne.w	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003638:	8b3b      	ldrh	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3355      	adds	r3, #85	; 0x55
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3355      	adds	r3, #85	; 0x55
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3342      	adds	r3, #66	; 0x42
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003676:	e093      	b.n	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3342      	adds	r3, #66	; 0x42
 8003686:	2202      	movs	r2, #2
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	e089      	b.n	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800368c:	78bb      	ldrb	r3, [r7, #2]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3355      	adds	r3, #85	; 0x55
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3342      	adds	r3, #66	; 0x42
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036b8:	e073      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3342      	adds	r3, #66	; 0x42
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]
      break;
 80036cc:	e069      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3354      	adds	r3, #84	; 0x54
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3342      	adds	r3, #66	; 0x42
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
      break;
 80036f4:	e055      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	3342      	adds	r3, #66	; 0x42
 8003704:	2202      	movs	r2, #2
 8003706:	701a      	strb	r2, [r3, #0]
      break;
 8003708:	e04b      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800370a:	78bb      	ldrb	r3, [r7, #2]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11d      	bne.n	800374c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3355      	adds	r3, #85	; 0x55
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3342      	adds	r3, #66	; 0x42
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003736:	e034      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3342      	adds	r3, #66	; 0x42
 8003746:	2202      	movs	r2, #2
 8003748:	701a      	strb	r2, [r3, #0]
      break;
 800374a:	e02a      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3354      	adds	r3, #84	; 0x54
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3342      	adds	r3, #66	; 0x42
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
      break;
 8003772:	e016      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3342      	adds	r3, #66	; 0x42
 8003782:	2202      	movs	r2, #2
 8003784:	701a      	strb	r2, [r3, #0]
      break;
 8003786:	e00c      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3342      	adds	r3, #66	; 0x42
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
      break;
 800379a:	e002      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80037a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	3344      	adds	r3, #68	; 0x44
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	8b3a      	ldrh	r2, [r7, #24]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	202c      	movs	r0, #44	; 0x2c
 80037bc:	fb00 f303 	mul.w	r3, r0, r3
 80037c0:	440b      	add	r3, r1
 80037c2:	334c      	adds	r3, #76	; 0x4c
 80037c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3360      	adds	r3, #96	; 0x60
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3350      	adds	r3, #80	; 0x50
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3339      	adds	r3, #57	; 0x39
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	222c      	movs	r2, #44	; 0x2c
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	3338      	adds	r3, #56	; 0x38
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	18d1      	adds	r1, r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	f007 fe7e 	bl	800b528 <USB_HC_StartXfer>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop

08003838 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f007 fb9d 	bl	800af8e <USB_GetMode>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	f040 80ef 	bne.w	8003a3a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f007 fb81 	bl	800af68 <USB_ReadInterrupts>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80e5 	beq.w	8003a38 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f007 fb78 	bl	800af68 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003882:	d104      	bne.n	800388e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800388c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f007 fb68 	bl	800af68 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a2:	d104      	bne.n	80038ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f007 fb58 	bl	800af68 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c2:	d104      	bne.n	80038ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f007 fb48 	bl	800af68 <USB_ReadInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d103      	bne.n	80038ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2202      	movs	r2, #2
 80038e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f007 fb3a 	bl	800af68 <USB_ReadInterrupts>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fe:	d115      	bne.n	800392c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003908:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f00a fa46 	bl	800ddac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f007 fc2a 	bl	800b180 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f007 fb19 	bl	800af68 <USB_ReadInterrupts>
 8003936:	4603      	mov	r3, r0
 8003938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003940:	d102      	bne.n	8003948 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f001 f9ff 	bl	8004d46 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f007 fb0b 	bl	800af68 <USB_ReadInterrupts>
 8003952:	4603      	mov	r3, r0
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b08      	cmp	r3, #8
 800395a:	d106      	bne.n	800396a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f00a fa09 	bl	800dd74 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2208      	movs	r2, #8
 8003968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f007 fafa 	bl	800af68 <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d101      	bne.n	8003982 <HAL_HCD_IRQHandler+0x14a>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_HCD_IRQHandler+0x14c>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d012      	beq.n	80039ae <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0210 	bic.w	r2, r2, #16
 8003996:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f001 f902 	bl	8004ba2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0210 	orr.w	r2, r2, #16
 80039ac:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f007 fad8 	bl	800af68 <USB_ReadInterrupts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c2:	d13a      	bne.n	8003a3a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f007 feef 	bl	800b7ac <USB_HC_ReadInterrupt>
 80039ce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e025      	b.n	8003a22 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a00:	d106      	bne.n	8003a10 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8ab 	bl	8003b64 <HCD_HC_IN_IRQHandler>
 8003a0e:	e005      	b.n	8003a1c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fcc6 	bl	80043a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3d4      	bcc.n	80039d6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a34:	615a      	str	r2, [r3, #20]
 8003a36:	e000      	b.n	8003a3a <HAL_HCD_IRQHandler+0x202>
      return;
 8003a38:	bf00      	nop
    }
  }
}
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_HCD_Start+0x16>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e013      	b.n	8003a7e <HAL_HCD_Start+0x3e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f007 f956 	bl	800ad14 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f007 fbea 	bl	800b248 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_HCD_Stop+0x16>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e00d      	b.n	8003ab8 <HAL_HCD_Stop+0x32>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f007 ffe9 	bl	800ba80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f007 fb91 	bl	800b1f4 <USB_ResetPort>
 8003ad2:	4603      	mov	r3, r0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3360      	adds	r3, #96	; 0x60
 8003af6:	781b      	ldrb	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3350      	adds	r3, #80	; 0x50
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f007 fbd5 	bl	800b2e8 <USB_GetCurrentFrame>
 8003b3e:	4603      	mov	r3, r0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f007 fbb0 	bl	800b2ba <USB_GetHostSpeed>
 8003b5a:	4603      	mov	r3, r0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d119      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	0151      	lsls	r1, r2, #5
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	440a      	add	r2, r1
 8003bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	60d3      	str	r3, [r2, #12]
 8003bc6:	e101      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d12b      	bne.n	8003c38 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3361      	adds	r3, #97	; 0x61
 8003c02:	2207      	movs	r2, #7
 8003c04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f007 fdcc 	bl	800b7ce <USB_HC_Halt>
 8003c36:	e0c9      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d109      	bne.n	8003c62 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	e0b4      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d133      	bne.n	8003ce0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3361      	adds	r3, #97	; 0x61
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2310      	movs	r3, #16
 8003cba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2308      	movs	r3, #8
 8003ccc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f007 fd78 	bl	800b7ce <USB_HC_Halt>
 8003cde:	e075      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d134      	bne.n	8003d62 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	0151      	lsls	r1, r2, #5
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d12:	f043 0302 	orr.w	r3, r3, #2
 8003d16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	212c      	movs	r1, #44	; 0x2c
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	3361      	adds	r3, #97	; 0x61
 8003d26:	2208      	movs	r2, #8
 8003d28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	461a      	mov	r2, r3
 8003d38:	2310      	movs	r3, #16
 8003d3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f007 fd37 	bl	800b7ce <USB_HC_Halt>
 8003d60:	e034      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d129      	bne.n	8003dcc <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	0151      	lsls	r1, r2, #5
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	440a      	add	r2, r1
 8003d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3361      	adds	r3, #97	; 0x61
 8003da6:	2206      	movs	r2, #6
 8003da8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f007 fd0a 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	d122      	bne.n	8003e2a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dfe:	f043 0302 	orr.w	r3, r3, #2
 8003e02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f007 fcdd 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	461a      	mov	r2, r3
 8003e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e26:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003e28:	e2ba      	b.n	80043a0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 811b 	bne.w	8004078 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d019      	beq.n	8003e7e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3348      	adds	r3, #72	; 0x48
 8003e58:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	0159      	lsls	r1, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e6c:	1ad2      	subs	r2, r2, r3
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	202c      	movs	r0, #44	; 0x2c
 8003e74:	fb00 f303 	mul.w	r3, r0, r3
 8003e78:	440b      	add	r3, r1
 8003e7a:	3350      	adds	r3, #80	; 0x50
 8003e7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3361      	adds	r3, #97	; 0x61
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	335c      	adds	r3, #92	; 0x5c
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	212c      	movs	r1, #44	; 0x2c
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	333f      	adds	r3, #63	; 0x3f
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	333f      	adds	r3, #63	; 0x3f
 8003ed6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d121      	bne.n	8003f20 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f007 fc61 	bl	800b7ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2310      	movs	r3, #16
 8003f1c:	6093      	str	r3, [r2, #8]
 8003f1e:	e066      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	333f      	adds	r3, #63	; 0x3f
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d127      	bne.n	8003f84 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f52:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3360      	adds	r3, #96	; 0x60
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	b2d9      	uxtb	r1, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	202c      	movs	r0, #44	; 0x2c
 8003f70:	fb00 f303 	mul.w	r3, r0, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3360      	adds	r3, #96	; 0x60
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f009 ff23 	bl	800ddc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f82:	e034      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	212c      	movs	r1, #44	; 0x2c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	333f      	adds	r3, #63	; 0x3f
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d12a      	bne.n	8003fee <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	212c      	movs	r1, #44	; 0x2c
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3360      	adds	r3, #96	; 0x60
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3354      	adds	r3, #84	; 0x54
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f083 0301 	eor.w	r3, r3, #1
 8003fbe:	b2d8      	uxtb	r0, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3354      	adds	r3, #84	; 0x54
 8003fce:	4602      	mov	r2, r0
 8003fd0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	b2d9      	uxtb	r1, r3
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	202c      	movs	r0, #44	; 0x2c
 8003fdc:	fb00 f303 	mul.w	r3, r0, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3360      	adds	r3, #96	; 0x60
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f009 feed 	bl	800ddc8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d12b      	bne.n	800404e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	212c      	movs	r1, #44	; 0x2c
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	4413      	add	r3, r2
 8004002:	3348      	adds	r3, #72	; 0x48
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	202c      	movs	r0, #44	; 0x2c
 800400c:	fb00 f202 	mul.w	r2, r0, r2
 8004010:	440a      	add	r2, r1
 8004012:	3240      	adds	r2, #64	; 0x40
 8004014:	8812      	ldrh	r2, [r2, #0]
 8004016:	fbb3 f3f2 	udiv	r3, r3, r2
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 81be 	beq.w	80043a0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3354      	adds	r3, #84	; 0x54
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2d8      	uxtb	r0, r3
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3354      	adds	r3, #84	; 0x54
 8004048:	4602      	mov	r2, r0
 800404a:	701a      	strb	r2, [r3, #0]
}
 800404c:	e1a8      	b.n	80043a0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	3354      	adds	r3, #84	; 0x54
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	f083 0301 	eor.w	r3, r3, #1
 8004062:	b2d8      	uxtb	r0, r3
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	3354      	adds	r3, #84	; 0x54
 8004072:	4602      	mov	r2, r0
 8004074:	701a      	strb	r2, [r3, #0]
}
 8004076:	e193      	b.n	80043a0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	f040 8106 	bne.w	800429c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040aa:	f023 0302 	bic.w	r3, r3, #2
 80040ae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	3361      	adds	r3, #97	; 0x61
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d109      	bne.n	80040d8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	3360      	adds	r3, #96	; 0x60
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e0c9      	b.n	800426c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3361      	adds	r3, #97	; 0x61
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d109      	bne.n	8004100 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3360      	adds	r3, #96	; 0x60
 80040fa:	2205      	movs	r2, #5
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e0b5      	b.n	800426c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3361      	adds	r3, #97	; 0x61
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d009      	beq.n	8004128 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3361      	adds	r3, #97	; 0x61
 8004122:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004124:	2b08      	cmp	r3, #8
 8004126:	d150      	bne.n	80041ca <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	335c      	adds	r3, #92	; 0x5c
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	202c      	movs	r0, #44	; 0x2c
 8004140:	fb00 f303 	mul.w	r3, r0, r3
 8004144:	440b      	add	r3, r1
 8004146:	335c      	adds	r3, #92	; 0x5c
 8004148:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	335c      	adds	r3, #92	; 0x5c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d912      	bls.n	8004184 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	212c      	movs	r1, #44	; 0x2c
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	335c      	adds	r3, #92	; 0x5c
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3360      	adds	r3, #96	; 0x60
 800417e:	2204      	movs	r2, #4
 8004180:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004182:	e073      	b.n	800426c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3360      	adds	r3, #96	; 0x60
 8004192:	2202      	movs	r2, #2
 8004194:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041ac:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041b4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	461a      	mov	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041c8:	e050      	b.n	800426c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3361      	adds	r3, #97	; 0x61
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d122      	bne.n	8004224 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3360      	adds	r3, #96	; 0x60
 80041ec:	2202      	movs	r2, #2
 80041ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004206:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800420e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e023      	b.n	800426c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3361      	adds	r3, #97	; 0x61
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b07      	cmp	r3, #7
 8004236:	d119      	bne.n	800426c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	335c      	adds	r3, #92	; 0x5c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	202c      	movs	r0, #44	; 0x2c
 8004250:	fb00 f303 	mul.w	r3, r0, r3
 8004254:	440b      	add	r3, r1
 8004256:	335c      	adds	r3, #92	; 0x5c
 8004258:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3360      	adds	r3, #96	; 0x60
 8004268:	2204      	movs	r2, #4
 800426a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	461a      	mov	r2, r3
 800427a:	2302      	movs	r3, #2
 800427c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	b2d9      	uxtb	r1, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	202c      	movs	r0, #44	; 0x2c
 8004288:	fb00 f303 	mul.w	r3, r0, r3
 800428c:	4413      	add	r3, r2
 800428e:	3360      	adds	r3, #96	; 0x60
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f009 fd97 	bl	800ddc8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800429a:	e081      	b.n	80043a0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d176      	bne.n	80043a0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	333f      	adds	r3, #63	; 0x3f
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d121      	bne.n	800430a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	335c      	adds	r3, #92	; 0x5c
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	0151      	lsls	r1, r2, #5
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	440a      	add	r2, r1
 80042ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f007 fa63 	bl	800b7ce <USB_HC_Halt>
 8004308:	e041      	b.n	800438e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	333f      	adds	r3, #63	; 0x3f
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	333f      	adds	r3, #63	; 0x3f
 800432c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800432e:	2b02      	cmp	r3, #2
 8004330:	d12d      	bne.n	800438e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	335c      	adds	r3, #92	; 0x5c
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d120      	bne.n	800438e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	212c      	movs	r1, #44	; 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	3361      	adds	r3, #97	; 0x61
 800435a:	2203      	movs	r2, #3
 800435c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	440a      	add	r2, r1
 8004374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f007 fa20 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	2310      	movs	r3, #16
 800439e:	6093      	str	r3, [r2, #8]
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d119      	bne.n	800440c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	461a      	mov	r2, r3
 80043e6:	2304      	movs	r3, #4
 80043e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004404:	f043 0302 	orr.w	r3, r3, #2
 8004408:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800440a:	e3c6      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b20      	cmp	r3, #32
 8004420:	d13e      	bne.n	80044a0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	461a      	mov	r2, r3
 8004430:	2320      	movs	r3, #32
 8004432:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	333d      	adds	r3, #61	; 0x3d
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 83a8 	bne.w	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	212c      	movs	r1, #44	; 0x2c
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	4413      	add	r3, r2
 8004456:	333d      	adds	r3, #61	; 0x3d
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3360      	adds	r3, #96	; 0x60
 800446a:	2202      	movs	r2, #2
 800446c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4413      	add	r3, r2
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	0151      	lsls	r1, r2, #5
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	440a      	add	r2, r1
 8004484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	4611      	mov	r1, r2
 8004498:	4618      	mov	r0, r3
 800449a:	f007 f998 	bl	800b7ce <USB_HC_Halt>
}
 800449e:	e37c      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b6:	d122      	bne.n	80044fe <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f007 f973 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044fa:	6093      	str	r3, [r2, #8]
}
 80044fc:	e34d      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	4413      	add	r3, r2
 8004506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d150      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	212c      	movs	r1, #44	; 0x2c
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	335c      	adds	r3, #92	; 0x5c
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d111      	bne.n	8004560 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	333d      	adds	r3, #61	; 0x3d
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	461a      	mov	r2, r3
 800455c:	2340      	movs	r3, #64	; 0x40
 800455e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	440a      	add	r2, r1
 8004576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800457a:	f043 0302 	orr.w	r3, r3, #2
 800457e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f007 f91f 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	461a      	mov	r2, r3
 800459e:	2301      	movs	r3, #1
 80045a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	212c      	movs	r1, #44	; 0x2c
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	4413      	add	r3, r2
 80045ae:	3361      	adds	r3, #97	; 0x61
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
}
 80045b4:	e2f1      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d13c      	bne.n	8004646 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	212c      	movs	r1, #44	; 0x2c
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	3361      	adds	r3, #97	; 0x61
 80045da:	2204      	movs	r2, #4
 80045dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	212c      	movs	r1, #44	; 0x2c
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	333d      	adds	r3, #61	; 0x3d
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	335c      	adds	r3, #92	; 0x5c
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	440a      	add	r2, r1
 8004618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800461c:	f043 0302 	orr.w	r3, r3, #2
 8004620:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f007 f8ce 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	461a      	mov	r2, r3
 8004640:	2340      	movs	r3, #64	; 0x40
 8004642:	6093      	str	r3, [r2, #8]
}
 8004644:	e2a9      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b08      	cmp	r3, #8
 800465a:	d12a      	bne.n	80046b2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	2308      	movs	r3, #8
 800466c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	4413      	add	r3, r2
 8004676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	440a      	add	r2, r1
 8004684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f007 f898 	bl	800b7ce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	212c      	movs	r1, #44	; 0x2c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	3361      	adds	r3, #97	; 0x61
 80046ac:	2205      	movs	r2, #5
 80046ae:	701a      	strb	r2, [r3, #0]
}
 80046b0:	e273      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d150      	bne.n	800476a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	335c      	adds	r3, #92	; 0x5c
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	212c      	movs	r1, #44	; 0x2c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	3361      	adds	r3, #97	; 0x61
 80046e8:	2203      	movs	r2, #3
 80046ea:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	212c      	movs	r1, #44	; 0x2c
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	333d      	adds	r3, #61	; 0x3d
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d112      	bne.n	8004726 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	212c      	movs	r1, #44	; 0x2c
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	333c      	adds	r3, #60	; 0x3c
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d108      	bne.n	8004726 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	333d      	adds	r3, #61	; 0x3d
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	440a      	add	r2, r1
 800473c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f007 f83c 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	2310      	movs	r3, #16
 8004766:	6093      	str	r3, [r2, #8]
}
 8004768:	e217      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477c:	2b80      	cmp	r3, #128	; 0x80
 800477e:	d174      	bne.n	800486a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d121      	bne.n	80047cc <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3361      	adds	r3, #97	; 0x61
 8004796:	2206      	movs	r2, #6
 8004798:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f007 f802 	bl	800b7ce <USB_HC_Halt>
 80047ca:	e044      	b.n	8004856 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	335c      	adds	r3, #92	; 0x5c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	202c      	movs	r0, #44	; 0x2c
 80047e4:	fb00 f303 	mul.w	r3, r0, r3
 80047e8:	440b      	add	r3, r1
 80047ea:	335c      	adds	r3, #92	; 0x5c
 80047ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	335c      	adds	r3, #92	; 0x5c
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d920      	bls.n	8004844 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	212c      	movs	r1, #44	; 0x2c
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	4413      	add	r3, r2
 800480e:	335c      	adds	r3, #92	; 0x5c
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3360      	adds	r3, #96	; 0x60
 8004822:	2204      	movs	r2, #4
 8004824:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	b2d9      	uxtb	r1, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	202c      	movs	r0, #44	; 0x2c
 8004830:	fb00 f303 	mul.w	r3, r0, r3
 8004834:	4413      	add	r3, r2
 8004836:	3360      	adds	r3, #96	; 0x60
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f009 fac3 	bl	800ddc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004842:	e008      	b.n	8004856 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	3360      	adds	r3, #96	; 0x60
 8004852:	2202      	movs	r2, #2
 8004854:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	4413      	add	r3, r2
 800485e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004862:	461a      	mov	r2, r3
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	6093      	str	r3, [r2, #8]
}
 8004868:	e197      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004880:	d134      	bne.n	80048ec <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	440a      	add	r2, r1
 8004898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f006 ff8e 	bl	800b7ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	461a      	mov	r2, r3
 80048c0:	2310      	movs	r3, #16
 80048c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	461a      	mov	r2, r3
 80048d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3361      	adds	r3, #97	; 0x61
 80048e6:	2208      	movs	r2, #8
 80048e8:	701a      	strb	r2, [r3, #0]
}
 80048ea:	e156      	b.n	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b02      	cmp	r3, #2
 8004900:	f040 814b 	bne.w	8004b9a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	440a      	add	r2, r1
 800491a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491e:	f023 0302 	bic.w	r3, r3, #2
 8004922:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3361      	adds	r3, #97	; 0x61
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d179      	bne.n	8004a2c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	3360      	adds	r3, #96	; 0x60
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	212c      	movs	r1, #44	; 0x2c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	333f      	adds	r3, #63	; 0x3f
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d00a      	beq.n	8004974 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	333f      	adds	r3, #63	; 0x3f
 800496c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800496e:	2b03      	cmp	r3, #3
 8004970:	f040 80fc 	bne.w	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d142      	bne.n	8004a02 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	212c      	movs	r1, #44	; 0x2c
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	334c      	adds	r3, #76	; 0x4c
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80ed 	beq.w	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	334c      	adds	r3, #76	; 0x4c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	202c      	movs	r0, #44	; 0x2c
 80049a8:	fb00 f202 	mul.w	r2, r0, r2
 80049ac:	440a      	add	r2, r1
 80049ae:	3240      	adds	r2, #64	; 0x40
 80049b0:	8812      	ldrh	r2, [r2, #0]
 80049b2:	4413      	add	r3, r2
 80049b4:	3b01      	subs	r3, #1
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	202c      	movs	r0, #44	; 0x2c
 80049bc:	fb00 f202 	mul.w	r2, r0, r2
 80049c0:	440a      	add	r2, r1
 80049c2:	3240      	adds	r2, #64	; 0x40
 80049c4:	8812      	ldrh	r2, [r2, #0]
 80049c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80ca 	beq.w	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	3355      	adds	r3, #85	; 0x55
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f083 0301 	eor.w	r3, r3, #1
 80049ec:	b2d8      	uxtb	r0, r3
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3355      	adds	r3, #85	; 0x55
 80049fc:	4602      	mov	r2, r0
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e0b4      	b.n	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3355      	adds	r3, #85	; 0x55
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	f083 0301 	eor.w	r3, r3, #1
 8004a16:	b2d8      	uxtb	r0, r3
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	212c      	movs	r1, #44	; 0x2c
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	3355      	adds	r3, #85	; 0x55
 8004a26:	4602      	mov	r2, r0
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e09f      	b.n	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	212c      	movs	r1, #44	; 0x2c
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	3361      	adds	r3, #97	; 0x61
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d109      	bne.n	8004a54 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	212c      	movs	r1, #44	; 0x2c
 8004a46:	fb01 f303 	mul.w	r3, r1, r3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3360      	adds	r3, #96	; 0x60
 8004a4e:	2202      	movs	r2, #2
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e08b      	b.n	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	212c      	movs	r1, #44	; 0x2c
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	3361      	adds	r3, #97	; 0x61
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d109      	bne.n	8004a7c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3360      	adds	r3, #96	; 0x60
 8004a76:	2202      	movs	r2, #2
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e077      	b.n	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	3361      	adds	r3, #97	; 0x61
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d109      	bne.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	212c      	movs	r1, #44	; 0x2c
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3360      	adds	r3, #96	; 0x60
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e063      	b.n	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3361      	adds	r3, #97	; 0x61
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d009      	beq.n	8004acc <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3361      	adds	r3, #97	; 0x61
 8004ac6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d14f      	bne.n	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	335c      	adds	r3, #92	; 0x5c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	202c      	movs	r0, #44	; 0x2c
 8004ae4:	fb00 f303 	mul.w	r3, r0, r3
 8004ae8:	440b      	add	r3, r1
 8004aea:	335c      	adds	r3, #92	; 0x5c
 8004aec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	212c      	movs	r1, #44	; 0x2c
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	335c      	adds	r3, #92	; 0x5c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d912      	bls.n	8004b28 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	212c      	movs	r1, #44	; 0x2c
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	335c      	adds	r3, #92	; 0x5c
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	212c      	movs	r1, #44	; 0x2c
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	4413      	add	r3, r2
 8004b20:	3360      	adds	r3, #96	; 0x60
 8004b22:	2204      	movs	r2, #4
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	e021      	b.n	8004b6c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	212c      	movs	r1, #44	; 0x2c
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	3360      	adds	r3, #96	; 0x60
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b50:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b66:	461a      	mov	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	b2d9      	uxtb	r1, r3
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	202c      	movs	r0, #44	; 0x2c
 8004b88:	fb00 f303 	mul.w	r3, r0, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3360      	adds	r3, #96	; 0x60
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f009 f917 	bl	800ddc8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b9a:	bf00      	nop
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08a      	sub	sp, #40	; 0x28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	0c5b      	lsrs	r3, r3, #17
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bd6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d004      	beq.n	8004be8 <HCD_RXQLVL_IRQHandler+0x46>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	f000 80a9 	beq.w	8004d38 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004be6:	e0aa      	b.n	8004d3e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80a6 	beq.w	8004d3c <HCD_RXQLVL_IRQHandler+0x19a>
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3344      	adds	r3, #68	; 0x44
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 809b 	beq.w	8004d3c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3350      	adds	r3, #80	; 0x50
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	441a      	add	r2, r3
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	202c      	movs	r0, #44	; 0x2c
 8004c20:	fb00 f303 	mul.w	r3, r0, r3
 8004c24:	440b      	add	r3, r1
 8004c26:	334c      	adds	r3, #76	; 0x4c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d87a      	bhi.n	8004d24 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3344      	adds	r3, #68	; 0x44
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	b292      	uxth	r2, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	f006 f936 	bl	800aeb8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3344      	adds	r3, #68	; 0x44
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	441a      	add	r2, r3
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	202c      	movs	r0, #44	; 0x2c
 8004c66:	fb00 f303 	mul.w	r3, r0, r3
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3344      	adds	r3, #68	; 0x44
 8004c6e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	212c      	movs	r1, #44	; 0x2c
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3350      	adds	r3, #80	; 0x50
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	441a      	add	r2, r3
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	202c      	movs	r0, #44	; 0x2c
 8004c8a:	fb00 f303 	mul.w	r3, r0, r3
 8004c8e:	440b      	add	r3, r1
 8004c90:	3350      	adds	r3, #80	; 0x50
 8004c92:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	0cdb      	lsrs	r3, r3, #19
 8004ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	212c      	movs	r1, #44	; 0x2c
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3340      	adds	r3, #64	; 0x40
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d13c      	bne.n	8004d3c <HCD_RXQLVL_IRQHandler+0x19a>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d039      	beq.n	8004d3c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cde:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	3354      	adds	r3, #84	; 0x54
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f083 0301 	eor.w	r3, r3, #1
 8004d0e:	b2d8      	uxtb	r0, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	212c      	movs	r1, #44	; 0x2c
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3354      	adds	r3, #84	; 0x54
 8004d1e:	4602      	mov	r2, r0
 8004d20:	701a      	strb	r2, [r3, #0]
      break;
 8004d22:	e00b      	b.n	8004d3c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	212c      	movs	r1, #44	; 0x2c
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	3360      	adds	r3, #96	; 0x60
 8004d32:	2204      	movs	r2, #4
 8004d34:	701a      	strb	r2, [r3, #0]
      break;
 8004d36:	e001      	b.n	8004d3c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004d3c:	bf00      	nop
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3728      	adds	r7, #40	; 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d72:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d10b      	bne.n	8004d96 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d102      	bne.n	8004d8e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f009 f801 	bl	800dd90 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d132      	bne.n	8004e06 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f043 0308 	orr.w	r3, r3, #8
 8004da6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d126      	bne.n	8004e00 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d113      	bne.n	8004de2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc4:	d106      	bne.n	8004dd4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2102      	movs	r1, #2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f006 f9d7 	bl	800b180 <USB_InitFSLSPClkSel>
 8004dd2:	e011      	b.n	8004df8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f006 f9d0 	bl	800b180 <USB_InitFSLSPClkSel>
 8004de0:	e00a      	b.n	8004df8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d106      	bne.n	8004df8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df0:	461a      	mov	r2, r3
 8004df2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004df6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f008 fff3 	bl	800dde4 <HAL_HCD_PortEnabled_Callback>
 8004dfe:	e002      	b.n	8004e06 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f008 fffd 	bl	800de00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d103      	bne.n	8004e18 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f043 0320 	orr.w	r3, r3, #32
 8004e16:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6013      	str	r3, [r2, #0]
}
 8004e24:	bf00      	nop
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07f      	b.n	8004f3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fa5a 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	; 0x24
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	e006      	b.n	8004eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d104      	bne.n	8004ec6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_I2C_Init+0x11c>)
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	ea42 0103 	orr.w	r1, r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1a      	ldr	r2, [r3, #32]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	02008000 	.word	0x02008000

08004f4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	460b      	mov	r3, r1
 8004f5a:	817b      	strh	r3, [r7, #10]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	f040 80da 	bne.w	8005122 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_I2C_Master_Transmit+0x30>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e0d3      	b.n	8005124 <HAL_I2C_Master_Transmit+0x1d8>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f84:	f7fc fd3e 	bl	8001a04 <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2319      	movs	r3, #25
 8004f90:	2201      	movs	r2, #1
 8004f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f001 f8f1 	bl	800617e <I2C_WaitOnFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e0be      	b.n	8005124 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2221      	movs	r2, #33	; 0x21
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	893a      	ldrh	r2, [r7, #8]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2bff      	cmp	r3, #255	; 0xff
 8004fd6:	d90e      	bls.n	8004ff6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	22ff      	movs	r2, #255	; 0xff
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	8979      	ldrh	r1, [r7, #10]
 8004fe6:	4b51      	ldr	r3, [pc, #324]	; (800512c <HAL_I2C_Master_Transmit+0x1e0>)
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f001 fa54 	bl	800649c <I2C_TransferConfig>
 8004ff4:	e06c      	b.n	80050d0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	b2da      	uxtb	r2, r3
 8005006:	8979      	ldrh	r1, [r7, #10]
 8005008:	4b48      	ldr	r3, [pc, #288]	; (800512c <HAL_I2C_Master_Transmit+0x1e0>)
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f001 fa43 	bl	800649c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005016:	e05b      	b.n	80050d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	6a39      	ldr	r1, [r7, #32]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f001 f8ee 	bl	80061fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e07b      	b.n	8005124 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	781a      	ldrb	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d034      	beq.n	80050d0 <HAL_I2C_Master_Transmit+0x184>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d130      	bne.n	80050d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	2200      	movs	r2, #0
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f001 f880 	bl	800617e <I2C_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e04d      	b.n	8005124 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	2bff      	cmp	r3, #255	; 0xff
 8005090:	d90e      	bls.n	80050b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	22ff      	movs	r2, #255	; 0xff
 8005096:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	b2da      	uxtb	r2, r3
 800509e:	8979      	ldrh	r1, [r7, #10]
 80050a0:	2300      	movs	r3, #0
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f001 f9f7 	bl	800649c <I2C_TransferConfig>
 80050ae:	e00f      	b.n	80050d0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	8979      	ldrh	r1, [r7, #10]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f001 f9e6 	bl	800649c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d19e      	bne.n	8005018 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	6a39      	ldr	r1, [r7, #32]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f001 f8cd 	bl	800627e <I2C_WaitOnSTOPFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e01a      	b.n	8005124 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2220      	movs	r2, #32
 80050f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_I2C_Master_Transmit+0x1e4>)
 8005102:	400b      	ands	r3, r1
 8005104:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e000      	b.n	8005124 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
  }
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	80002000 	.word	0x80002000
 8005130:	fe00e800 	.word	0xfe00e800

08005134 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	461a      	mov	r2, r3
 8005140:	460b      	mov	r3, r1
 8005142:	817b      	strh	r3, [r7, #10]
 8005144:	4613      	mov	r3, r2
 8005146:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	f040 80db 	bne.w	800530c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_I2C_Master_Receive+0x30>
 8005160:	2302      	movs	r3, #2
 8005162:	e0d4      	b.n	800530e <HAL_I2C_Master_Receive+0x1da>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800516c:	f7fc fc4a 	bl	8001a04 <HAL_GetTick>
 8005170:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2319      	movs	r3, #25
 8005178:	2201      	movs	r2, #1
 800517a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fffd 	bl	800617e <I2C_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0bf      	b.n	800530e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2222      	movs	r2, #34	; 0x22
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2210      	movs	r2, #16
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	893a      	ldrh	r2, [r7, #8]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2bff      	cmp	r3, #255	; 0xff
 80051be:	d90e      	bls.n	80051de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	22ff      	movs	r2, #255	; 0xff
 80051c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	8979      	ldrh	r1, [r7, #10]
 80051ce:	4b52      	ldr	r3, [pc, #328]	; (8005318 <HAL_I2C_Master_Receive+0x1e4>)
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f001 f960 	bl	800649c <I2C_TransferConfig>
 80051dc:	e06d      	b.n	80052ba <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	8979      	ldrh	r1, [r7, #10]
 80051f0:	4b49      	ldr	r3, [pc, #292]	; (8005318 <HAL_I2C_Master_Receive+0x1e4>)
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f001 f94f 	bl	800649c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80051fe:	e05c      	b.n	80052ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	6a39      	ldr	r1, [r7, #32]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f001 f877 	bl	80062f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e07c      	b.n	800530e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d034      	beq.n	80052ba <HAL_I2C_Master_Receive+0x186>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	2b00      	cmp	r3, #0
 8005256:	d130      	bne.n	80052ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2200      	movs	r2, #0
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 ff8b 	bl	800617e <I2C_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e04d      	b.n	800530e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	2bff      	cmp	r3, #255	; 0xff
 800527a:	d90e      	bls.n	800529a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	22ff      	movs	r2, #255	; 0xff
 8005280:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	b2da      	uxtb	r2, r3
 8005288:	8979      	ldrh	r1, [r7, #10]
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f001 f902 	bl	800649c <I2C_TransferConfig>
 8005298:	e00f      	b.n	80052ba <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	8979      	ldrh	r1, [r7, #10]
 80052ac:	2300      	movs	r3, #0
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f001 f8f1 	bl	800649c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d19d      	bne.n	8005200 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	6a39      	ldr	r1, [r7, #32]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 ffd8 	bl	800627e <I2C_WaitOnSTOPFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e01a      	b.n	800530e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2220      	movs	r2, #32
 80052de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b0c      	ldr	r3, [pc, #48]	; (800531c <HAL_I2C_Master_Receive+0x1e8>)
 80052ec:	400b      	ands	r3, r1
 80052ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	80002400 	.word	0x80002400
 800531c:	fe00e800 	.word	0xfe00e800

08005320 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	; 0x28
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	460b      	mov	r3, r1
 800532e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b20      	cmp	r3, #32
 800533e:	f040 80ef 	bne.w	8005520 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800534c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005350:	d101      	bne.n	8005356 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
 8005354:	e0e5      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_I2C_IsDeviceReady+0x44>
 8005360:	2302      	movs	r3, #2
 8005362:	e0de      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d105      	bne.n	800538e <HAL_I2C_IsDeviceReady+0x6e>
 8005382:	897b      	ldrh	r3, [r7, #10]
 8005384:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005388:	4b68      	ldr	r3, [pc, #416]	; (800552c <HAL_I2C_IsDeviceReady+0x20c>)
 800538a:	4313      	orrs	r3, r2
 800538c:	e004      	b.n	8005398 <HAL_I2C_IsDeviceReady+0x78>
 800538e:	897b      	ldrh	r3, [r7, #10]
 8005390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005394:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800539e:	f7fc fb31 	bl	8001a04 <HAL_GetTick>
 80053a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80053d0:	e034      	b.n	800543c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d01a      	beq.n	8005410 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fc fb13 	bl	8001a04 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <HAL_I2C_IsDeviceReady+0xd0>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e088      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b10      	cmp	r3, #16
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800543c:	7ffb      	ldrb	r3, [r7, #31]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <HAL_I2C_IsDeviceReady+0x128>
 8005442:	7fbb      	ldrb	r3, [r7, #30]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0c4      	beq.n	80053d2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b10      	cmp	r3, #16
 8005454:	d01a      	beq.n	800548c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2200      	movs	r2, #0
 800545e:	2120      	movs	r1, #32
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fe8c 	bl	800617e <I2C_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e058      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2220      	movs	r2, #32
 8005476:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	e04a      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	2120      	movs	r1, #32
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fe71 	bl	800617e <I2C_WaitOnFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e03d      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2210      	movs	r2, #16
 80054ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2220      	movs	r2, #32
 80054b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d118      	bne.n	80054f0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2120      	movs	r1, #32
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fe50 	bl	800617e <I2C_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e01c      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2220      	movs	r2, #32
 80054ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	f63f af3d 	bhi.w	800537a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	02002000 	.word	0x02002000

08005530 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
  }
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d010      	beq.n	80055aa <HAL_I2C_ER_IRQHandler+0x46>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	09db      	lsrs	r3, r3, #7
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	f043 0201 	orr.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	0a9b      	lsrs	r3, r3, #10
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <HAL_I2C_ER_IRQHandler+0x74>
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c6:	f043 0208 	orr.w	r2, r3, #8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	0a5b      	lsrs	r3, r3, #9
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d010      	beq.n	8005606 <HAL_I2C_ER_IRQHandler+0xa2>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	09db      	lsrs	r3, r3, #7
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	f043 0202 	orr.w	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005604:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 030b 	and.w	r3, r3, #11
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fc77 	bl	8005f0c <I2C_ITError>
  }
}
 800561e:	bf00      	nop
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
 800565a:	4613      	mov	r3, r2
 800565c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <I2C_Slave_ISR_IT+0x24>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e0ec      	b.n	80058a4 <I2C_Slave_ISR_IT+0x1fe>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <I2C_Slave_ISR_IT+0x4c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80056ea:	6939      	ldr	r1, [r7, #16]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f9bf 	bl	8005a70 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d04d      	beq.n	800579a <I2C_Slave_ISR_IT+0xf4>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d047      	beq.n	800579a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d128      	bne.n	8005766 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b28      	cmp	r3, #40	; 0x28
 800571e:	d108      	bne.n	8005732 <I2C_Slave_ISR_IT+0x8c>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005726:	d104      	bne.n	8005732 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005728:	6939      	ldr	r1, [r7, #16]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fb98 	bl	8005e60 <I2C_ITListenCplt>
 8005730:	e032      	b.n	8005798 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b29      	cmp	r3, #41	; 0x29
 800573c:	d10e      	bne.n	800575c <I2C_Slave_ISR_IT+0xb6>
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005744:	d00a      	beq.n	800575c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2210      	movs	r2, #16
 800574c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fcd3 	bl	80060fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f92d 	bl	80059b4 <I2C_ITSlaveSeqCplt>
 800575a:	e01d      	b.n	8005798 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2210      	movs	r2, #16
 8005762:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005764:	e096      	b.n	8005894 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f043 0204 	orr.w	r2, r3, #4
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <I2C_Slave_ISR_IT+0xe4>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005786:	f040 8085 	bne.w	8005894 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	4619      	mov	r1, r3
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fbbb 	bl	8005f0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005796:	e07d      	b.n	8005894 <I2C_Slave_ISR_IT+0x1ee>
 8005798:	e07c      	b.n	8005894 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d030      	beq.n	8005808 <I2C_Slave_ISR_IT+0x162>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d02a      	beq.n	8005808 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d018      	beq.n	80057ee <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d14f      	bne.n	8005898 <I2C_Slave_ISR_IT+0x1f2>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057fe:	d04b      	beq.n	8005898 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f8d7 	bl	80059b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005806:	e047      	b.n	8005898 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	08db      	lsrs	r3, r3, #3
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005820:	6939      	ldr	r1, [r7, #16]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f842 	bl	80058ac <I2C_ITAddrCplt>
 8005828:	e037      	b.n	800589a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d031      	beq.n	800589a <I2C_Slave_ISR_IT+0x1f4>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d02b      	beq.n	800589a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d018      	beq.n	800587e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	851a      	strh	r2, [r3, #40]	; 0x28
 800587c:	e00d      	b.n	800589a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005884:	d002      	beq.n	800588c <I2C_Slave_ISR_IT+0x1e6>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f891 	bl	80059b4 <I2C_ITSlaveSeqCplt>
 8005892:	e002      	b.n	800589a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005898:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058c2:	2b28      	cmp	r3, #40	; 0x28
 80058c4:	d16a      	bne.n	800599c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	0c1b      	lsrs	r3, r3, #16
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80058e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005900:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d138      	bne.n	800597c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	09db      	lsrs	r3, r3, #7
 800590e:	b29a      	uxth	r2, r3
 8005910:	89bb      	ldrh	r3, [r7, #12]
 8005912:	4053      	eors	r3, r2
 8005914:	b29b      	uxth	r3, r3
 8005916:	f003 0306 	and.w	r3, r3, #6
 800591a:	2b00      	cmp	r3, #0
 800591c:	d11c      	bne.n	8005958 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005930:	2b02      	cmp	r3, #2
 8005932:	d13b      	bne.n	80059ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2208      	movs	r2, #8
 8005940:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800594a:	89ba      	ldrh	r2, [r7, #12]
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fe7c 	bl	800564e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005956:	e029      	b.n	80059ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005958:	893b      	ldrh	r3, [r7, #8]
 800595a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800595c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fdc9 	bl	80064f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800596e:	89ba      	ldrh	r2, [r7, #12]
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff fe6a 	bl	800564e <HAL_I2C_AddrCallback>
}
 800597a:	e017      	b.n	80059ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800597c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fdb9 	bl	80064f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800598e:	89ba      	ldrh	r2, [r7, #12]
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff fe5a 	bl	800564e <HAL_I2C_AddrCallback>
}
 800599a:	e007      	b.n	80059ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2208      	movs	r2, #8
 80059a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	0b9b      	lsrs	r3, r3, #14
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e00d      	b.n	8005a06 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	0bdb      	lsrs	r3, r3, #15
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b29      	cmp	r3, #41	; 0x29
 8005a10:	d112      	bne.n	8005a38 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2228      	movs	r2, #40	; 0x28
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2221      	movs	r2, #33	; 0x21
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a20:	2101      	movs	r1, #1
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fd68 	bl	80064f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fdf8 	bl	8005626 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a36:	e017      	b.n	8005a68 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b2a      	cmp	r3, #42	; 0x2a
 8005a42:	d111      	bne.n	8005a68 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2228      	movs	r2, #40	; 0x28
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2222      	movs	r2, #34	; 0x22
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a52:	2102      	movs	r1, #2
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fd4f 	bl	80064f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fde9 	bl	800563a <HAL_I2C_SlaveRxCpltCallback>
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2220      	movs	r2, #32
 8005a94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	2b21      	cmp	r3, #33	; 0x21
 8005a9a:	d002      	beq.n	8005aa2 <I2C_ITSlaveCplt+0x32>
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b29      	cmp	r3, #41	; 0x29
 8005aa0:	d108      	bne.n	8005ab4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005aa2:	f248 0101 	movw	r1, #32769	; 0x8001
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fd26 	bl	80064f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2221      	movs	r2, #33	; 0x21
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ab2:	e00d      	b.n	8005ad0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b22      	cmp	r3, #34	; 0x22
 8005ab8:	d002      	beq.n	8005ac0 <I2C_ITSlaveCplt+0x50>
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b2a      	cmp	r3, #42	; 0x2a
 8005abe:	d107      	bne.n	8005ad0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005ac0:	f248 0102 	movw	r1, #32770	; 0x8002
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fd17 	bl	80064f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2222      	movs	r2, #34	; 0x22
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ade:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b80      	ldr	r3, [pc, #512]	; (8005cec <I2C_ITSlaveCplt+0x27c>)
 8005aec:	400b      	ands	r3, r1
 8005aee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fb02 	bl	80060fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	0b9b      	lsrs	r3, r3, #14
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d07a      	beq.n	8005bf8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b10:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8111 	beq.w	8005d3e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a73      	ldr	r2, [pc, #460]	; (8005cf0 <I2C_ITSlaveCplt+0x280>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d059      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a71      	ldr	r2, [pc, #452]	; (8005cf4 <I2C_ITSlaveCplt+0x284>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d053      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a6f      	ldr	r2, [pc, #444]	; (8005cf8 <I2C_ITSlaveCplt+0x288>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d04d      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6d      	ldr	r2, [pc, #436]	; (8005cfc <I2C_ITSlaveCplt+0x28c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d047      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6b      	ldr	r2, [pc, #428]	; (8005d00 <I2C_ITSlaveCplt+0x290>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d041      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a69      	ldr	r2, [pc, #420]	; (8005d04 <I2C_ITSlaveCplt+0x294>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d03b      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a67      	ldr	r2, [pc, #412]	; (8005d08 <I2C_ITSlaveCplt+0x298>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d035      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a65      	ldr	r2, [pc, #404]	; (8005d0c <I2C_ITSlaveCplt+0x29c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d02f      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a63      	ldr	r2, [pc, #396]	; (8005d10 <I2C_ITSlaveCplt+0x2a0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d029      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a61      	ldr	r2, [pc, #388]	; (8005d14 <I2C_ITSlaveCplt+0x2a4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d023      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a5f      	ldr	r2, [pc, #380]	; (8005d18 <I2C_ITSlaveCplt+0x2a8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01d      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a5d      	ldr	r2, [pc, #372]	; (8005d1c <I2C_ITSlaveCplt+0x2ac>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d017      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5b      	ldr	r2, [pc, #364]	; (8005d20 <I2C_ITSlaveCplt+0x2b0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d011      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a59      	ldr	r2, [pc, #356]	; (8005d24 <I2C_ITSlaveCplt+0x2b4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a57      	ldr	r2, [pc, #348]	; (8005d28 <I2C_ITSlaveCplt+0x2b8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d005      	beq.n	8005bdc <I2C_ITSlaveCplt+0x16c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a55      	ldr	r2, [pc, #340]	; (8005d2c <I2C_ITSlaveCplt+0x2bc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d105      	bne.n	8005be8 <I2C_ITSlaveCplt+0x178>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	e004      	b.n	8005bf2 <I2C_ITSlaveCplt+0x182>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	8553      	strh	r3, [r2, #42]	; 0x2a
 8005bf6:	e0a2      	b.n	8005d3e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	0bdb      	lsrs	r3, r3, #15
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 809c 	beq.w	8005d3e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 808f 	beq.w	8005d3e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a32      	ldr	r2, [pc, #200]	; (8005cf0 <I2C_ITSlaveCplt+0x280>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d059      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a30      	ldr	r2, [pc, #192]	; (8005cf4 <I2C_ITSlaveCplt+0x284>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d053      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2e      	ldr	r2, [pc, #184]	; (8005cf8 <I2C_ITSlaveCplt+0x288>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d04d      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <I2C_ITSlaveCplt+0x28c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d047      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <I2C_ITSlaveCplt+0x290>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d041      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a28      	ldr	r2, [pc, #160]	; (8005d04 <I2C_ITSlaveCplt+0x294>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d03b      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <I2C_ITSlaveCplt+0x298>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d035      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a24      	ldr	r2, [pc, #144]	; (8005d0c <I2C_ITSlaveCplt+0x29c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d02f      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a22      	ldr	r2, [pc, #136]	; (8005d10 <I2C_ITSlaveCplt+0x2a0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d029      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a20      	ldr	r2, [pc, #128]	; (8005d14 <I2C_ITSlaveCplt+0x2a4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d023      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <I2C_ITSlaveCplt+0x2a8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d01d      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <I2C_ITSlaveCplt+0x2ac>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d017      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <I2C_ITSlaveCplt+0x2b0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d011      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <I2C_ITSlaveCplt+0x2b4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <I2C_ITSlaveCplt+0x2b8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d005      	beq.n	8005ce0 <I2C_ITSlaveCplt+0x270>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <I2C_ITSlaveCplt+0x2bc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d127      	bne.n	8005d30 <I2C_ITSlaveCplt+0x2c0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	e026      	b.n	8005d3a <I2C_ITSlaveCplt+0x2ca>
 8005cec:	fe00e800 	.word	0xfe00e800
 8005cf0:	40020010 	.word	0x40020010
 8005cf4:	40020028 	.word	0x40020028
 8005cf8:	40020040 	.word	0x40020040
 8005cfc:	40020058 	.word	0x40020058
 8005d00:	40020070 	.word	0x40020070
 8005d04:	40020088 	.word	0x40020088
 8005d08:	400200a0 	.word	0x400200a0
 8005d0c:	400200b8 	.word	0x400200b8
 8005d10:	40020410 	.word	0x40020410
 8005d14:	40020428 	.word	0x40020428
 8005d18:	40020440 	.word	0x40020440
 8005d1c:	40020458 	.word	0x40020458
 8005d20:	40020470 	.word	0x40020470
 8005d24:	40020488 	.word	0x40020488
 8005d28:	400204a0 	.word	0x400204a0
 8005d2c:	400204b8 	.word	0x400204b8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	089b      	lsrs	r3, r3, #2
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d020      	beq.n	8005d8c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f023 0304 	bic.w	r3, r3, #4
 8005d50:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	f043 0204 	orr.w	r2, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d010      	beq.n	8005dda <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f8a4 	bl	8005f0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b28      	cmp	r3, #40	; 0x28
 8005dce:	d141      	bne.n	8005e54 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f844 	bl	8005e60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005dd8:	e03c      	b.n	8005e54 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005de2:	d014      	beq.n	8005e0e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fde5 	bl	80059b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1b      	ldr	r2, [pc, #108]	; (8005e5c <I2C_ITSlaveCplt+0x3ec>)
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff fc2f 	bl	800566a <HAL_I2C_ListenCpltCallback>
}
 8005e0c:	e022      	b.n	8005e54 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b22      	cmp	r3, #34	; 0x22
 8005e18:	d10e      	bne.n	8005e38 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fc02 	bl	800563a <HAL_I2C_SlaveRxCpltCallback>
}
 8005e36:	e00d      	b.n	8005e54 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fbe9 	bl	8005626 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e54:	bf00      	nop
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	ffff0000 	.word	0xffff0000

08005e60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a26      	ldr	r2, [pc, #152]	; (8005f08 <I2C_ITListenCplt+0xa8>)
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	089b      	lsrs	r3, r3, #2
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d022      	beq.n	8005ede <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d012      	beq.n	8005ede <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	f043 0204 	orr.w	r2, r3, #4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ede:	f248 0103 	movw	r1, #32771	; 0x8003
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fb08 	bl	80064f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2210      	movs	r2, #16
 8005eee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fbb6 	bl	800566a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	ffff0000 	.word	0xffff0000

08005f0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a5d      	ldr	r2, [pc, #372]	; (80060a0 <I2C_ITError+0x194>)
 8005f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b28      	cmp	r3, #40	; 0x28
 8005f42:	d005      	beq.n	8005f50 <I2C_ITError+0x44>
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b29      	cmp	r3, #41	; 0x29
 8005f48:	d002      	beq.n	8005f50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4e:	d10b      	bne.n	8005f68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f50:	2103      	movs	r1, #3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fad0 	bl	80064f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2228      	movs	r2, #40	; 0x28
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a50      	ldr	r2, [pc, #320]	; (80060a4 <I2C_ITError+0x198>)
 8005f64:	635a      	str	r2, [r3, #52]	; 0x34
 8005f66:	e011      	b.n	8005f8c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f68:	f248 0103 	movw	r1, #32771	; 0x8003
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fac3 	bl	80064f8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b60      	cmp	r3, #96	; 0x60
 8005f7c:	d003      	beq.n	8005f86 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d039      	beq.n	800600e <I2C_ITError+0x102>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b11      	cmp	r3, #17
 8005f9e:	d002      	beq.n	8005fa6 <I2C_ITError+0x9a>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b21      	cmp	r3, #33	; 0x21
 8005fa4:	d133      	bne.n	800600e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb4:	d107      	bne.n	8005fc6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fc fbdc 	bl	8002788 <HAL_DMA_GetState>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d017      	beq.n	8006006 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	4a33      	ldr	r2, [pc, #204]	; (80060a8 <I2C_ITError+0x19c>)
 8005fdc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fc f988 	bl	8002300 <HAL_DMA_Abort_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d04d      	beq.n	8006092 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006000:	4610      	mov	r0, r2
 8006002:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006004:	e045      	b.n	8006092 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f850 	bl	80060ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800600c:	e041      	b.n	8006092 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d039      	beq.n	800608a <I2C_ITError+0x17e>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b12      	cmp	r3, #18
 800601a:	d002      	beq.n	8006022 <I2C_ITError+0x116>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b22      	cmp	r3, #34	; 0x22
 8006020:	d133      	bne.n	800608a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006030:	d107      	bne.n	8006042 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006040:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	4618      	mov	r0, r3
 8006048:	f7fc fb9e 	bl	8002788 <HAL_DMA_GetState>
 800604c:	4603      	mov	r3, r0
 800604e:	2b01      	cmp	r3, #1
 8006050:	d017      	beq.n	8006082 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <I2C_ITError+0x19c>)
 8006058:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc f94a 	bl	8002300 <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d011      	beq.n	8006096 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006080:	e009      	b.n	8006096 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f812 	bl	80060ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006088:	e005      	b.n	8006096 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f80e 	bl	80060ac <I2C_TreatErrorCallback>
  }
}
 8006090:	e002      	b.n	8006098 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006096:	bf00      	nop
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	ffff0000 	.word	0xffff0000
 80060a4:	080056a7 	.word	0x080056a7
 80060a8:	08006143 	.word	0x08006143

080060ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b60      	cmp	r3, #96	; 0x60
 80060be:	d10e      	bne.n	80060de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fadb 	bl	8005692 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060dc:	e009      	b.n	80060f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fac6 	bl	800567e <HAL_I2C_ErrorCallback>
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d103      	bne.n	8006118 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2200      	movs	r2, #0
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b01      	cmp	r3, #1
 8006124:	d007      	beq.n	8006136 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699a      	ldr	r2, [r3, #24]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	619a      	str	r2, [r3, #24]
  }
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	2200      	movs	r2, #0
 800615e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616c:	2200      	movs	r2, #0
 800616e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff ff9b 	bl	80060ac <I2C_TreatErrorCallback>
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	603b      	str	r3, [r7, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800618e:	e022      	b.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d01e      	beq.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006198:	f7fb fc34 	bl	8001a04 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d302      	bcc.n	80061ae <I2C_WaitOnFlagUntilTimeout+0x30>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d113      	bne.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e00f      	b.n	80061f6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d0cd      	beq.n	8006190 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800620a:	e02c      	b.n	8006266 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f8dd 	bl	80063d0 <I2C_IsAcknowledgeFailed>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e02a      	b.n	8006276 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d01e      	beq.n	8006266 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006228:	f7fb fbec 	bl	8001a04 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d113      	bne.n	8006266 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e007      	b.n	8006276 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b02      	cmp	r3, #2
 8006272:	d1cb      	bne.n	800620c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800628a:	e028      	b.n	80062de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f89d 	bl	80063d0 <I2C_IsAcknowledgeFailed>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e026      	b.n	80062ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a0:	f7fb fbb0 	bl	8001a04 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d302      	bcc.n	80062b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d113      	bne.n	80062de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	f043 0220 	orr.w	r2, r3, #32
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e007      	b.n	80062ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d1cf      	bne.n	800628c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006304:	e055      	b.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f860 	bl	80063d0 <I2C_IsAcknowledgeFailed>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e053      	b.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b20      	cmp	r3, #32
 8006326:	d129      	bne.n	800637c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b04      	cmp	r3, #4
 8006334:	d105      	bne.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e03f      	b.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2220      	movs	r2, #32
 8006348:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6859      	ldr	r1, [r3, #4]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006356:	400b      	ands	r3, r1
 8006358:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e022      	b.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637c:	f7fb fb42 	bl	8001a04 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10f      	bne.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	f043 0220 	orr.w	r2, r3, #32
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e007      	b.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d1a2      	bne.n	8006306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	fe00e800 	.word	0xfe00e800

080063d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b10      	cmp	r3, #16
 80063e8:	d151      	bne.n	800648e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ea:	e022      	b.n	8006432 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d01e      	beq.n	8006432 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f4:	f7fb fb06 	bl	8001a04 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <I2C_IsAcknowledgeFailed+0x3a>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d113      	bne.n	8006432 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640e:	f043 0220 	orr.w	r2, r3, #32
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e02e      	b.n	8006490 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b20      	cmp	r3, #32
 800643e:	d1d5      	bne.n	80063ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2210      	movs	r2, #16
 8006446:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2220      	movs	r2, #32
 800644e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff fe52 	bl	80060fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6859      	ldr	r1, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <I2C_IsAcknowledgeFailed+0xc8>)
 8006462:	400b      	ands	r3, r1
 8006464:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	f043 0204 	orr.w	r2, r3, #4
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	fe00e800 	.word	0xfe00e800

0800649c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	460b      	mov	r3, r1
 80064a8:	817b      	strh	r3, [r7, #10]
 80064aa:	4613      	mov	r3, r2
 80064ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	0d5b      	lsrs	r3, r3, #21
 80064b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <I2C_TransferConfig+0x58>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	43db      	mvns	r3, r3
 80064c2:	ea02 0103 	and.w	r1, r2, r3
 80064c6:	897b      	ldrh	r3, [r7, #10]
 80064c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064cc:	7a7b      	ldrb	r3, [r7, #9]
 80064ce:	041b      	lsls	r3, r3, #16
 80064d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	431a      	orrs	r2, r3
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	431a      	orrs	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80064e6:	bf00      	nop
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	03ff63ff 	.word	0x03ff63ff

080064f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006508:	887b      	ldrh	r3, [r7, #2]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00f      	beq.n	8006532 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006518:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006526:	2b28      	cmp	r3, #40	; 0x28
 8006528:	d003      	beq.n	8006532 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006530:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006532:	887b      	ldrh	r3, [r7, #2]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00f      	beq.n	800655c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006542:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006550:	2b28      	cmp	r3, #40	; 0x28
 8006552:	d003      	beq.n	800655c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800655a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800655c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	da03      	bge.n	800656c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800656a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	2b10      	cmp	r3, #16
 8006570:	d103      	bne.n	800657a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800657a:	887b      	ldrh	r3, [r7, #2]
 800657c:	2b20      	cmp	r3, #32
 800657e:	d103      	bne.n	8006588 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f043 0320 	orr.w	r3, r3, #32
 8006586:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006588:	887b      	ldrh	r3, [r7, #2]
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d103      	bne.n	8006596 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006594:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6819      	ldr	r1, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	43da      	mvns	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	400a      	ands	r2, r1
 80065a6:	601a      	str	r2, [r3, #0]
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d138      	bne.n	800663c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e032      	b.n	800663e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2224      	movs	r2, #36	; 0x24
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6819      	ldr	r1, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	e000      	b.n	800663e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800663c:	2302      	movs	r3, #2
  }
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b20      	cmp	r3, #32
 800665e:	d139      	bne.n	80066d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800666a:	2302      	movs	r3, #2
 800666c:	e033      	b.n	80066d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2224      	movs	r2, #36	; 0x24
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800669c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0201 	orr.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	e000      	b.n	80066d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066d4:	2302      	movs	r3, #2
  }
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_PWREx_ConfigSupply+0x70>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d00a      	beq.n	800670e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066f8:	4b16      	ldr	r3, [pc, #88]	; (8006754 <HAL_PWREx_ConfigSupply+0x70>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d001      	beq.n	800670a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e01f      	b.n	800674a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e01d      	b.n	800674a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800670e:	4b11      	ldr	r3, [pc, #68]	; (8006754 <HAL_PWREx_ConfigSupply+0x70>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f023 0207 	bic.w	r2, r3, #7
 8006716:	490f      	ldr	r1, [pc, #60]	; (8006754 <HAL_PWREx_ConfigSupply+0x70>)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4313      	orrs	r3, r2
 800671c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800671e:	f7fb f971 	bl	8001a04 <HAL_GetTick>
 8006722:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006724:	e009      	b.n	800673a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006726:	f7fb f96d 	bl	8001a04 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006734:	d901      	bls.n	800673a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e007      	b.n	800674a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <HAL_PWREx_ConfigSupply+0x70>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006746:	d1ee      	bne.n	8006726 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	58024800 	.word	0x58024800

08006758 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006766:	60d3      	str	r3, [r2, #12]
}
 8006768:	bf00      	nop
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	58024800 	.word	0x58024800

08006778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08c      	sub	sp, #48	; 0x30
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e3ff      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8087 	beq.w	80068a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006798:	4b99      	ldr	r3, [pc, #612]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067a2:	4b97      	ldr	r3, [pc, #604]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d007      	beq.n	80067be <HAL_RCC_OscConfig+0x46>
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b0:	2b18      	cmp	r3, #24
 80067b2:	d110      	bne.n	80067d6 <HAL_RCC_OscConfig+0x5e>
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d10b      	bne.n	80067d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067be:	4b90      	ldr	r3, [pc, #576]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d06c      	beq.n	80068a4 <HAL_RCC_OscConfig+0x12c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d168      	bne.n	80068a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e3d9      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067de:	d106      	bne.n	80067ee <HAL_RCC_OscConfig+0x76>
 80067e0:	4b87      	ldr	r3, [pc, #540]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a86      	ldr	r2, [pc, #536]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e02e      	b.n	800684c <HAL_RCC_OscConfig+0xd4>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10c      	bne.n	8006810 <HAL_RCC_OscConfig+0x98>
 80067f6:	4b82      	ldr	r3, [pc, #520]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a81      	ldr	r2, [pc, #516]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80067fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	4b7f      	ldr	r3, [pc, #508]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a7e      	ldr	r2, [pc, #504]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	e01d      	b.n	800684c <HAL_RCC_OscConfig+0xd4>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006818:	d10c      	bne.n	8006834 <HAL_RCC_OscConfig+0xbc>
 800681a:	4b79      	ldr	r3, [pc, #484]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a78      	ldr	r2, [pc, #480]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	4b76      	ldr	r3, [pc, #472]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a75      	ldr	r2, [pc, #468]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800682c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e00b      	b.n	800684c <HAL_RCC_OscConfig+0xd4>
 8006834:	4b72      	ldr	r3, [pc, #456]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a71      	ldr	r2, [pc, #452]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800683a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	4b6f      	ldr	r3, [pc, #444]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a6e      	ldr	r2, [pc, #440]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d013      	beq.n	800687c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fb f8d6 	bl	8001a04 <HAL_GetTick>
 8006858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800685c:	f7fb f8d2 	bl	8001a04 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b64      	cmp	r3, #100	; 0x64
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e38d      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800686e:	4b64      	ldr	r3, [pc, #400]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0xe4>
 800687a:	e014      	b.n	80068a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687c:	f7fb f8c2 	bl	8001a04 <HAL_GetTick>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006884:	f7fb f8be 	bl	8001a04 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b64      	cmp	r3, #100	; 0x64
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e379      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006896:	4b5a      	ldr	r3, [pc, #360]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <HAL_RCC_OscConfig+0x10c>
 80068a2:	e000      	b.n	80068a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80ae 	beq.w	8006a10 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b4:	4b52      	ldr	r3, [pc, #328]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068be:	4b50      	ldr	r3, [pc, #320]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <HAL_RCC_OscConfig+0x162>
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2b18      	cmp	r3, #24
 80068ce:	d13a      	bne.n	8006946 <HAL_RCC_OscConfig+0x1ce>
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d135      	bne.n	8006946 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068da:	4b49      	ldr	r3, [pc, #292]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_RCC_OscConfig+0x17a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e34b      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f2:	f7fb f8b7 	bl	8001a64 <HAL_GetREVID>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d817      	bhi.n	8006930 <HAL_RCC_OscConfig+0x1b8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d108      	bne.n	800691a <HAL_RCC_OscConfig+0x1a2>
 8006908:	4b3d      	ldr	r3, [pc, #244]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006910:	4a3b      	ldr	r2, [pc, #236]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006916:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006918:	e07a      	b.n	8006a10 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691a:	4b39      	ldr	r3, [pc, #228]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	031b      	lsls	r3, r3, #12
 8006928:	4935      	ldr	r1, [pc, #212]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800692e:	e06f      	b.n	8006a10 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006930:	4b33      	ldr	r3, [pc, #204]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	061b      	lsls	r3, r3, #24
 800693e:	4930      	ldr	r1, [pc, #192]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006940:	4313      	orrs	r3, r2
 8006942:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006944:	e064      	b.n	8006a10 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d045      	beq.n	80069da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800694e:	4b2c      	ldr	r3, [pc, #176]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 0219 	bic.w	r2, r3, #25
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	4929      	ldr	r1, [pc, #164]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fb f850 	bl	8001a04 <HAL_GetTick>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006968:	f7fb f84c 	bl	8001a04 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e307      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800697a:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006986:	f7fb f86d 	bl	8001a64 <HAL_GetREVID>
 800698a:	4603      	mov	r3, r0
 800698c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006990:	4293      	cmp	r3, r2
 8006992:	d817      	bhi.n	80069c4 <HAL_RCC_OscConfig+0x24c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d108      	bne.n	80069ae <HAL_RCC_OscConfig+0x236>
 800699c:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069a4:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069aa:	6053      	str	r3, [r2, #4]
 80069ac:	e030      	b.n	8006a10 <HAL_RCC_OscConfig+0x298>
 80069ae:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	031b      	lsls	r3, r3, #12
 80069bc:	4910      	ldr	r1, [pc, #64]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
 80069c2:	e025      	b.n	8006a10 <HAL_RCC_OscConfig+0x298>
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	490b      	ldr	r1, [pc, #44]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]
 80069d8:	e01a      	b.n	8006a10 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069da:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <HAL_RCC_OscConfig+0x288>)
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e6:	f7fb f80d 	bl	8001a04 <HAL_GetTick>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069ec:	e00a      	b.n	8006a04 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ee:	f7fb f809 	bl	8001a04 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d903      	bls.n	8006a04 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e2c4      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
 8006a00:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a04:	4ba4      	ldr	r3, [pc, #656]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1ee      	bne.n	80069ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80a9 	beq.w	8006b70 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a1e:	4b9e      	ldr	r3, [pc, #632]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a28:	4b9b      	ldr	r3, [pc, #620]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d007      	beq.n	8006a44 <HAL_RCC_OscConfig+0x2cc>
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2b18      	cmp	r3, #24
 8006a38:	d13a      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x338>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f003 0303 	and.w	r3, r3, #3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d135      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a44:	4b94      	ldr	r3, [pc, #592]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCC_OscConfig+0x2e4>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b80      	cmp	r3, #128	; 0x80
 8006a56:	d001      	beq.n	8006a5c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e296      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a5c:	f7fb f802 	bl	8001a64 <HAL_GetREVID>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d817      	bhi.n	8006a9a <HAL_RCC_OscConfig+0x322>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d108      	bne.n	8006a84 <HAL_RCC_OscConfig+0x30c>
 8006a72:	4b89      	ldr	r3, [pc, #548]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a7a:	4a87      	ldr	r2, [pc, #540]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a82:	e075      	b.n	8006b70 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a84:	4b84      	ldr	r3, [pc, #528]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	069b      	lsls	r3, r3, #26
 8006a92:	4981      	ldr	r1, [pc, #516]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a98:	e06a      	b.n	8006b70 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a9a:	4b7f      	ldr	r3, [pc, #508]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	497b      	ldr	r1, [pc, #492]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aae:	e05f      	b.n	8006b70 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d042      	beq.n	8006b3e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ab8:	4b77      	ldr	r3, [pc, #476]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a76      	ldr	r2, [pc, #472]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fa ff9e 	bl	8001a04 <HAL_GetTick>
 8006ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006acc:	f7fa ff9a 	bl	8001a04 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e255      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ade:	4b6e      	ldr	r3, [pc, #440]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aea:	f7fa ffbb 	bl	8001a64 <HAL_GetREVID>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d817      	bhi.n	8006b28 <HAL_RCC_OscConfig+0x3b0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d108      	bne.n	8006b12 <HAL_RCC_OscConfig+0x39a>
 8006b00:	4b65      	ldr	r3, [pc, #404]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b08:	4a63      	ldr	r2, [pc, #396]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	6053      	str	r3, [r2, #4]
 8006b10:	e02e      	b.n	8006b70 <HAL_RCC_OscConfig+0x3f8>
 8006b12:	4b61      	ldr	r3, [pc, #388]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	069b      	lsls	r3, r3, #26
 8006b20:	495d      	ldr	r1, [pc, #372]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	604b      	str	r3, [r1, #4]
 8006b26:	e023      	b.n	8006b70 <HAL_RCC_OscConfig+0x3f8>
 8006b28:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	4958      	ldr	r1, [pc, #352]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60cb      	str	r3, [r1, #12]
 8006b3c:	e018      	b.n	8006b70 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b3e:	4b56      	ldr	r3, [pc, #344]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a55      	ldr	r2, [pc, #340]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4a:	f7fa ff5b 	bl	8001a04 <HAL_GetTick>
 8006b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b52:	f7fa ff57 	bl	8001a04 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e212      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b64:	4b4c      	ldr	r3, [pc, #304]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d036      	beq.n	8006bea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d019      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b84:	4b44      	ldr	r3, [pc, #272]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b88:	4a43      	ldr	r2, [pc, #268]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b90:	f7fa ff38 	bl	8001a04 <HAL_GetTick>
 8006b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b98:	f7fa ff34 	bl	8001a04 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e1ef      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006baa:	4b3b      	ldr	r3, [pc, #236]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCC_OscConfig+0x420>
 8006bb6:	e018      	b.n	8006bea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bb8:	4b37      	ldr	r3, [pc, #220]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbc:	4a36      	ldr	r2, [pc, #216]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc4:	f7fa ff1e 	bl	8001a04 <HAL_GetTick>
 8006bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bcc:	f7fa ff1a 	bl	8001a04 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e1d5      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bde:	4b2e      	ldr	r3, [pc, #184]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d036      	beq.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d019      	beq.n	8006c32 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bfe:	4b26      	ldr	r3, [pc, #152]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c0a:	f7fa fefb 	bl	8001a04 <HAL_GetTick>
 8006c0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c12:	f7fa fef7 	bl	8001a04 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e1b2      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c24:	4b1c      	ldr	r3, [pc, #112]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0f0      	beq.n	8006c12 <HAL_RCC_OscConfig+0x49a>
 8006c30:	e018      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c32:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c3e:	f7fa fee1 	bl	8001a04 <HAL_GetTick>
 8006c42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c46:	f7fa fedd 	bl	8001a04 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e198      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c58:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <HAL_RCC_OscConfig+0x520>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f0      	bne.n	8006c46 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8085 	beq.w	8006d7c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c72:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <HAL_RCC_OscConfig+0x524>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <HAL_RCC_OscConfig+0x524>)
 8006c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c7e:	f7fa fec1 	bl	8001a04 <HAL_GetTick>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c84:	e00c      	b.n	8006ca0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c86:	f7fa febd 	bl	8001a04 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b64      	cmp	r3, #100	; 0x64
 8006c92:	d905      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e178      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ca0:	4b96      	ldr	r3, [pc, #600]	; (8006efc <HAL_RCC_OscConfig+0x784>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0ec      	beq.n	8006c86 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x54a>
 8006cb4:	4b92      	ldr	r3, [pc, #584]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb8:	4a91      	ldr	r2, [pc, #580]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc0:	e02d      	b.n	8006d1e <HAL_RCC_OscConfig+0x5a6>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10c      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x56c>
 8006cca:	4b8d      	ldr	r3, [pc, #564]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	4a8c      	ldr	r2, [pc, #560]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd6:	4b8a      	ldr	r3, [pc, #552]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	4a89      	ldr	r2, [pc, #548]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cdc:	f023 0304 	bic.w	r3, r3, #4
 8006ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce2:	e01c      	b.n	8006d1e <HAL_RCC_OscConfig+0x5a6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	d10c      	bne.n	8006d06 <HAL_RCC_OscConfig+0x58e>
 8006cec:	4b84      	ldr	r3, [pc, #528]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	4a83      	ldr	r2, [pc, #524]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cf2:	f043 0304 	orr.w	r3, r3, #4
 8006cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf8:	4b81      	ldr	r3, [pc, #516]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfc:	4a80      	ldr	r2, [pc, #512]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	6713      	str	r3, [r2, #112]	; 0x70
 8006d04:	e00b      	b.n	8006d1e <HAL_RCC_OscConfig+0x5a6>
 8006d06:	4b7e      	ldr	r3, [pc, #504]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	4a7d      	ldr	r2, [pc, #500]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	6713      	str	r3, [r2, #112]	; 0x70
 8006d12:	4b7b      	ldr	r3, [pc, #492]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	4a7a      	ldr	r2, [pc, #488]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006d18:	f023 0304 	bic.w	r3, r3, #4
 8006d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d015      	beq.n	8006d52 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d26:	f7fa fe6d 	bl	8001a04 <HAL_GetTick>
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d2c:	e00a      	b.n	8006d44 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2e:	f7fa fe69 	bl	8001a04 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e122      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d44:	4b6e      	ldr	r3, [pc, #440]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0ee      	beq.n	8006d2e <HAL_RCC_OscConfig+0x5b6>
 8006d50:	e014      	b.n	8006d7c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d52:	f7fa fe57 	bl	8001a04 <HAL_GetTick>
 8006d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d58:	e00a      	b.n	8006d70 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d5a:	f7fa fe53 	bl	8001a04 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e10c      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d70:	4b63      	ldr	r3, [pc, #396]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1ee      	bne.n	8006d5a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8101 	beq.w	8006f88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d86:	4b5e      	ldr	r3, [pc, #376]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d8e:	2b18      	cmp	r3, #24
 8006d90:	f000 80bc 	beq.w	8006f0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	f040 8095 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9e:	4b58      	ldr	r3, [pc, #352]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a57      	ldr	r2, [pc, #348]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006daa:	f7fa fe2b 	bl	8001a04 <HAL_GetTick>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db2:	f7fa fe27 	bl	8001a04 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e0e2      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dc4:	4b4e      	ldr	r3, [pc, #312]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f0      	bne.n	8006db2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dd0:	4b4b      	ldr	r3, [pc, #300]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dd4:	4b4b      	ldr	r3, [pc, #300]	; (8006f04 <HAL_RCC_OscConfig+0x78c>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006de0:	0112      	lsls	r2, r2, #4
 8006de2:	430a      	orrs	r2, r1
 8006de4:	4946      	ldr	r1, [pc, #280]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	628b      	str	r3, [r1, #40]	; 0x28
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	3b01      	subs	r3, #1
 8006df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	025b      	lsls	r3, r3, #9
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	3b01      	subs	r3, #1
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	3b01      	subs	r3, #1
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e1a:	4939      	ldr	r1, [pc, #228]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e20:	4b37      	ldr	r3, [pc, #220]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4a36      	ldr	r2, [pc, #216]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e2c:	4b34      	ldr	r3, [pc, #208]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e30:	4b35      	ldr	r3, [pc, #212]	; (8006f08 <HAL_RCC_OscConfig+0x790>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e38:	00d2      	lsls	r2, r2, #3
 8006e3a:	4931      	ldr	r1, [pc, #196]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e40:	4b2f      	ldr	r3, [pc, #188]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	f023 020c 	bic.w	r2, r3, #12
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	492c      	ldr	r1, [pc, #176]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e52:	4b2b      	ldr	r3, [pc, #172]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	f023 0202 	bic.w	r2, r3, #2
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	4928      	ldr	r1, [pc, #160]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e64:	4b26      	ldr	r3, [pc, #152]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	4a25      	ldr	r2, [pc, #148]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e70:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	4a22      	ldr	r2, [pc, #136]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e7c:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006e88:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a1c      	ldr	r2, [pc, #112]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e94:	4b1a      	ldr	r3, [pc, #104]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a19      	ldr	r2, [pc, #100]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7fa fdb0 	bl	8001a04 <HAL_GetTick>
 8006ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea8:	f7fa fdac 	bl	8001a04 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e067      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eba:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f0      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x730>
 8006ec6:	e05f      	b.n	8006f88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec8:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0c      	ldr	r2, [pc, #48]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed4:	f7fa fd96 	bl	8001a04 <HAL_GetTick>
 8006ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006edc:	f7fa fd92 	bl	8001a04 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e04d      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eee:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <HAL_RCC_OscConfig+0x788>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f0      	bne.n	8006edc <HAL_RCC_OscConfig+0x764>
 8006efa:	e045      	b.n	8006f88 <HAL_RCC_OscConfig+0x810>
 8006efc:	58024800 	.word	0x58024800
 8006f00:	58024400 	.word	0x58024400
 8006f04:	fffffc0c 	.word	0xfffffc0c
 8006f08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f0c:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <HAL_RCC_OscConfig+0x81c>)
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f12:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <HAL_RCC_OscConfig+0x81c>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d031      	beq.n	8006f84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f003 0203 	and.w	r2, r3, #3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d12a      	bne.n	8006f84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d122      	bne.n	8006f84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d11a      	bne.n	8006f84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	0a5b      	lsrs	r3, r3, #9
 8006f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d111      	bne.n	8006f84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	0c1b      	lsrs	r3, r3, #16
 8006f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d108      	bne.n	8006f84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	0e1b      	lsrs	r3, r3, #24
 8006f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d001      	beq.n	8006f88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3730      	adds	r7, #48	; 0x30
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400

08006f98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e19c      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fac:	4b8a      	ldr	r3, [pc, #552]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d910      	bls.n	8006fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fba:	4b87      	ldr	r3, [pc, #540]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f023 020f 	bic.w	r2, r3, #15
 8006fc2:	4985      	ldr	r1, [pc, #532]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fca:	4b83      	ldr	r3, [pc, #524]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e184      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d010      	beq.n	800700a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	4b7b      	ldr	r3, [pc, #492]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d908      	bls.n	800700a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ff8:	4b78      	ldr	r3, [pc, #480]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	4975      	ldr	r1, [pc, #468]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007006:	4313      	orrs	r3, r2
 8007008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d010      	beq.n	8007038 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	4b70      	ldr	r3, [pc, #448]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007022:	429a      	cmp	r2, r3
 8007024:	d908      	bls.n	8007038 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007026:	4b6d      	ldr	r3, [pc, #436]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	496a      	ldr	r1, [pc, #424]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007034:	4313      	orrs	r3, r2
 8007036:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	d010      	beq.n	8007066 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	4b64      	ldr	r3, [pc, #400]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007050:	429a      	cmp	r2, r3
 8007052:	d908      	bls.n	8007066 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007054:	4b61      	ldr	r3, [pc, #388]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	495e      	ldr	r1, [pc, #376]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007062:	4313      	orrs	r3, r2
 8007064:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	d010      	beq.n	8007094 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69da      	ldr	r2, [r3, #28]
 8007076:	4b59      	ldr	r3, [pc, #356]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800707e:	429a      	cmp	r2, r3
 8007080:	d908      	bls.n	8007094 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007082:	4b56      	ldr	r3, [pc, #344]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	4953      	ldr	r1, [pc, #332]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007090:	4313      	orrs	r3, r2
 8007092:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d010      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	4b4d      	ldr	r3, [pc, #308]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d908      	bls.n	80070c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b0:	4b4a      	ldr	r3, [pc, #296]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f023 020f 	bic.w	r2, r3, #15
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4947      	ldr	r1, [pc, #284]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d055      	beq.n	800717a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070ce:	4b43      	ldr	r3, [pc, #268]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4940      	ldr	r1, [pc, #256]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d107      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070e8:	4b3c      	ldr	r3, [pc, #240]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d121      	bne.n	8007138 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0f6      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d107      	bne.n	8007110 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007100:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d115      	bne.n	8007138 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e0ea      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d107      	bne.n	8007128 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007118:	4b30      	ldr	r3, [pc, #192]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0de      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007128:	4b2c      	ldr	r3, [pc, #176]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0d6      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007138:	4b28      	ldr	r3, [pc, #160]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f023 0207 	bic.w	r2, r3, #7
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4925      	ldr	r1, [pc, #148]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007146:	4313      	orrs	r3, r2
 8007148:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800714a:	f7fa fc5b 	bl	8001a04 <HAL_GetTick>
 800714e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007150:	e00a      	b.n	8007168 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007152:	f7fa fc57 	bl	8001a04 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007160:	4293      	cmp	r3, r2
 8007162:	d901      	bls.n	8007168 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e0be      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007168:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	429a      	cmp	r2, r3
 8007178:	d1eb      	bne.n	8007152 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d010      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	4b14      	ldr	r3, [pc, #80]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	429a      	cmp	r2, r3
 8007194:	d208      	bcs.n	80071a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007196:	4b11      	ldr	r3, [pc, #68]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f023 020f 	bic.w	r2, r3, #15
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	490e      	ldr	r1, [pc, #56]	; (80071dc <HAL_RCC_ClockConfig+0x244>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071a8:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d214      	bcs.n	80071e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f023 020f 	bic.w	r2, r3, #15
 80071be:	4906      	ldr	r1, [pc, #24]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <HAL_RCC_ClockConfig+0x240>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d005      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e086      	b.n	80072e6 <HAL_RCC_ClockConfig+0x34e>
 80071d8:	52002000 	.word	0x52002000
 80071dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	4b3f      	ldr	r3, [pc, #252]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d208      	bcs.n	800720e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071fc:	4b3c      	ldr	r3, [pc, #240]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	4939      	ldr	r1, [pc, #228]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 800720a:	4313      	orrs	r3, r2
 800720c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d010      	beq.n	800723c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	4b34      	ldr	r3, [pc, #208]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007226:	429a      	cmp	r2, r3
 8007228:	d208      	bcs.n	800723c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800722a:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	492e      	ldr	r1, [pc, #184]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 8007238:	4313      	orrs	r3, r2
 800723a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d010      	beq.n	800726a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699a      	ldr	r2, [r3, #24]
 800724c:	4b28      	ldr	r3, [pc, #160]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007254:	429a      	cmp	r2, r3
 8007256:	d208      	bcs.n	800726a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007258:	4b25      	ldr	r3, [pc, #148]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	4922      	ldr	r1, [pc, #136]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 8007266:	4313      	orrs	r3, r2
 8007268:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d010      	beq.n	8007298 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69da      	ldr	r2, [r3, #28]
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007282:	429a      	cmp	r2, r3
 8007284:	d208      	bcs.n	8007298 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	4917      	ldr	r1, [pc, #92]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 8007294:	4313      	orrs	r3, r2
 8007296:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007298:	f000 f834 	bl	8007304 <HAL_RCC_GetSysClockFreq>
 800729c:	4602      	mov	r2, r0
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	4912      	ldr	r1, [pc, #72]	; (80072f4 <HAL_RCC_ClockConfig+0x35c>)
 80072aa:	5ccb      	ldrb	r3, [r1, r3]
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	fa22 f303 	lsr.w	r3, r2, r3
 80072b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072b6:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <HAL_RCC_ClockConfig+0x358>)
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	4a0d      	ldr	r2, [pc, #52]	; (80072f4 <HAL_RCC_ClockConfig+0x35c>)
 80072c0:	5cd3      	ldrb	r3, [r2, r3]
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <HAL_RCC_ClockConfig+0x360>)
 80072ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <HAL_RCC_ClockConfig+0x364>)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80072d6:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <HAL_RCC_ClockConfig+0x368>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fa fb48 	bl	8001970 <HAL_InitTick>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	58024400 	.word	0x58024400
 80072f4:	08010f9c 	.word	0x08010f9c
 80072f8:	24000004 	.word	0x24000004
 80072fc:	24000000 	.word	0x24000000
 8007300:	24000008 	.word	0x24000008

08007304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007304:	b480      	push	{r7}
 8007306:	b089      	sub	sp, #36	; 0x24
 8007308:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800730a:	4bb3      	ldr	r3, [pc, #716]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007312:	2b18      	cmp	r3, #24
 8007314:	f200 8155 	bhi.w	80075c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <HAL_RCC_GetSysClockFreq+0x1c>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007385 	.word	0x08007385
 8007324:	080075c3 	.word	0x080075c3
 8007328:	080075c3 	.word	0x080075c3
 800732c:	080075c3 	.word	0x080075c3
 8007330:	080075c3 	.word	0x080075c3
 8007334:	080075c3 	.word	0x080075c3
 8007338:	080075c3 	.word	0x080075c3
 800733c:	080075c3 	.word	0x080075c3
 8007340:	080073ab 	.word	0x080073ab
 8007344:	080075c3 	.word	0x080075c3
 8007348:	080075c3 	.word	0x080075c3
 800734c:	080075c3 	.word	0x080075c3
 8007350:	080075c3 	.word	0x080075c3
 8007354:	080075c3 	.word	0x080075c3
 8007358:	080075c3 	.word	0x080075c3
 800735c:	080075c3 	.word	0x080075c3
 8007360:	080073b1 	.word	0x080073b1
 8007364:	080075c3 	.word	0x080075c3
 8007368:	080075c3 	.word	0x080075c3
 800736c:	080075c3 	.word	0x080075c3
 8007370:	080075c3 	.word	0x080075c3
 8007374:	080075c3 	.word	0x080075c3
 8007378:	080075c3 	.word	0x080075c3
 800737c:	080075c3 	.word	0x080075c3
 8007380:	080073b7 	.word	0x080073b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007384:	4b94      	ldr	r3, [pc, #592]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d009      	beq.n	80073a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007390:	4b91      	ldr	r3, [pc, #580]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	08db      	lsrs	r3, r3, #3
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	4a90      	ldr	r2, [pc, #576]	; (80075dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800739c:	fa22 f303 	lsr.w	r3, r2, r3
 80073a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80073a2:	e111      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073a4:	4b8d      	ldr	r3, [pc, #564]	; (80075dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073a6:	61bb      	str	r3, [r7, #24]
    break;
 80073a8:	e10e      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80073aa:	4b8d      	ldr	r3, [pc, #564]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073ac:	61bb      	str	r3, [r7, #24]
    break;
 80073ae:	e10b      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80073b0:	4b8c      	ldr	r3, [pc, #560]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073b2:	61bb      	str	r3, [r7, #24]
    break;
 80073b4:	e108      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b6:	4b88      	ldr	r3, [pc, #544]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80073c0:	4b85      	ldr	r3, [pc, #532]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073cc:	4b82      	ldr	r3, [pc, #520]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073d6:	4b80      	ldr	r3, [pc, #512]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	08db      	lsrs	r3, r3, #3
 80073dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 80e1 	beq.w	80075bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	f000 8083 	beq.w	8007508 <HAL_RCC_GetSysClockFreq+0x204>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b02      	cmp	r3, #2
 8007406:	f200 80a1 	bhi.w	800754c <HAL_RCC_GetSysClockFreq+0x248>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_RCC_GetSysClockFreq+0x114>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d056      	beq.n	80074c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007416:	e099      	b.n	800754c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007418:	4b6f      	ldr	r3, [pc, #444]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d02d      	beq.n	8007480 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007424:	4b6c      	ldr	r3, [pc, #432]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	08db      	lsrs	r3, r3, #3
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	4a6b      	ldr	r2, [pc, #428]	; (80075dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
 8007434:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b62      	ldr	r3, [pc, #392]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007462:	eddf 5a61 	vldr	s11, [pc, #388]	; 80075e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800747e:	e087      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80075ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b51      	ldr	r3, [pc, #324]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80075e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074c2:	e065      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80075f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b40      	ldr	r3, [pc, #256]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80075e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007506:	e043      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eddf 6a38 	vldr	s13, [pc, #224]	; 80075f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751a:	4b2f      	ldr	r3, [pc, #188]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752a:	ed97 6a02 	vldr	s12, [r7, #8]
 800752e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80075e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800754a:	e021      	b.n	8007590 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	eddf 6a26 	vldr	s13, [pc, #152]	; 80075f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800755a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755e:	4b1e      	ldr	r3, [pc, #120]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007572:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80075e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	0a5b      	lsrs	r3, r3, #9
 8007596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759a:	3301      	adds	r3, #1
 800759c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	ee07 3a90 	vmov	s15, r3
 80075a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b4:	ee17 3a90 	vmov	r3, s15
 80075b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80075ba:	e005      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	61bb      	str	r3, [r7, #24]
    break;
 80075c0:	e002      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80075c2:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075c4:	61bb      	str	r3, [r7, #24]
    break;
 80075c6:	bf00      	nop
  }

  return sysclockfreq;
 80075c8:	69bb      	ldr	r3, [r7, #24]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3724      	adds	r7, #36	; 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	58024400 	.word	0x58024400
 80075dc:	03d09000 	.word	0x03d09000
 80075e0:	003d0900 	.word	0x003d0900
 80075e4:	007a1200 	.word	0x007a1200
 80075e8:	46000000 	.word	0x46000000
 80075ec:	4c742400 	.word	0x4c742400
 80075f0:	4a742400 	.word	0x4a742400
 80075f4:	4af42400 	.word	0x4af42400

080075f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075fe:	f7ff fe81 	bl	8007304 <HAL_RCC_GetSysClockFreq>
 8007602:	4602      	mov	r2, r0
 8007604:	4b10      	ldr	r3, [pc, #64]	; (8007648 <HAL_RCC_GetHCLKFreq+0x50>)
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	0a1b      	lsrs	r3, r3, #8
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	490f      	ldr	r1, [pc, #60]	; (800764c <HAL_RCC_GetHCLKFreq+0x54>)
 8007610:	5ccb      	ldrb	r3, [r1, r3]
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	fa22 f303 	lsr.w	r3, r2, r3
 800761a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <HAL_RCC_GetHCLKFreq+0x50>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	4a09      	ldr	r2, [pc, #36]	; (800764c <HAL_RCC_GetHCLKFreq+0x54>)
 8007626:	5cd3      	ldrb	r3, [r2, r3]
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	fa22 f303 	lsr.w	r3, r2, r3
 8007632:	4a07      	ldr	r2, [pc, #28]	; (8007650 <HAL_RCC_GetHCLKFreq+0x58>)
 8007634:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007636:	4a07      	ldr	r2, [pc, #28]	; (8007654 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800763c:	4b04      	ldr	r3, [pc, #16]	; (8007650 <HAL_RCC_GetHCLKFreq+0x58>)
 800763e:	681b      	ldr	r3, [r3, #0]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	58024400 	.word	0x58024400
 800764c:	08010f9c 	.word	0x08010f9c
 8007650:	24000004 	.word	0x24000004
 8007654:	24000000 	.word	0x24000000

08007658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800765c:	f7ff ffcc 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8007660:	4602      	mov	r2, r0
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	091b      	lsrs	r3, r3, #4
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	4904      	ldr	r1, [pc, #16]	; (8007680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800766e:	5ccb      	ldrb	r3, [r1, r3]
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007678:	4618      	mov	r0, r3
 800767a:	bd80      	pop	{r7, pc}
 800767c:	58024400 	.word	0x58024400
 8007680:	08010f9c 	.word	0x08010f9c

08007684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007688:	f7ff ffb6 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 800768c:	4602      	mov	r2, r0
 800768e:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	0a1b      	lsrs	r3, r3, #8
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	4904      	ldr	r1, [pc, #16]	; (80076ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800769a:	5ccb      	ldrb	r3, [r1, r3]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	58024400 	.word	0x58024400
 80076ac:	08010f9c 	.word	0x08010f9c

080076b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076b8:	2300      	movs	r3, #0
 80076ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076bc:	2300      	movs	r3, #0
 80076be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d03f      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076d4:	d02a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80076d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076da:	d824      	bhi.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80076dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076e0:	d018      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076e6:	d81e      	bhi.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80076ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f0:	d007      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80076f2:	e018      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f4:	4bab      	ldr	r3, [pc, #684]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	4aaa      	ldr	r2, [pc, #680]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007700:	e015      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3304      	adds	r3, #4
 8007706:	2102      	movs	r1, #2
 8007708:	4618      	mov	r0, r3
 800770a:	f001 f9cf 	bl	8008aac <RCCEx_PLL2_Config>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007712:	e00c      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3324      	adds	r3, #36	; 0x24
 8007718:	2102      	movs	r1, #2
 800771a:	4618      	mov	r0, r3
 800771c:	f001 fa78 	bl	8008c10 <RCCEx_PLL3_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007724:	e003      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
      break;
 800772a:	e000      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800772c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d109      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007734:	4b9b      	ldr	r3, [pc, #620]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007740:	4998      	ldr	r1, [pc, #608]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007742:	4313      	orrs	r3, r2
 8007744:	650b      	str	r3, [r1, #80]	; 0x50
 8007746:	e001      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d03d      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775c:	2b04      	cmp	r3, #4
 800775e:	d826      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	0800777d 	.word	0x0800777d
 800776c:	0800778b 	.word	0x0800778b
 8007770:	0800779d 	.word	0x0800779d
 8007774:	080077b5 	.word	0x080077b5
 8007778:	080077b5 	.word	0x080077b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4b89      	ldr	r3, [pc, #548]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a88      	ldr	r2, [pc, #544]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007788:	e015      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3304      	adds	r3, #4
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f001 f98b 	bl	8008aac <RCCEx_PLL2_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800779a:	e00c      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3324      	adds	r3, #36	; 0x24
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 fa34 	bl	8008c10 <RCCEx_PLL3_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077ac:	e003      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
      break;
 80077b2:	e000      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80077b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d109      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077bc:	4b79      	ldr	r3, [pc, #484]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	f023 0207 	bic.w	r2, r3, #7
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c8:	4976      	ldr	r1, [pc, #472]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	650b      	str	r3, [r1, #80]	; 0x50
 80077ce:	e001      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d042      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e8:	d02b      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80077ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ee:	d825      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80077f0:	2bc0      	cmp	r3, #192	; 0xc0
 80077f2:	d028      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80077f4:	2bc0      	cmp	r3, #192	; 0xc0
 80077f6:	d821      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80077f8:	2b80      	cmp	r3, #128	; 0x80
 80077fa:	d016      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	d81d      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d007      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007808:	e018      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800780a:	4b66      	ldr	r3, [pc, #408]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	4a65      	ldr	r2, [pc, #404]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007816:	e017      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	2100      	movs	r1, #0
 800781e:	4618      	mov	r0, r3
 8007820:	f001 f944 	bl	8008aac <RCCEx_PLL2_Config>
 8007824:	4603      	mov	r3, r0
 8007826:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007828:	e00e      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3324      	adds	r3, #36	; 0x24
 800782e:	2100      	movs	r1, #0
 8007830:	4618      	mov	r0, r3
 8007832:	f001 f9ed 	bl	8008c10 <RCCEx_PLL3_Config>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800783a:	e005      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
      break;
 8007840:	e002      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007842:	bf00      	nop
 8007844:	e000      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d109      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800784e:	4b55      	ldr	r3, [pc, #340]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007852:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	4952      	ldr	r1, [pc, #328]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800785c:	4313      	orrs	r3, r2
 800785e:	650b      	str	r3, [r1, #80]	; 0x50
 8007860:	e001      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786e:	2b00      	cmp	r3, #0
 8007870:	d049      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007878:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800787c:	d030      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800787e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007882:	d82a      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007884:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007888:	d02c      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800788a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800788e:	d824      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007894:	d018      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800789a:	d81e      	bhi.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80078a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a4:	d007      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80078a6:	e018      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a8:	4b3e      	ldr	r3, [pc, #248]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4a3d      	ldr	r2, [pc, #244]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078b4:	e017      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 f8f5 	bl	8008aac <RCCEx_PLL2_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80078c6:	e00e      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	2100      	movs	r1, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f001 f99e 	bl	8008c10 <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078d8:	e005      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
      break;
 80078de:	e002      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80078e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80078ec:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078fa:	492a      	ldr	r1, [pc, #168]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	658b      	str	r3, [r1, #88]	; 0x58
 8007900:	e001      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800790e:	2b00      	cmp	r3, #0
 8007910:	d04c      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800791c:	d030      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800791e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007922:	d82a      	bhi.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007924:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007928:	d02c      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800792a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800792e:	d824      	bhi.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007934:	d018      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800793a:	d81e      	bhi.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007944:	d007      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007946:	e018      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4b16      	ldr	r3, [pc, #88]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007954:	e017      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3304      	adds	r3, #4
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f8a5 	bl	8008aac <RCCEx_PLL2_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007966:	e00e      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3324      	adds	r3, #36	; 0x24
 800796c:	2100      	movs	r1, #0
 800796e:	4618      	mov	r0, r3
 8007970:	f001 f94e 	bl	8008c10 <RCCEx_PLL3_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007978:	e005      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]
      break;
 800797e:	e002      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800798e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007990:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800799a:	4902      	ldr	r1, [pc, #8]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800799c:	4313      	orrs	r3, r2
 800799e:	658b      	str	r3, [r1, #88]	; 0x58
 80079a0:	e004      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80079a2:	bf00      	nop
 80079a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d032      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079bc:	2b30      	cmp	r3, #48	; 0x30
 80079be:	d01c      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80079c0:	2b30      	cmp	r3, #48	; 0x30
 80079c2:	d817      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80079c4:	2b20      	cmp	r3, #32
 80079c6:	d00c      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d813      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d016      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d10f      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d4:	4baf      	ldr	r3, [pc, #700]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	4aae      	ldr	r2, [pc, #696]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80079e0:	e00e      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3304      	adds	r3, #4
 80079e6:	2102      	movs	r1, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 f85f 	bl	8008aac <RCCEx_PLL2_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80079f2:	e005      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]
      break;
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80079fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a06:	4ba3      	ldr	r3, [pc, #652]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a12:	49a0      	ldr	r1, [pc, #640]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a18:	e001      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d047      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a32:	d030      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a38:	d82a      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a3e:	d02c      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007a40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a44:	d824      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a4a:	d018      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a50:	d81e      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5a:	d007      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007a5c:	e018      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5e:	4b8d      	ldr	r3, [pc, #564]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	4a8c      	ldr	r2, [pc, #560]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a6a:	e017      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 f81a 	bl	8008aac <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a7c:	e00e      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3324      	adds	r3, #36	; 0x24
 8007a82:	2100      	movs	r1, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 f8c3 	bl	8008c10 <RCCEx_PLL3_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a8e:	e005      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	75fb      	strb	r3, [r7, #23]
      break;
 8007a94:	e002      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007aa2:	4b7c      	ldr	r3, [pc, #496]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aae:	4979      	ldr	r1, [pc, #484]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ab4:	e001      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d049      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ace:	d02e      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ad4:	d828      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ada:	d02a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007adc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ae0:	d822      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ae2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ae6:	d026      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007ae8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aec:	d81c      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af2:	d010      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af8:	d816      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01d      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b02:	d111      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	2101      	movs	r1, #1
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 ffce 	bl	8008aac <RCCEx_PLL2_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b14:	e012      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3324      	adds	r3, #36	; 0x24
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 f877 	bl	8008c10 <RCCEx_PLL3_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b26:	e009      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2c:	e006      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b2e:	bf00      	nop
 8007b30:	e004      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b32:	bf00      	nop
 8007b34:	e002      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b36:	bf00      	nop
 8007b38:	e000      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b42:	4b54      	ldr	r3, [pc, #336]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b46:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b4e:	4951      	ldr	r1, [pc, #324]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	650b      	str	r3, [r1, #80]	; 0x50
 8007b54:	e001      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d04b      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b70:	d02e      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b76:	d828      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7c:	d02a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b82:	d822      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b88:	d026      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007b8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b8e:	d81c      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b94:	d010      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b9a:	d816      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01d      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba4:	d111      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	2101      	movs	r1, #1
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 ff7d 	bl	8008aac <RCCEx_PLL2_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bb6:	e012      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3324      	adds	r3, #36	; 0x24
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 f826 	bl	8008c10 <RCCEx_PLL3_Config>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bc8:	e009      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bce:	e006      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e004      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e002      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007bd8:	bf00      	nop
 8007bda:	e000      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007be4:	4b2b      	ldr	r3, [pc, #172]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bf2:	4928      	ldr	r1, [pc, #160]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	658b      	str	r3, [r1, #88]	; 0x58
 8007bf8:	e001      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d02f      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c12:	d00e      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c18:	d814      	bhi.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d015      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c22:	d10f      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	4a1a      	ldr	r2, [pc, #104]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c30:	e00c      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3304      	adds	r3, #4
 8007c36:	2101      	movs	r1, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 ff37 	bl	8008aac <RCCEx_PLL2_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c42:	e003      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]
      break;
 8007c48:	e000      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c52:	4b10      	ldr	r3, [pc, #64]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5e:	490d      	ldr	r1, [pc, #52]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	650b      	str	r3, [r1, #80]	; 0x50
 8007c64:	e001      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d033      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d81c      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cbf 	.word	0x08007cbf
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007ca7 	.word	0x08007ca7
 8007c90:	08007cbf 	.word	0x08007cbf
 8007c94:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c98:	4bb8      	ldr	r3, [pc, #736]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	4ab7      	ldr	r2, [pc, #732]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ca4:	e00c      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	2102      	movs	r1, #2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fefd 	bl	8008aac <RCCEx_PLL2_Config>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cb6:	e003      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
      break;
 8007cbc:	e000      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d109      	bne.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cc6:	4bad      	ldr	r3, [pc, #692]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cca:	f023 0203 	bic.w	r2, r3, #3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	49aa      	ldr	r1, [pc, #680]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007cd8:	e001      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 8086 	beq.w	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cec:	4ba4      	ldr	r3, [pc, #656]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4aa3      	ldr	r2, [pc, #652]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cf8:	f7f9 fe84 	bl	8001a04 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cfe:	e009      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d00:	f7f9 fe80 	bl	8001a04 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b64      	cmp	r3, #100	; 0x64
 8007d0c:	d902      	bls.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	75fb      	strb	r3, [r7, #23]
        break;
 8007d12:	e005      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d14:	4b9a      	ldr	r3, [pc, #616]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0ef      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d166      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d26:	4b95      	ldr	r3, [pc, #596]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d30:	4053      	eors	r3, r2
 8007d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d013      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d3a:	4b90      	ldr	r3, [pc, #576]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d44:	4b8d      	ldr	r3, [pc, #564]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	4a8c      	ldr	r2, [pc, #560]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d50:	4b8a      	ldr	r3, [pc, #552]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	4a89      	ldr	r2, [pc, #548]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d5c:	4a87      	ldr	r2, [pc, #540]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6c:	d115      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6e:	f7f9 fe49 	bl	8001a04 <HAL_GetTick>
 8007d72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d74:	e00b      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d76:	f7f9 fe45 	bl	8001a04 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d902      	bls.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8007d8c:	e005      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d8e:	4b7b      	ldr	r3, [pc, #492]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0ed      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d126      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dae:	d10d      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007db0:	4b72      	ldr	r3, [pc, #456]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dbe:	0919      	lsrs	r1, r3, #4
 8007dc0:	4b70      	ldr	r3, [pc, #448]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007dc2:	400b      	ands	r3, r1
 8007dc4:	496d      	ldr	r1, [pc, #436]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	610b      	str	r3, [r1, #16]
 8007dca:	e005      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007dcc:	4b6b      	ldr	r3, [pc, #428]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	4a6a      	ldr	r2, [pc, #424]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007dd6:	6113      	str	r3, [r2, #16]
 8007dd8:	4b68      	ldr	r3, [pc, #416]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de6:	4965      	ldr	r1, [pc, #404]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	670b      	str	r3, [r1, #112]	; 0x70
 8007dec:	e004      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	75bb      	strb	r3, [r7, #22]
 8007df2:	e001      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d07e      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e08:	2b28      	cmp	r3, #40	; 0x28
 8007e0a:	d867      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007ee3 	.word	0x08007ee3
 8007e18:	08007edd 	.word	0x08007edd
 8007e1c:	08007edd 	.word	0x08007edd
 8007e20:	08007edd 	.word	0x08007edd
 8007e24:	08007edd 	.word	0x08007edd
 8007e28:	08007edd 	.word	0x08007edd
 8007e2c:	08007edd 	.word	0x08007edd
 8007e30:	08007edd 	.word	0x08007edd
 8007e34:	08007eb9 	.word	0x08007eb9
 8007e38:	08007edd 	.word	0x08007edd
 8007e3c:	08007edd 	.word	0x08007edd
 8007e40:	08007edd 	.word	0x08007edd
 8007e44:	08007edd 	.word	0x08007edd
 8007e48:	08007edd 	.word	0x08007edd
 8007e4c:	08007edd 	.word	0x08007edd
 8007e50:	08007edd 	.word	0x08007edd
 8007e54:	08007ecb 	.word	0x08007ecb
 8007e58:	08007edd 	.word	0x08007edd
 8007e5c:	08007edd 	.word	0x08007edd
 8007e60:	08007edd 	.word	0x08007edd
 8007e64:	08007edd 	.word	0x08007edd
 8007e68:	08007edd 	.word	0x08007edd
 8007e6c:	08007edd 	.word	0x08007edd
 8007e70:	08007edd 	.word	0x08007edd
 8007e74:	08007ee3 	.word	0x08007ee3
 8007e78:	08007edd 	.word	0x08007edd
 8007e7c:	08007edd 	.word	0x08007edd
 8007e80:	08007edd 	.word	0x08007edd
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007edd 	.word	0x08007edd
 8007e8c:	08007edd 	.word	0x08007edd
 8007e90:	08007edd 	.word	0x08007edd
 8007e94:	08007ee3 	.word	0x08007ee3
 8007e98:	08007edd 	.word	0x08007edd
 8007e9c:	08007edd 	.word	0x08007edd
 8007ea0:	08007edd 	.word	0x08007edd
 8007ea4:	08007edd 	.word	0x08007edd
 8007ea8:	08007edd 	.word	0x08007edd
 8007eac:	08007edd 	.word	0x08007edd
 8007eb0:	08007edd 	.word	0x08007edd
 8007eb4:	08007ee3 	.word	0x08007ee3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fdf4 	bl	8008aac <RCCEx_PLL2_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ec8:	e00c      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3324      	adds	r3, #36	; 0x24
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fe9d 	bl	8008c10 <RCCEx_PLL3_Config>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007eda:	e003      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee0:	e000      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007eea:	4b24      	ldr	r3, [pc, #144]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ef6:	4921      	ldr	r1, [pc, #132]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	654b      	str	r3, [r1, #84]	; 0x54
 8007efc:	e001      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d03e      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d820      	bhi.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f5f 	.word	0x08007f5f
 8007f20:	08007f35 	.word	0x08007f35
 8007f24:	08007f47 	.word	0x08007f47
 8007f28:	08007f5f 	.word	0x08007f5f
 8007f2c:	08007f5f 	.word	0x08007f5f
 8007f30:	08007f5f 	.word	0x08007f5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	2101      	movs	r1, #1
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fdb6 	bl	8008aac <RCCEx_PLL2_Config>
 8007f40:	4603      	mov	r3, r0
 8007f42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f44:	e00c      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3324      	adds	r3, #36	; 0x24
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fe5f 	bl	8008c10 <RCCEx_PLL3_Config>
 8007f52:	4603      	mov	r3, r0
 8007f54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f56:	e003      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f5c:	e000      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d110      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	f023 0207 	bic.w	r2, r3, #7
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f72:	4902      	ldr	r1, [pc, #8]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	654b      	str	r3, [r1, #84]	; 0x54
 8007f78:	e008      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007f7a:	bf00      	nop
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	58024800 	.word	0x58024800
 8007f84:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d039      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d820      	bhi.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007fa2:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007feb 	.word	0x08007feb
 8007fac:	08007fc1 	.word	0x08007fc1
 8007fb0:	08007fd3 	.word	0x08007fd3
 8007fb4:	08007feb 	.word	0x08007feb
 8007fb8:	08007feb 	.word	0x08007feb
 8007fbc:	08007feb 	.word	0x08007feb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fd70 	bl	8008aac <RCCEx_PLL2_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007fd0:	e00c      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3324      	adds	r3, #36	; 0x24
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fe19 	bl	8008c10 <RCCEx_PLL3_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007fe2:	e003      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe8:	e000      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ff2:	4bb7      	ldr	r3, [pc, #732]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	f023 0207 	bic.w	r2, r3, #7
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008000:	49b3      	ldr	r1, [pc, #716]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008002:	4313      	orrs	r3, r2
 8008004:	658b      	str	r3, [r1, #88]	; 0x58
 8008006:	e001      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d04b      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800801e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008022:	d02e      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008028:	d828      	bhi.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800802a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802e:	d02a      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008034:	d822      	bhi.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800803a:	d026      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800803c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008040:	d81c      	bhi.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008046:	d010      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800804c:	d816      	bhi.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01d      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008056:	d111      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3304      	adds	r3, #4
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fd24 	bl	8008aac <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008068:	e012      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3324      	adds	r3, #36	; 0x24
 800806e:	2102      	movs	r1, #2
 8008070:	4618      	mov	r0, r3
 8008072:	f000 fdcd 	bl	8008c10 <RCCEx_PLL3_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800807a:	e009      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	75fb      	strb	r3, [r7, #23]
      break;
 8008080:	e006      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008082:	bf00      	nop
 8008084:	e004      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008086:	bf00      	nop
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800808e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008096:	4b8e      	ldr	r3, [pc, #568]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a4:	498a      	ldr	r1, [pc, #552]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	654b      	str	r3, [r1, #84]	; 0x54
 80080aa:	e001      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d04b      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080c6:	d02e      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80080c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080cc:	d828      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80080ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d2:	d02a      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d8:	d822      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80080da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080de:	d026      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80080e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080e4:	d81c      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80080e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ea:	d010      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80080ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f0:	d816      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d01d      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80080f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fa:	d111      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fcd2 	bl	8008aac <RCCEx_PLL2_Config>
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800810c:	e012      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3324      	adds	r3, #36	; 0x24
 8008112:	2102      	movs	r1, #2
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fd7b 	bl	8008c10 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800811e:	e009      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
      break;
 8008124:	e006      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008126:	bf00      	nop
 8008128:	e004      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800813a:	4b65      	ldr	r3, [pc, #404]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008148:	4961      	ldr	r1, [pc, #388]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800814a:	4313      	orrs	r3, r2
 800814c:	658b      	str	r3, [r1, #88]	; 0x58
 800814e:	e001      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b00      	cmp	r3, #0
 800815e:	d04b      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008166:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800816a:	d02e      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800816c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008170:	d828      	bhi.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008176:	d02a      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817c:	d822      	bhi.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800817e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008182:	d026      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008184:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008188:	d81c      	bhi.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800818a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800818e:	d010      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008194:	d816      	bhi.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d01d      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800819a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819e:	d111      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3304      	adds	r3, #4
 80081a4:	2100      	movs	r1, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fc80 	bl	8008aac <RCCEx_PLL2_Config>
 80081ac:	4603      	mov	r3, r0
 80081ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081b0:	e012      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3324      	adds	r3, #36	; 0x24
 80081b6:	2102      	movs	r1, #2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 fd29 	bl	8008c10 <RCCEx_PLL3_Config>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081c2:	e009      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	75fb      	strb	r3, [r7, #23]
      break;
 80081c8:	e006      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80081ca:	bf00      	nop
 80081cc:	e004      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80081ce:	bf00      	nop
 80081d0:	e002      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80081d2:	bf00      	nop
 80081d4:	e000      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80081d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10a      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081de:	4b3c      	ldr	r3, [pc, #240]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081ec:	4938      	ldr	r1, [pc, #224]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	658b      	str	r3, [r1, #88]	; 0x58
 80081f2:	e001      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01a      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820e:	d10a      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3324      	adds	r3, #36	; 0x24
 8008214:	2102      	movs	r1, #2
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fcfa 	bl	8008c10 <RCCEx_PLL3_Config>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008226:	4b2a      	ldr	r3, [pc, #168]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008234:	4926      	ldr	r1, [pc, #152]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008236:	4313      	orrs	r3, r2
 8008238:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0310 	and.w	r3, r3, #16
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01a      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800824c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008250:	d10a      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3324      	adds	r3, #36	; 0x24
 8008256:	2102      	movs	r1, #2
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fcd9 	bl	8008c10 <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008268:	4b19      	ldr	r3, [pc, #100]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800826a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008276:	4916      	ldr	r1, [pc, #88]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008278:	4313      	orrs	r3, r2
 800827a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d036      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800828e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008292:	d01f      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008298:	d817      	bhi.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800829e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a2:	d009      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80082a4:	e011      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	2100      	movs	r1, #0
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fbfd 	bl	8008aac <RCCEx_PLL2_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082b6:	e00e      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3324      	adds	r3, #36	; 0x24
 80082bc:	2102      	movs	r1, #2
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fca6 	bl	8008c10 <RCCEx_PLL3_Config>
 80082c4:	4603      	mov	r3, r0
 80082c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082c8:	e005      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	75fb      	strb	r3, [r7, #23]
      break;
 80082ce:	e002      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80082d0:	58024400 	.word	0x58024400
      break;
 80082d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082dc:	4b93      	ldr	r3, [pc, #588]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082ea:	4990      	ldr	r1, [pc, #576]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	658b      	str	r3, [r1, #88]	; 0x58
 80082f0:	e001      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d033      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800830c:	d01c      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800830e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008312:	d816      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008318:	d003      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800831a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800831e:	d007      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008320:	e00f      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008322:	4b82      	ldr	r3, [pc, #520]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	4a81      	ldr	r2, [pc, #516]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800832e:	e00c      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3324      	adds	r3, #36	; 0x24
 8008334:	2101      	movs	r1, #1
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fc6a 	bl	8008c10 <RCCEx_PLL3_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008340:	e003      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
      break;
 8008346:	e000      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008350:	4b76      	ldr	r3, [pc, #472]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800835e:	4973      	ldr	r1, [pc, #460]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008360:	4313      	orrs	r3, r2
 8008362:	654b      	str	r3, [r1, #84]	; 0x54
 8008364:	e001      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d029      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800837e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008382:	d007      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008384:	e00f      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008386:	4b69      	ldr	r3, [pc, #420]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	4a68      	ldr	r2, [pc, #416]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800838c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008392:	e00b      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3304      	adds	r3, #4
 8008398:	2102      	movs	r1, #2
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fb86 	bl	8008aac <RCCEx_PLL2_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083a4:	e002      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]
      break;
 80083aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083b2:	4b5e      	ldr	r3, [pc, #376]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	495b      	ldr	r1, [pc, #364]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083c4:	e001      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3324      	adds	r3, #36	; 0x24
 80083da:	2102      	movs	r1, #2
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fc17 	bl	8008c10 <RCCEx_PLL3_Config>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d030      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008400:	d017      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008406:	d811      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840c:	d013      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800840e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008412:	d80b      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d010      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800841c:	d106      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841e:	4b43      	ldr	r3, [pc, #268]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	4a42      	ldr	r2, [pc, #264]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800842a:	e007      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
      break;
 8008430:	e004      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008432:	bf00      	nop
 8008434:	e002      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008436:	bf00      	nop
 8008438:	e000      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800843a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008442:	4b3a      	ldr	r3, [pc, #232]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844e:	4937      	ldr	r1, [pc, #220]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008450:	4313      	orrs	r3, r2
 8008452:	654b      	str	r3, [r1, #84]	; 0x54
 8008454:	e001      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d008      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008466:	4b31      	ldr	r3, [pc, #196]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008472:	492e      	ldr	r1, [pc, #184]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008474:	4313      	orrs	r3, r2
 8008476:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008484:	4b29      	ldr	r3, [pc, #164]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008492:	4926      	ldr	r1, [pc, #152]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008494:	4313      	orrs	r3, r2
 8008496:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084a4:	4b21      	ldr	r3, [pc, #132]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b0:	491e      	ldr	r1, [pc, #120]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00d      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084c2:	4b1a      	ldr	r3, [pc, #104]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	4a19      	ldr	r2, [pc, #100]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084cc:	6113      	str	r3, [r2, #16]
 80084ce:	4b17      	ldr	r3, [pc, #92]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084d8:	4914      	ldr	r1, [pc, #80]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	da08      	bge.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	490e      	ldr	r1, [pc, #56]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	4906      	ldr	r1, [pc, #24]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008514:	4313      	orrs	r3, r2
 8008516:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008518:	7dbb      	ldrb	r3, [r7, #22]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	58024400 	.word	0x58024400

08008530 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008534:	f7ff f860 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8008538:	4602      	mov	r2, r0
 800853a:	4b06      	ldr	r3, [pc, #24]	; (8008554 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	091b      	lsrs	r3, r3, #4
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	4904      	ldr	r1, [pc, #16]	; (8008558 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008546:	5ccb      	ldrb	r3, [r1, r3]
 8008548:	f003 031f 	and.w	r3, r3, #31
 800854c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008550:	4618      	mov	r0, r3
 8008552:	bd80      	pop	{r7, pc}
 8008554:	58024400 	.word	0x58024400
 8008558:	08010f9c 	.word	0x08010f9c

0800855c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800855c:	b480      	push	{r7}
 800855e:	b089      	sub	sp, #36	; 0x24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008564:	4ba1      	ldr	r3, [pc, #644]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800856e:	4b9f      	ldr	r3, [pc, #636]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	0b1b      	lsrs	r3, r3, #12
 8008574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008578:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800857a:	4b9c      	ldr	r3, [pc, #624]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857e:	091b      	lsrs	r3, r3, #4
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008586:	4b99      	ldr	r3, [pc, #612]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	08db      	lsrs	r3, r3, #3
 800858c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	fb02 f303 	mul.w	r3, r2, r3
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 8111 	beq.w	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	f000 8083 	beq.w	80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	f200 80a1 	bhi.w	80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d056      	beq.n	8008674 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80085c6:	e099      	b.n	80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085c8:	4b88      	ldr	r3, [pc, #544]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0320 	and.w	r3, r3, #32
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d02d      	beq.n	8008630 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085d4:	4b85      	ldr	r3, [pc, #532]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	08db      	lsrs	r3, r3, #3
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	4a84      	ldr	r2, [pc, #528]	; (80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80085e0:	fa22 f303 	lsr.w	r3, r2, r3
 80085e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	ee07 3a90 	vmov	s15, r3
 80085ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085fe:	4b7b      	ldr	r3, [pc, #492]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008612:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800862e:	e087      	b.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800863e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008642:	4b6a      	ldr	r3, [pc, #424]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008652:	ed97 6a03 	vldr	s12, [r7, #12]
 8008656:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800865a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008672:	e065      	b.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008686:	4b59      	ldr	r3, [pc, #356]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008696:	ed97 6a03 	vldr	s12, [r7, #12]
 800869a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800869e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086b6:	e043      	b.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80086c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ca:	4b48      	ldr	r3, [pc, #288]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086da:	ed97 6a03 	vldr	s12, [r7, #12]
 80086de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086fa:	e021      	b.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800870a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870e:	4b37      	ldr	r3, [pc, #220]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008722:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800872e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800873e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008740:	4b2a      	ldr	r3, [pc, #168]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	0a5b      	lsrs	r3, r3, #9
 8008746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875a:	edd7 6a07 	vldr	s13, [r7, #28]
 800875e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008766:	ee17 2a90 	vmov	r2, s15
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800876e:	4b1f      	ldr	r3, [pc, #124]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008778:	ee07 3a90 	vmov	s15, r3
 800877c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008788:	edd7 6a07 	vldr	s13, [r7, #28]
 800878c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008794:	ee17 2a90 	vmov	r2, s15
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800879c:	4b13      	ldr	r3, [pc, #76]	; (80087ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	0e1b      	lsrs	r3, r3, #24
 80087a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c2:	ee17 2a90 	vmov	r2, s15
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087ca:	e008      	b.n	80087de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	609a      	str	r2, [r3, #8]
}
 80087de:	bf00      	nop
 80087e0:	3724      	adds	r7, #36	; 0x24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	58024400 	.word	0x58024400
 80087f0:	03d09000 	.word	0x03d09000
 80087f4:	46000000 	.word	0x46000000
 80087f8:	4c742400 	.word	0x4c742400
 80087fc:	4a742400 	.word	0x4a742400
 8008800:	4af42400 	.word	0x4af42400

08008804 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008804:	b480      	push	{r7}
 8008806:	b089      	sub	sp, #36	; 0x24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800880c:	4ba1      	ldr	r3, [pc, #644]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008816:	4b9f      	ldr	r3, [pc, #636]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	0d1b      	lsrs	r3, r3, #20
 800881c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008820:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008822:	4b9c      	ldr	r3, [pc, #624]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	0a1b      	lsrs	r3, r3, #8
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800882e:	4b99      	ldr	r3, [pc, #612]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	08db      	lsrs	r3, r3, #3
 8008834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	fb02 f303 	mul.w	r3, r2, r3
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 8111 	beq.w	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b02      	cmp	r3, #2
 8008856:	f000 8083 	beq.w	8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b02      	cmp	r3, #2
 800885e:	f200 80a1 	bhi.w	80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d056      	beq.n	800891c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800886e:	e099      	b.n	80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008870:	4b88      	ldr	r3, [pc, #544]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b00      	cmp	r3, #0
 800887a:	d02d      	beq.n	80088d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800887c:	4b85      	ldr	r3, [pc, #532]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	08db      	lsrs	r3, r3, #3
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	4a84      	ldr	r2, [pc, #528]	; (8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
 800888c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a6:	4b7b      	ldr	r3, [pc, #492]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088d6:	e087      	b.n	80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80088e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ea:	4b6a      	ldr	r3, [pc, #424]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800890e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800891a:	e065      	b.n	80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800892a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892e:	4b59      	ldr	r3, [pc, #356]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008942:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800895e:	e043      	b.n	80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800896e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008972:	4b48      	ldr	r3, [pc, #288]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008982:	ed97 6a03 	vldr	s12, [r7, #12]
 8008986:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800898a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a2:	e021      	b.n	80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b6:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80089e8:	4b2a      	ldr	r3, [pc, #168]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ec:	0a5b      	lsrs	r3, r3, #9
 80089ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a0e:	ee17 2a90 	vmov	r2, s15
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a16:	4b1f      	ldr	r3, [pc, #124]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	0c1b      	lsrs	r3, r3, #16
 8008a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a20:	ee07 3a90 	vmov	s15, r3
 8008a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a3c:	ee17 2a90 	vmov	r2, s15
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a44:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	0e1b      	lsrs	r3, r3, #24
 8008a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a6a:	ee17 2a90 	vmov	r2, s15
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a72:	e008      	b.n	8008a86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	609a      	str	r2, [r3, #8]
}
 8008a86:	bf00      	nop
 8008a88:	3724      	adds	r7, #36	; 0x24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	58024400 	.word	0x58024400
 8008a98:	03d09000 	.word	0x03d09000
 8008a9c:	46000000 	.word	0x46000000
 8008aa0:	4c742400 	.word	0x4c742400
 8008aa4:	4a742400 	.word	0x4a742400
 8008aa8:	4af42400 	.word	0x4af42400

08008aac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008aba:	4b53      	ldr	r3, [pc, #332]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d101      	bne.n	8008aca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e099      	b.n	8008bfe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aca:	4b4f      	ldr	r3, [pc, #316]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a4e      	ldr	r2, [pc, #312]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008ad0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad6:	f7f8 ff95 	bl	8001a04 <HAL_GetTick>
 8008ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008adc:	e008      	b.n	8008af0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ade:	f7f8 ff91 	bl	8001a04 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e086      	b.n	8008bfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008af0:	4b45      	ldr	r3, [pc, #276]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f0      	bne.n	8008ade <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008afc:	4b42      	ldr	r3, [pc, #264]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	031b      	lsls	r3, r3, #12
 8008b0a:	493f      	ldr	r1, [pc, #252]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	628b      	str	r3, [r1, #40]	; 0x28
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	025b      	lsls	r3, r3, #9
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	041b      	lsls	r3, r3, #16
 8008b2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	061b      	lsls	r3, r3, #24
 8008b3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b40:	4931      	ldr	r1, [pc, #196]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b46:	4b30      	ldr	r3, [pc, #192]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	492d      	ldr	r1, [pc, #180]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b58:	4b2b      	ldr	r3, [pc, #172]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	f023 0220 	bic.w	r2, r3, #32
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	4928      	ldr	r1, [pc, #160]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b6a:	4b27      	ldr	r3, [pc, #156]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4a26      	ldr	r2, [pc, #152]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b76:	4b24      	ldr	r3, [pc, #144]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b7a:	4b24      	ldr	r3, [pc, #144]	; (8008c0c <RCCEx_PLL2_Config+0x160>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	69d2      	ldr	r2, [r2, #28]
 8008b82:	00d2      	lsls	r2, r2, #3
 8008b84:	4920      	ldr	r1, [pc, #128]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b90:	f043 0310 	orr.w	r3, r3, #16
 8008b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d106      	bne.n	8008baa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	4a19      	ldr	r2, [pc, #100]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ba8:	e00f      	b.n	8008bca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d106      	bne.n	8008bbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bb0:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	4a14      	ldr	r2, [pc, #80]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bbc:	e005      	b.n	8008bca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	4a11      	ldr	r2, [pc, #68]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bca:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a0e      	ldr	r2, [pc, #56]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd6:	f7f8 ff15 	bl	8001a04 <HAL_GetTick>
 8008bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bdc:	e008      	b.n	8008bf0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bde:	f7f8 ff11 	bl	8001a04 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d901      	bls.n	8008bf0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e006      	b.n	8008bfe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <RCCEx_PLL2_Config+0x15c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0f0      	beq.n	8008bde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	ffff0007 	.word	0xffff0007

08008c10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c1e:	4b53      	ldr	r3, [pc, #332]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d101      	bne.n	8008c2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e099      	b.n	8008d62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c2e:	4b4f      	ldr	r3, [pc, #316]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a4e      	ldr	r2, [pc, #312]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c3a:	f7f8 fee3 	bl	8001a04 <HAL_GetTick>
 8008c3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c40:	e008      	b.n	8008c54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c42:	f7f8 fedf 	bl	8001a04 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e086      	b.n	8008d62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c54:	4b45      	ldr	r3, [pc, #276]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f0      	bne.n	8008c42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c60:	4b42      	ldr	r3, [pc, #264]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	051b      	lsls	r3, r3, #20
 8008c6e:	493f      	ldr	r1, [pc, #252]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	628b      	str	r3, [r1, #40]	; 0x28
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	025b      	lsls	r3, r3, #9
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	041b      	lsls	r3, r3, #16
 8008c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	061b      	lsls	r3, r3, #24
 8008ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ca4:	4931      	ldr	r1, [pc, #196]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008caa:	4b30      	ldr	r3, [pc, #192]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	492d      	ldr	r1, [pc, #180]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cbc:	4b2b      	ldr	r3, [pc, #172]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	4928      	ldr	r1, [pc, #160]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cce:	4b27      	ldr	r3, [pc, #156]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a26      	ldr	r2, [pc, #152]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cda:	4b24      	ldr	r3, [pc, #144]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cde:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <RCCEx_PLL3_Config+0x160>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	69d2      	ldr	r2, [r2, #28]
 8008ce6:	00d2      	lsls	r2, r2, #3
 8008ce8:	4920      	ldr	r1, [pc, #128]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cee:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d00:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d0c:	e00f      	b.n	8008d2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d106      	bne.n	8008d22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d14:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	4a14      	ldr	r2, [pc, #80]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d20:	e005      	b.n	8008d2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d22:	4b12      	ldr	r3, [pc, #72]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d26:	4a11      	ldr	r2, [pc, #68]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a0e      	ldr	r2, [pc, #56]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d3a:	f7f8 fe63 	bl	8001a04 <HAL_GetTick>
 8008d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d40:	e008      	b.n	8008d54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d42:	f7f8 fe5f 	bl	8001a04 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d901      	bls.n	8008d54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e006      	b.n	8008d62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d54:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <RCCEx_PLL3_Config+0x15c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0f0      	beq.n	8008d42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	ffff0007 	.word	0xffff0007

08008d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e049      	b.n	8008e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d106      	bne.n	8008da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7f8 fb2a 	bl	80013f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f000 f9ee 	bl	8009194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d001      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e04f      	b.n	8008edc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0201 	orr.w	r2, r2, #1
 8008e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a23      	ldr	r2, [pc, #140]	; (8008ee8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d01d      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x76>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e66:	d018      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x76>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1f      	ldr	r2, [pc, #124]	; (8008eec <HAL_TIM_Base_Start_IT+0xc8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d013      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x76>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00e      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x76>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d009      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x76>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1b      	ldr	r2, [pc, #108]	; (8008ef8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d004      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x76>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a19      	ldr	r2, [pc, #100]	; (8008efc <HAL_TIM_Base_Start_IT+0xd8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d115      	bne.n	8008ec6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b06      	cmp	r3, #6
 8008eaa:	d015      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0xb4>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb2:	d011      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0201 	orr.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec4:	e008      	b.n	8008ed8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0201 	orr.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e000      	b.n	8008eda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	40000400 	.word	0x40000400
 8008ef0:	40000800 	.word	0x40000800
 8008ef4:	40000c00 	.word	0x40000c00
 8008ef8:	40010400 	.word	0x40010400
 8008efc:	40001800 	.word	0x40001800
 8008f00:	00010007 	.word	0x00010007

08008f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d122      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d11b      	bne.n	8008f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0202 	mvn.w	r2, #2
 8008f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f905 	bl	8009156 <HAL_TIM_IC_CaptureCallback>
 8008f4c:	e005      	b.n	8008f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f8f7 	bl	8009142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f908 	bl	800916a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	f003 0304 	and.w	r3, r3, #4
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d122      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b04      	cmp	r3, #4
 8008f7a:	d11b      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0204 	mvn.w	r2, #4
 8008f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8db 	bl	8009156 <HAL_TIM_IC_CaptureCallback>
 8008fa0:	e005      	b.n	8008fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f8cd 	bl	8009142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f8de 	bl	800916a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0308 	and.w	r3, r3, #8
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d122      	bne.n	8009008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d11b      	bne.n	8009008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f06f 0208 	mvn.w	r2, #8
 8008fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2204      	movs	r2, #4
 8008fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8b1 	bl	8009156 <HAL_TIM_IC_CaptureCallback>
 8008ff4:	e005      	b.n	8009002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8a3 	bl	8009142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8b4 	bl	800916a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	f003 0310 	and.w	r3, r3, #16
 8009012:	2b10      	cmp	r3, #16
 8009014:	d122      	bne.n	800905c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f003 0310 	and.w	r3, r3, #16
 8009020:	2b10      	cmp	r3, #16
 8009022:	d11b      	bne.n	800905c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f06f 0210 	mvn.w	r2, #16
 800902c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2208      	movs	r2, #8
 8009032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f887 	bl	8009156 <HAL_TIM_IC_CaptureCallback>
 8009048:	e005      	b.n	8009056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f879 	bl	8009142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f88a 	bl	800916a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b01      	cmp	r3, #1
 8009068:	d10e      	bne.n	8009088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b01      	cmp	r3, #1
 8009076:	d107      	bne.n	8009088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f06f 0201 	mvn.w	r2, #1
 8009080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7f7 fee4 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b80      	cmp	r3, #128	; 0x80
 8009094:	d10e      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a0:	2b80      	cmp	r3, #128	; 0x80
 80090a2:	d107      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f99c 	bl	80093ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090c2:	d10e      	bne.n	80090e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ce:	2b80      	cmp	r3, #128	; 0x80
 80090d0:	d107      	bne.n	80090e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f98f 	bl	8009400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ec:	2b40      	cmp	r3, #64	; 0x40
 80090ee:	d10e      	bne.n	800910e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fa:	2b40      	cmp	r3, #64	; 0x40
 80090fc:	d107      	bne.n	800910e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f838 	bl	800917e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b20      	cmp	r3, #32
 800911a:	d10e      	bne.n	800913a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b20      	cmp	r3, #32
 8009128:	d107      	bne.n	800913a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f06f 0220 	mvn.w	r2, #32
 8009132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f94f 	bl	80093d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
	...

08009194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a40      	ldr	r2, [pc, #256]	; (80092a8 <TIM_Base_SetConfig+0x114>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d013      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b2:	d00f      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a3d      	ldr	r2, [pc, #244]	; (80092ac <TIM_Base_SetConfig+0x118>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00b      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a3c      	ldr	r2, [pc, #240]	; (80092b0 <TIM_Base_SetConfig+0x11c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d007      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a3b      	ldr	r2, [pc, #236]	; (80092b4 <TIM_Base_SetConfig+0x120>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d003      	beq.n	80091d4 <TIM_Base_SetConfig+0x40>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a3a      	ldr	r2, [pc, #232]	; (80092b8 <TIM_Base_SetConfig+0x124>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d108      	bne.n	80091e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a2f      	ldr	r2, [pc, #188]	; (80092a8 <TIM_Base_SetConfig+0x114>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d01f      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f4:	d01b      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a2c      	ldr	r2, [pc, #176]	; (80092ac <TIM_Base_SetConfig+0x118>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d017      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a2b      	ldr	r2, [pc, #172]	; (80092b0 <TIM_Base_SetConfig+0x11c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d013      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a2a      	ldr	r2, [pc, #168]	; (80092b4 <TIM_Base_SetConfig+0x120>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00f      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a29      	ldr	r2, [pc, #164]	; (80092b8 <TIM_Base_SetConfig+0x124>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00b      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a28      	ldr	r2, [pc, #160]	; (80092bc <TIM_Base_SetConfig+0x128>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d007      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a27      	ldr	r2, [pc, #156]	; (80092c0 <TIM_Base_SetConfig+0x12c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d003      	beq.n	800922e <TIM_Base_SetConfig+0x9a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a26      	ldr	r2, [pc, #152]	; (80092c4 <TIM_Base_SetConfig+0x130>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d108      	bne.n	8009240 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a10      	ldr	r2, [pc, #64]	; (80092a8 <TIM_Base_SetConfig+0x114>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00f      	beq.n	800928c <TIM_Base_SetConfig+0xf8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a12      	ldr	r2, [pc, #72]	; (80092b8 <TIM_Base_SetConfig+0x124>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00b      	beq.n	800928c <TIM_Base_SetConfig+0xf8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a11      	ldr	r2, [pc, #68]	; (80092bc <TIM_Base_SetConfig+0x128>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d007      	beq.n	800928c <TIM_Base_SetConfig+0xf8>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a10      	ldr	r2, [pc, #64]	; (80092c0 <TIM_Base_SetConfig+0x12c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_Base_SetConfig+0xf8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a0f      	ldr	r2, [pc, #60]	; (80092c4 <TIM_Base_SetConfig+0x130>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d103      	bne.n	8009294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	691a      	ldr	r2, [r3, #16]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	615a      	str	r2, [r3, #20]
}
 800929a:	bf00      	nop
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	40010000 	.word	0x40010000
 80092ac:	40000400 	.word	0x40000400
 80092b0:	40000800 	.word	0x40000800
 80092b4:	40000c00 	.word	0x40000c00
 80092b8:	40010400 	.word	0x40010400
 80092bc:	40014000 	.word	0x40014000
 80092c0:	40014400 	.word	0x40014400
 80092c4:	40014800 	.word	0x40014800

080092c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092dc:	2302      	movs	r3, #2
 80092de:	e068      	b.n	80093b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a2e      	ldr	r2, [pc, #184]	; (80093c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a2d      	ldr	r2, [pc, #180]	; (80093c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d108      	bne.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800931a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4313      	orrs	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a1e      	ldr	r2, [pc, #120]	; (80093c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d01d      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009352:	d018      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1b      	ldr	r2, [pc, #108]	; (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d013      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1a      	ldr	r2, [pc, #104]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00e      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d009      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a13      	ldr	r2, [pc, #76]	; (80093c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d004      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d10c      	bne.n	80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800938c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	4313      	orrs	r3, r2
 8009396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	40010000 	.word	0x40010000
 80093c4:	40010400 	.word	0x40010400
 80093c8:	40000400 	.word	0x40000400
 80093cc:	40000800 	.word	0x40000800
 80093d0:	40000c00 	.word	0x40000c00
 80093d4:	40001800 	.word	0x40001800

080093d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e042      	b.n	80094ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f8 f803 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2224      	movs	r2, #36	; 0x24
 8009442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0201 	bic.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fb9c 	bl	8009b94 <UART_SetConfig>
 800945c:	4603      	mov	r3, r0
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e022      	b.n	80094ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 f8f0 	bl	800a654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 f977 	bl	800a798 <UART_CheckIdleState>
 80094aa:	4603      	mov	r3, r0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08a      	sub	sp, #40	; 0x28
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	4613      	mov	r3, r2
 80094c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	f040 8083 	bne.w	80095d6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <HAL_UART_Transmit+0x28>
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e07b      	b.n	80095d8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_UART_Transmit+0x3a>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e074      	b.n	80095d8 <HAL_UART_Transmit+0x124>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2221      	movs	r2, #33	; 0x21
 8009502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009506:	f7f8 fa7d 	bl	8001a04 <HAL_GetTick>
 800950a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	88fa      	ldrh	r2, [r7, #6]
 8009510:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	88fa      	ldrh	r2, [r7, #6]
 8009518:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009524:	d108      	bne.n	8009538 <HAL_UART_Transmit+0x84>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d104      	bne.n	8009538 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	61bb      	str	r3, [r7, #24]
 8009536:	e003      	b.n	8009540 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800953c:	2300      	movs	r3, #0
 800953e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009548:	e02c      	b.n	80095a4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2200      	movs	r2, #0
 8009552:	2180      	movs	r1, #128	; 0x80
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f001 f96a 	bl	800a82e <UART_WaitOnFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e039      	b.n	80095d8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10b      	bne.n	8009582 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009578:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	3302      	adds	r3, #2
 800957e:	61bb      	str	r3, [r7, #24]
 8009580:	e007      	b.n	8009592 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	781a      	ldrb	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	3301      	adds	r3, #1
 8009590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1cc      	bne.n	800954a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2200      	movs	r2, #0
 80095b8:	2140      	movs	r1, #64	; 0x40
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f001 f937 	bl	800a82e <UART_WaitOnFlagUntilTimeout>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e006      	b.n	80095d8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e000      	b.n	80095d8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80095d6:	2302      	movs	r3, #2
  }
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009600:	69fa      	ldr	r2, [r7, #28]
 8009602:	f640 030f 	movw	r3, #2063	; 0x80f
 8009606:	4013      	ands	r3, r2
 8009608:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d118      	bne.n	8009642 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b00      	cmp	r3, #0
 8009618:	d013      	beq.n	8009642 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f003 0320 	and.w	r3, r3, #32
 8009620:	2b00      	cmp	r3, #0
 8009622:	d104      	bne.n	800962e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d009      	beq.n	8009642 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 8282 	beq.w	8009b3c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	4798      	blx	r3
      }
      return;
 8009640:	e27c      	b.n	8009b3c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 80ef 	beq.w	8009828 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4b73      	ldr	r3, [pc, #460]	; (800981c <HAL_UART_IRQHandler+0x23c>)
 800964e:	4013      	ands	r3, r2
 8009650:	2b00      	cmp	r3, #0
 8009652:	d105      	bne.n	8009660 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	4b72      	ldr	r3, [pc, #456]	; (8009820 <HAL_UART_IRQHandler+0x240>)
 8009658:	4013      	ands	r3, r2
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80e4 	beq.w	8009828 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d010      	beq.n	800968c <HAL_UART_IRQHandler+0xac>
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00b      	beq.n	800968c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2201      	movs	r2, #1
 800967a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009682:	f043 0201 	orr.w	r2, r3, #1
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d010      	beq.n	80096b8 <HAL_UART_IRQHandler+0xd8>
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00b      	beq.n	80096b8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2202      	movs	r2, #2
 80096a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096ae:	f043 0204 	orr.w	r2, r3, #4
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d010      	beq.n	80096e4 <HAL_UART_IRQHandler+0x104>
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2204      	movs	r2, #4
 80096d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096da:	f043 0202 	orr.w	r2, r3, #2
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f003 0308 	and.w	r3, r3, #8
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d015      	beq.n	800971a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	f003 0320 	and.w	r3, r3, #32
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d104      	bne.n	8009702 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4b48      	ldr	r3, [pc, #288]	; (800981c <HAL_UART_IRQHandler+0x23c>)
 80096fc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00b      	beq.n	800971a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2208      	movs	r2, #8
 8009708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009710:	f043 0208 	orr.w	r2, r3, #8
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009720:	2b00      	cmp	r3, #0
 8009722:	d011      	beq.n	8009748 <HAL_UART_IRQHandler+0x168>
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00c      	beq.n	8009748 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800973e:	f043 0220 	orr.w	r2, r3, #32
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 81f6 	beq.w	8009b40 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d011      	beq.n	8009782 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	f003 0320 	and.w	r3, r3, #32
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009788:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009794:	2b40      	cmp	r3, #64	; 0x40
 8009796:	d004      	beq.n	80097a2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d031      	beq.n	8009806 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 f8c4 	bl	800a930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b40      	cmp	r3, #64	; 0x40
 80097b4:	d123      	bne.n	80097fe <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097c4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d013      	beq.n	80097f6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d2:	4a14      	ldr	r2, [pc, #80]	; (8009824 <HAL_UART_IRQHandler+0x244>)
 80097d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097da:	4618      	mov	r0, r3
 80097dc:	f7f8 fd90 	bl	8002300 <HAL_DMA_Abort_IT>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d017      	beq.n	8009816 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f4:	e00f      	b.n	8009816 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f9b6 	bl	8009b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097fc:	e00b      	b.n	8009816 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f9b2 	bl	8009b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009804:	e007      	b.n	8009816 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f9ae 	bl	8009b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009814:	e194      	b.n	8009b40 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009816:	bf00      	nop
    return;
 8009818:	e192      	b.n	8009b40 <HAL_UART_IRQHandler+0x560>
 800981a:	bf00      	nop
 800981c:	10000001 	.word	0x10000001
 8009820:	04000120 	.word	0x04000120
 8009824:	0800a995 	.word	0x0800a995

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800982c:	2b01      	cmp	r3, #1
 800982e:	f040 810f 	bne.w	8009a50 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 8109 	beq.w	8009a50 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	f003 0310 	and.w	r3, r3, #16
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 8103 	beq.w	8009a50 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2210      	movs	r2, #16
 8009850:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985c:	2b40      	cmp	r3, #64	; 0x40
 800985e:	f040 80bb 	bne.w	80099d8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a96      	ldr	r2, [pc, #600]	; (8009ac4 <HAL_UART_IRQHandler+0x4e4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d059      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a94      	ldr	r2, [pc, #592]	; (8009ac8 <HAL_UART_IRQHandler+0x4e8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d053      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a92      	ldr	r2, [pc, #584]	; (8009acc <HAL_UART_IRQHandler+0x4ec>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d04d      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a90      	ldr	r2, [pc, #576]	; (8009ad0 <HAL_UART_IRQHandler+0x4f0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d047      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a8e      	ldr	r2, [pc, #568]	; (8009ad4 <HAL_UART_IRQHandler+0x4f4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d041      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a8c      	ldr	r2, [pc, #560]	; (8009ad8 <HAL_UART_IRQHandler+0x4f8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d03b      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a8a      	ldr	r2, [pc, #552]	; (8009adc <HAL_UART_IRQHandler+0x4fc>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d035      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a88      	ldr	r2, [pc, #544]	; (8009ae0 <HAL_UART_IRQHandler+0x500>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d02f      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a86      	ldr	r2, [pc, #536]	; (8009ae4 <HAL_UART_IRQHandler+0x504>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d029      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a84      	ldr	r2, [pc, #528]	; (8009ae8 <HAL_UART_IRQHandler+0x508>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d023      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a82      	ldr	r2, [pc, #520]	; (8009aec <HAL_UART_IRQHandler+0x50c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d01d      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a80      	ldr	r2, [pc, #512]	; (8009af0 <HAL_UART_IRQHandler+0x510>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d017      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a7e      	ldr	r2, [pc, #504]	; (8009af4 <HAL_UART_IRQHandler+0x514>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d011      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a7c      	ldr	r2, [pc, #496]	; (8009af8 <HAL_UART_IRQHandler+0x518>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00b      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a7a      	ldr	r2, [pc, #488]	; (8009afc <HAL_UART_IRQHandler+0x51c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d005      	beq.n	8009922 <HAL_UART_IRQHandler+0x342>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a78      	ldr	r2, [pc, #480]	; (8009b00 <HAL_UART_IRQHandler+0x520>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d105      	bne.n	800992e <HAL_UART_IRQHandler+0x34e>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	b29b      	uxth	r3, r3
 800992c:	e004      	b.n	8009938 <HAL_UART_IRQHandler+0x358>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	b29b      	uxth	r3, r3
 8009938:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800993a:	893b      	ldrh	r3, [r7, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8101 	beq.w	8009b44 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009948:	893a      	ldrh	r2, [r7, #8]
 800994a:	429a      	cmp	r2, r3
 800994c:	f080 80fa 	bcs.w	8009b44 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	893a      	ldrh	r2, [r7, #8]
 8009954:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009962:	d02b      	beq.n	80099bc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009972:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0201 	bic.w	r2, r2, #1
 8009982:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009992:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0210 	bic.w	r2, r2, #16
 80099b0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7f8 f984 	bl	8001cc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f8d3 	bl	8009b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099d6:	e0b5      	b.n	8009b44 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80a8 	beq.w	8009b48 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80099f8:	897b      	ldrh	r3, [r7, #10]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 80a4 	beq.w	8009b48 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a0e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6899      	ldr	r1, [r3, #8]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4b3a      	ldr	r3, [pc, #232]	; (8009b04 <HAL_UART_IRQHandler+0x524>)
 8009a1c:	400b      	ands	r3, r1
 8009a1e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f022 0210 	bic.w	r2, r2, #16
 8009a42:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a44:	897b      	ldrh	r3, [r7, #10]
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f897 	bl	8009b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a4e:	e07b      	b.n	8009b48 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <HAL_UART_IRQHandler+0x496>
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d008      	beq.n	8009a76 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 ffc0 	bl	800a9f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a74:	e06b      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d012      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d104      	bne.n	8009a94 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d008      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d057      	beq.n	8009b4c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	4798      	blx	r3
    }
    return;
 8009aa4:	e052      	b.n	8009b4c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d02b      	beq.n	8009b08 <HAL_UART_IRQHandler+0x528>
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d026      	beq.n	8009b08 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 ff80 	bl	800a9c0 <UART_EndTransmit_IT>
    return;
 8009ac0:	e045      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
 8009ac2:	bf00      	nop
 8009ac4:	40020010 	.word	0x40020010
 8009ac8:	40020028 	.word	0x40020028
 8009acc:	40020040 	.word	0x40020040
 8009ad0:	40020058 	.word	0x40020058
 8009ad4:	40020070 	.word	0x40020070
 8009ad8:	40020088 	.word	0x40020088
 8009adc:	400200a0 	.word	0x400200a0
 8009ae0:	400200b8 	.word	0x400200b8
 8009ae4:	40020410 	.word	0x40020410
 8009ae8:	40020428 	.word	0x40020428
 8009aec:	40020440 	.word	0x40020440
 8009af0:	40020458 	.word	0x40020458
 8009af4:	40020470 	.word	0x40020470
 8009af8:	40020488 	.word	0x40020488
 8009afc:	400204a0 	.word	0x400204a0
 8009b00:	400204b8 	.word	0x400204b8
 8009b04:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d008      	beq.n	8009b24 <HAL_UART_IRQHandler+0x544>
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 ff7d 	bl	800aa1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b22:	e014      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00f      	beq.n	8009b4e <HAL_UART_IRQHandler+0x56e>
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da0c      	bge.n	8009b4e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 ff67 	bl	800aa08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b3a:	e008      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
      return;
 8009b3c:	bf00      	nop
 8009b3e:	e006      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
    return;
 8009b40:	bf00      	nop
 8009b42:	e004      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
      return;
 8009b44:	bf00      	nop
 8009b46:	e002      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
      return;
 8009b48:	bf00      	nop
 8009b4a:	e000      	b.n	8009b4e <HAL_UART_IRQHandler+0x56e>
    return;
 8009b4c:	bf00      	nop
  }
}
 8009b4e:	3720      	adds	r7, #32
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b94:	b5b0      	push	{r4, r5, r7, lr}
 8009b96:	b08e      	sub	sp, #56	; 0x38
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	4bbf      	ldr	r3, [pc, #764]	; (8009ec0 <UART_SetConfig+0x32c>)
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	6812      	ldr	r2, [r2, #0]
 8009bc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4ab5      	ldr	r2, [pc, #724]	; (8009ec4 <UART_SetConfig+0x330>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d004      	beq.n	8009bfe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
 8009bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	4bb0      	ldr	r3, [pc, #704]	; (8009ec8 <UART_SetConfig+0x334>)
 8009c06:	4013      	ands	r3, r2
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6812      	ldr	r2, [r2, #0]
 8009c0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	f023 010f 	bic.w	r1, r3, #15
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4aa7      	ldr	r2, [pc, #668]	; (8009ecc <UART_SetConfig+0x338>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d176      	bne.n	8009d20 <UART_SetConfig+0x18c>
 8009c32:	4ba7      	ldr	r3, [pc, #668]	; (8009ed0 <UART_SetConfig+0x33c>)
 8009c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c3a:	2b28      	cmp	r3, #40	; 0x28
 8009c3c:	d86c      	bhi.n	8009d18 <UART_SetConfig+0x184>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0xb0>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009ce9 	.word	0x08009ce9
 8009c48:	08009d19 	.word	0x08009d19
 8009c4c:	08009d19 	.word	0x08009d19
 8009c50:	08009d19 	.word	0x08009d19
 8009c54:	08009d19 	.word	0x08009d19
 8009c58:	08009d19 	.word	0x08009d19
 8009c5c:	08009d19 	.word	0x08009d19
 8009c60:	08009d19 	.word	0x08009d19
 8009c64:	08009cf1 	.word	0x08009cf1
 8009c68:	08009d19 	.word	0x08009d19
 8009c6c:	08009d19 	.word	0x08009d19
 8009c70:	08009d19 	.word	0x08009d19
 8009c74:	08009d19 	.word	0x08009d19
 8009c78:	08009d19 	.word	0x08009d19
 8009c7c:	08009d19 	.word	0x08009d19
 8009c80:	08009d19 	.word	0x08009d19
 8009c84:	08009cf9 	.word	0x08009cf9
 8009c88:	08009d19 	.word	0x08009d19
 8009c8c:	08009d19 	.word	0x08009d19
 8009c90:	08009d19 	.word	0x08009d19
 8009c94:	08009d19 	.word	0x08009d19
 8009c98:	08009d19 	.word	0x08009d19
 8009c9c:	08009d19 	.word	0x08009d19
 8009ca0:	08009d19 	.word	0x08009d19
 8009ca4:	08009d01 	.word	0x08009d01
 8009ca8:	08009d19 	.word	0x08009d19
 8009cac:	08009d19 	.word	0x08009d19
 8009cb0:	08009d19 	.word	0x08009d19
 8009cb4:	08009d19 	.word	0x08009d19
 8009cb8:	08009d19 	.word	0x08009d19
 8009cbc:	08009d19 	.word	0x08009d19
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d09 	.word	0x08009d09
 8009cc8:	08009d19 	.word	0x08009d19
 8009ccc:	08009d19 	.word	0x08009d19
 8009cd0:	08009d19 	.word	0x08009d19
 8009cd4:	08009d19 	.word	0x08009d19
 8009cd8:	08009d19 	.word	0x08009d19
 8009cdc:	08009d19 	.word	0x08009d19
 8009ce0:	08009d19 	.word	0x08009d19
 8009ce4:	08009d11 	.word	0x08009d11
 8009ce8:	2301      	movs	r3, #1
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e222      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf6:	e21e      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	e21a      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d00:	2310      	movs	r3, #16
 8009d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d06:	e216      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d08:	2320      	movs	r3, #32
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e212      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d10:	2340      	movs	r3, #64	; 0x40
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e20e      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d18:	2380      	movs	r3, #128	; 0x80
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e20a      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a6b      	ldr	r2, [pc, #428]	; (8009ed4 <UART_SetConfig+0x340>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d130      	bne.n	8009d8c <UART_SetConfig+0x1f8>
 8009d2a:	4b69      	ldr	r3, [pc, #420]	; (8009ed0 <UART_SetConfig+0x33c>)
 8009d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	2b05      	cmp	r3, #5
 8009d34:	d826      	bhi.n	8009d84 <UART_SetConfig+0x1f0>
 8009d36:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <UART_SetConfig+0x1a8>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d55 	.word	0x08009d55
 8009d40:	08009d5d 	.word	0x08009d5d
 8009d44:	08009d65 	.word	0x08009d65
 8009d48:	08009d6d 	.word	0x08009d6d
 8009d4c:	08009d75 	.word	0x08009d75
 8009d50:	08009d7d 	.word	0x08009d7d
 8009d54:	2300      	movs	r3, #0
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e1ec      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d5c:	2304      	movs	r3, #4
 8009d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d62:	e1e8      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d64:	2308      	movs	r3, #8
 8009d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6a:	e1e4      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d72:	e1e0      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d74:	2320      	movs	r3, #32
 8009d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7a:	e1dc      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d7c:	2340      	movs	r3, #64	; 0x40
 8009d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d82:	e1d8      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d84:	2380      	movs	r3, #128	; 0x80
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	e1d4      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a51      	ldr	r2, [pc, #324]	; (8009ed8 <UART_SetConfig+0x344>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d130      	bne.n	8009df8 <UART_SetConfig+0x264>
 8009d96:	4b4e      	ldr	r3, [pc, #312]	; (8009ed0 <UART_SetConfig+0x33c>)
 8009d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	2b05      	cmp	r3, #5
 8009da0:	d826      	bhi.n	8009df0 <UART_SetConfig+0x25c>
 8009da2:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <UART_SetConfig+0x214>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009dc1 	.word	0x08009dc1
 8009dac:	08009dc9 	.word	0x08009dc9
 8009db0:	08009dd1 	.word	0x08009dd1
 8009db4:	08009dd9 	.word	0x08009dd9
 8009db8:	08009de1 	.word	0x08009de1
 8009dbc:	08009de9 	.word	0x08009de9
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e1b6      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e1b2      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009dd0:	2308      	movs	r3, #8
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e1ae      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009dd8:	2310      	movs	r3, #16
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e1aa      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009de0:	2320      	movs	r3, #32
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de6:	e1a6      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009de8:	2340      	movs	r3, #64	; 0x40
 8009dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dee:	e1a2      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009df0:	2380      	movs	r3, #128	; 0x80
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e19e      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a37      	ldr	r2, [pc, #220]	; (8009edc <UART_SetConfig+0x348>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d130      	bne.n	8009e64 <UART_SetConfig+0x2d0>
 8009e02:	4b33      	ldr	r3, [pc, #204]	; (8009ed0 <UART_SetConfig+0x33c>)
 8009e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	2b05      	cmp	r3, #5
 8009e0c:	d826      	bhi.n	8009e5c <UART_SetConfig+0x2c8>
 8009e0e:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <UART_SetConfig+0x280>)
 8009e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e14:	08009e2d 	.word	0x08009e2d
 8009e18:	08009e35 	.word	0x08009e35
 8009e1c:	08009e3d 	.word	0x08009e3d
 8009e20:	08009e45 	.word	0x08009e45
 8009e24:	08009e4d 	.word	0x08009e4d
 8009e28:	08009e55 	.word	0x08009e55
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e32:	e180      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009e34:	2304      	movs	r3, #4
 8009e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3a:	e17c      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009e3c:	2308      	movs	r3, #8
 8009e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e42:	e178      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009e44:	2310      	movs	r3, #16
 8009e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4a:	e174      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009e4c:	2320      	movs	r3, #32
 8009e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e52:	e170      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5a:	e16c      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009e5c:	2380      	movs	r3, #128	; 0x80
 8009e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e62:	e168      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1d      	ldr	r2, [pc, #116]	; (8009ee0 <UART_SetConfig+0x34c>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d142      	bne.n	8009ef4 <UART_SetConfig+0x360>
 8009e6e:	4b18      	ldr	r3, [pc, #96]	; (8009ed0 <UART_SetConfig+0x33c>)
 8009e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	2b05      	cmp	r3, #5
 8009e78:	d838      	bhi.n	8009eec <UART_SetConfig+0x358>
 8009e7a:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <UART_SetConfig+0x2ec>)
 8009e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e80:	08009e99 	.word	0x08009e99
 8009e84:	08009ea1 	.word	0x08009ea1
 8009e88:	08009ea9 	.word	0x08009ea9
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009eb9 	.word	0x08009eb9
 8009e94:	08009ee5 	.word	0x08009ee5
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e14a      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009ea0:	2304      	movs	r3, #4
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e146      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009ea8:	2308      	movs	r3, #8
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e142      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009eb0:	2310      	movs	r3, #16
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e13e      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009eb8:	2320      	movs	r3, #32
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e13a      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009ec0:	cfff69f3 	.word	0xcfff69f3
 8009ec4:	58000c00 	.word	0x58000c00
 8009ec8:	11fff4ff 	.word	0x11fff4ff
 8009ecc:	40011000 	.word	0x40011000
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	40004400 	.word	0x40004400
 8009ed8:	40004800 	.word	0x40004800
 8009edc:	40004c00 	.word	0x40004c00
 8009ee0:	40005000 	.word	0x40005000
 8009ee4:	2340      	movs	r3, #64	; 0x40
 8009ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eea:	e124      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009eec:	2380      	movs	r3, #128	; 0x80
 8009eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef2:	e120      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4acc      	ldr	r2, [pc, #816]	; (800a22c <UART_SetConfig+0x698>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d176      	bne.n	8009fec <UART_SetConfig+0x458>
 8009efe:	4bcc      	ldr	r3, [pc, #816]	; (800a230 <UART_SetConfig+0x69c>)
 8009f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f06:	2b28      	cmp	r3, #40	; 0x28
 8009f08:	d86c      	bhi.n	8009fe4 <UART_SetConfig+0x450>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0x37c>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009fb5 	.word	0x08009fb5
 8009f14:	08009fe5 	.word	0x08009fe5
 8009f18:	08009fe5 	.word	0x08009fe5
 8009f1c:	08009fe5 	.word	0x08009fe5
 8009f20:	08009fe5 	.word	0x08009fe5
 8009f24:	08009fe5 	.word	0x08009fe5
 8009f28:	08009fe5 	.word	0x08009fe5
 8009f2c:	08009fe5 	.word	0x08009fe5
 8009f30:	08009fbd 	.word	0x08009fbd
 8009f34:	08009fe5 	.word	0x08009fe5
 8009f38:	08009fe5 	.word	0x08009fe5
 8009f3c:	08009fe5 	.word	0x08009fe5
 8009f40:	08009fe5 	.word	0x08009fe5
 8009f44:	08009fe5 	.word	0x08009fe5
 8009f48:	08009fe5 	.word	0x08009fe5
 8009f4c:	08009fe5 	.word	0x08009fe5
 8009f50:	08009fc5 	.word	0x08009fc5
 8009f54:	08009fe5 	.word	0x08009fe5
 8009f58:	08009fe5 	.word	0x08009fe5
 8009f5c:	08009fe5 	.word	0x08009fe5
 8009f60:	08009fe5 	.word	0x08009fe5
 8009f64:	08009fe5 	.word	0x08009fe5
 8009f68:	08009fe5 	.word	0x08009fe5
 8009f6c:	08009fe5 	.word	0x08009fe5
 8009f70:	08009fcd 	.word	0x08009fcd
 8009f74:	08009fe5 	.word	0x08009fe5
 8009f78:	08009fe5 	.word	0x08009fe5
 8009f7c:	08009fe5 	.word	0x08009fe5
 8009f80:	08009fe5 	.word	0x08009fe5
 8009f84:	08009fe5 	.word	0x08009fe5
 8009f88:	08009fe5 	.word	0x08009fe5
 8009f8c:	08009fe5 	.word	0x08009fe5
 8009f90:	08009fd5 	.word	0x08009fd5
 8009f94:	08009fe5 	.word	0x08009fe5
 8009f98:	08009fe5 	.word	0x08009fe5
 8009f9c:	08009fe5 	.word	0x08009fe5
 8009fa0:	08009fe5 	.word	0x08009fe5
 8009fa4:	08009fe5 	.word	0x08009fe5
 8009fa8:	08009fe5 	.word	0x08009fe5
 8009fac:	08009fe5 	.word	0x08009fe5
 8009fb0:	08009fdd 	.word	0x08009fdd
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fba:	e0bc      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc2:	e0b8      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009fc4:	2308      	movs	r3, #8
 8009fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fca:	e0b4      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009fcc:	2310      	movs	r3, #16
 8009fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd2:	e0b0      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009fd4:	2320      	movs	r3, #32
 8009fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fda:	e0ac      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009fdc:	2340      	movs	r3, #64	; 0x40
 8009fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe2:	e0a8      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009fe4:	2380      	movs	r3, #128	; 0x80
 8009fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fea:	e0a4      	b.n	800a136 <UART_SetConfig+0x5a2>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a90      	ldr	r2, [pc, #576]	; (800a234 <UART_SetConfig+0x6a0>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d130      	bne.n	800a058 <UART_SetConfig+0x4c4>
 8009ff6:	4b8e      	ldr	r3, [pc, #568]	; (800a230 <UART_SetConfig+0x69c>)
 8009ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ffa:	f003 0307 	and.w	r3, r3, #7
 8009ffe:	2b05      	cmp	r3, #5
 800a000:	d826      	bhi.n	800a050 <UART_SetConfig+0x4bc>
 800a002:	a201      	add	r2, pc, #4	; (adr r2, 800a008 <UART_SetConfig+0x474>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a021 	.word	0x0800a021
 800a00c:	0800a029 	.word	0x0800a029
 800a010:	0800a031 	.word	0x0800a031
 800a014:	0800a039 	.word	0x0800a039
 800a018:	0800a041 	.word	0x0800a041
 800a01c:	0800a049 	.word	0x0800a049
 800a020:	2300      	movs	r3, #0
 800a022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a026:	e086      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a028:	2304      	movs	r3, #4
 800a02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02e:	e082      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a030:	2308      	movs	r3, #8
 800a032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a036:	e07e      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a038:	2310      	movs	r3, #16
 800a03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03e:	e07a      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a040:	2320      	movs	r3, #32
 800a042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a046:	e076      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a048:	2340      	movs	r3, #64	; 0x40
 800a04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04e:	e072      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a050:	2380      	movs	r3, #128	; 0x80
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e06e      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a76      	ldr	r2, [pc, #472]	; (800a238 <UART_SetConfig+0x6a4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d130      	bne.n	800a0c4 <UART_SetConfig+0x530>
 800a062:	4b73      	ldr	r3, [pc, #460]	; (800a230 <UART_SetConfig+0x69c>)
 800a064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	2b05      	cmp	r3, #5
 800a06c:	d826      	bhi.n	800a0bc <UART_SetConfig+0x528>
 800a06e:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <UART_SetConfig+0x4e0>)
 800a070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a074:	0800a08d 	.word	0x0800a08d
 800a078:	0800a095 	.word	0x0800a095
 800a07c:	0800a09d 	.word	0x0800a09d
 800a080:	0800a0a5 	.word	0x0800a0a5
 800a084:	0800a0ad 	.word	0x0800a0ad
 800a088:	0800a0b5 	.word	0x0800a0b5
 800a08c:	2300      	movs	r3, #0
 800a08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a092:	e050      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a094:	2304      	movs	r3, #4
 800a096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09a:	e04c      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a09c:	2308      	movs	r3, #8
 800a09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a2:	e048      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0aa:	e044      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a0ac:	2320      	movs	r3, #32
 800a0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b2:	e040      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a0b4:	2340      	movs	r3, #64	; 0x40
 800a0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ba:	e03c      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a0bc:	2380      	movs	r3, #128	; 0x80
 800a0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c2:	e038      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a5c      	ldr	r2, [pc, #368]	; (800a23c <UART_SetConfig+0x6a8>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d130      	bne.n	800a130 <UART_SetConfig+0x59c>
 800a0ce:	4b58      	ldr	r3, [pc, #352]	; (800a230 <UART_SetConfig+0x69c>)
 800a0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	2b05      	cmp	r3, #5
 800a0d8:	d826      	bhi.n	800a128 <UART_SetConfig+0x594>
 800a0da:	a201      	add	r2, pc, #4	; (adr r2, 800a0e0 <UART_SetConfig+0x54c>)
 800a0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e0:	0800a0f9 	.word	0x0800a0f9
 800a0e4:	0800a101 	.word	0x0800a101
 800a0e8:	0800a109 	.word	0x0800a109
 800a0ec:	0800a111 	.word	0x0800a111
 800a0f0:	0800a119 	.word	0x0800a119
 800a0f4:	0800a121 	.word	0x0800a121
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fe:	e01a      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a100:	2304      	movs	r3, #4
 800a102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a106:	e016      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a108:	2308      	movs	r3, #8
 800a10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10e:	e012      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a110:	2310      	movs	r3, #16
 800a112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a116:	e00e      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a118:	2320      	movs	r3, #32
 800a11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11e:	e00a      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e006      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a128:	2380      	movs	r3, #128	; 0x80
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e002      	b.n	800a136 <UART_SetConfig+0x5a2>
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a40      	ldr	r2, [pc, #256]	; (800a23c <UART_SetConfig+0x6a8>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	f040 80ef 	bne.w	800a320 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a146:	2b20      	cmp	r3, #32
 800a148:	dc46      	bgt.n	800a1d8 <UART_SetConfig+0x644>
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	f2c0 8081 	blt.w	800a252 <UART_SetConfig+0x6be>
 800a150:	3b02      	subs	r3, #2
 800a152:	2b1e      	cmp	r3, #30
 800a154:	d87d      	bhi.n	800a252 <UART_SetConfig+0x6be>
 800a156:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <UART_SetConfig+0x5c8>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a1df 	.word	0x0800a1df
 800a160:	0800a253 	.word	0x0800a253
 800a164:	0800a1e7 	.word	0x0800a1e7
 800a168:	0800a253 	.word	0x0800a253
 800a16c:	0800a253 	.word	0x0800a253
 800a170:	0800a253 	.word	0x0800a253
 800a174:	0800a1f7 	.word	0x0800a1f7
 800a178:	0800a253 	.word	0x0800a253
 800a17c:	0800a253 	.word	0x0800a253
 800a180:	0800a253 	.word	0x0800a253
 800a184:	0800a253 	.word	0x0800a253
 800a188:	0800a253 	.word	0x0800a253
 800a18c:	0800a253 	.word	0x0800a253
 800a190:	0800a253 	.word	0x0800a253
 800a194:	0800a207 	.word	0x0800a207
 800a198:	0800a253 	.word	0x0800a253
 800a19c:	0800a253 	.word	0x0800a253
 800a1a0:	0800a253 	.word	0x0800a253
 800a1a4:	0800a253 	.word	0x0800a253
 800a1a8:	0800a253 	.word	0x0800a253
 800a1ac:	0800a253 	.word	0x0800a253
 800a1b0:	0800a253 	.word	0x0800a253
 800a1b4:	0800a253 	.word	0x0800a253
 800a1b8:	0800a253 	.word	0x0800a253
 800a1bc:	0800a253 	.word	0x0800a253
 800a1c0:	0800a253 	.word	0x0800a253
 800a1c4:	0800a253 	.word	0x0800a253
 800a1c8:	0800a253 	.word	0x0800a253
 800a1cc:	0800a253 	.word	0x0800a253
 800a1d0:	0800a253 	.word	0x0800a253
 800a1d4:	0800a245 	.word	0x0800a245
 800a1d8:	2b40      	cmp	r3, #64	; 0x40
 800a1da:	d036      	beq.n	800a24a <UART_SetConfig+0x6b6>
 800a1dc:	e039      	b.n	800a252 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a1de:	f7fe f9a7 	bl	8008530 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1e4:	e03b      	b.n	800a25e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e6:	f107 0314 	add.w	r3, r7, #20
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe f9b6 	bl	800855c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1f4:	e033      	b.n	800a25e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe fb02 	bl	8008804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a204:	e02b      	b.n	800a25e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a206:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <UART_SetConfig+0x69c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d009      	beq.n	800a226 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <UART_SetConfig+0x69c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	08db      	lsrs	r3, r3, #3
 800a218:	f003 0303 	and.w	r3, r3, #3
 800a21c:	4a08      	ldr	r2, [pc, #32]	; (800a240 <UART_SetConfig+0x6ac>)
 800a21e:	fa22 f303 	lsr.w	r3, r2, r3
 800a222:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a224:	e01b      	b.n	800a25e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a226:	4b06      	ldr	r3, [pc, #24]	; (800a240 <UART_SetConfig+0x6ac>)
 800a228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a22a:	e018      	b.n	800a25e <UART_SetConfig+0x6ca>
 800a22c:	40011400 	.word	0x40011400
 800a230:	58024400 	.word	0x58024400
 800a234:	40007800 	.word	0x40007800
 800a238:	40007c00 	.word	0x40007c00
 800a23c:	58000c00 	.word	0x58000c00
 800a240:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a244:	4bc4      	ldr	r3, [pc, #784]	; (800a558 <UART_SetConfig+0x9c4>)
 800a246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a248:	e009      	b.n	800a25e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a250:	e005      	b.n	800a25e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a25c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 81da 	beq.w	800a61a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	4abc      	ldr	r2, [pc, #752]	; (800a55c <UART_SetConfig+0x9c8>)
 800a26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a270:	461a      	mov	r2, r3
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	fbb3 f3f2 	udiv	r3, r3, r2
 800a278:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	4613      	mov	r3, r2
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	4413      	add	r3, r2
 800a284:	6a3a      	ldr	r2, [r7, #32]
 800a286:	429a      	cmp	r2, r3
 800a288:	d305      	bcc.n	800a296 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a290:	6a3a      	ldr	r2, [r7, #32]
 800a292:	429a      	cmp	r2, r3
 800a294:	d903      	bls.n	800a29e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a29c:	e1bd      	b.n	800a61a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f04f 0100 	mov.w	r1, #0
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	4aac      	ldr	r2, [pc, #688]	; (800a55c <UART_SetConfig+0x9c8>)
 800a2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	f04f 0300 	mov.w	r3, #0
 800a2b6:	f7f6 f86b 	bl	8000390 <__aeabi_uldivmod>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4610      	mov	r0, r2
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f04f 0200 	mov.w	r2, #0
 800a2c6:	f04f 0300 	mov.w	r3, #0
 800a2ca:	020b      	lsls	r3, r1, #8
 800a2cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2d0:	0202      	lsls	r2, r0, #8
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	6849      	ldr	r1, [r1, #4]
 800a2d6:	0849      	lsrs	r1, r1, #1
 800a2d8:	4608      	mov	r0, r1
 800a2da:	f04f 0100 	mov.w	r1, #0
 800a2de:	1814      	adds	r4, r2, r0
 800a2e0:	eb43 0501 	adc.w	r5, r3, r1
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f04f 0300 	mov.w	r3, #0
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	f7f6 f84d 	bl	8000390 <__aeabi_uldivmod>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a304:	d308      	bcc.n	800a318 <UART_SetConfig+0x784>
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30c:	d204      	bcs.n	800a318 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	e180      	b.n	800a61a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a31e:	e17c      	b.n	800a61a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a328:	f040 80bf 	bne.w	800a4aa <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a32c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a330:	2b20      	cmp	r3, #32
 800a332:	dc49      	bgt.n	800a3c8 <UART_SetConfig+0x834>
 800a334:	2b00      	cmp	r3, #0
 800a336:	db7c      	blt.n	800a432 <UART_SetConfig+0x89e>
 800a338:	2b20      	cmp	r3, #32
 800a33a:	d87a      	bhi.n	800a432 <UART_SetConfig+0x89e>
 800a33c:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <UART_SetConfig+0x7b0>)
 800a33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a342:	bf00      	nop
 800a344:	0800a3cf 	.word	0x0800a3cf
 800a348:	0800a3d7 	.word	0x0800a3d7
 800a34c:	0800a433 	.word	0x0800a433
 800a350:	0800a433 	.word	0x0800a433
 800a354:	0800a3df 	.word	0x0800a3df
 800a358:	0800a433 	.word	0x0800a433
 800a35c:	0800a433 	.word	0x0800a433
 800a360:	0800a433 	.word	0x0800a433
 800a364:	0800a3ef 	.word	0x0800a3ef
 800a368:	0800a433 	.word	0x0800a433
 800a36c:	0800a433 	.word	0x0800a433
 800a370:	0800a433 	.word	0x0800a433
 800a374:	0800a433 	.word	0x0800a433
 800a378:	0800a433 	.word	0x0800a433
 800a37c:	0800a433 	.word	0x0800a433
 800a380:	0800a433 	.word	0x0800a433
 800a384:	0800a3ff 	.word	0x0800a3ff
 800a388:	0800a433 	.word	0x0800a433
 800a38c:	0800a433 	.word	0x0800a433
 800a390:	0800a433 	.word	0x0800a433
 800a394:	0800a433 	.word	0x0800a433
 800a398:	0800a433 	.word	0x0800a433
 800a39c:	0800a433 	.word	0x0800a433
 800a3a0:	0800a433 	.word	0x0800a433
 800a3a4:	0800a433 	.word	0x0800a433
 800a3a8:	0800a433 	.word	0x0800a433
 800a3ac:	0800a433 	.word	0x0800a433
 800a3b0:	0800a433 	.word	0x0800a433
 800a3b4:	0800a433 	.word	0x0800a433
 800a3b8:	0800a433 	.word	0x0800a433
 800a3bc:	0800a433 	.word	0x0800a433
 800a3c0:	0800a433 	.word	0x0800a433
 800a3c4:	0800a425 	.word	0x0800a425
 800a3c8:	2b40      	cmp	r3, #64	; 0x40
 800a3ca:	d02e      	beq.n	800a42a <UART_SetConfig+0x896>
 800a3cc:	e031      	b.n	800a432 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3ce:	f7fd f943 	bl	8007658 <HAL_RCC_GetPCLK1Freq>
 800a3d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3d4:	e033      	b.n	800a43e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3d6:	f7fd f955 	bl	8007684 <HAL_RCC_GetPCLK2Freq>
 800a3da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3dc:	e02f      	b.n	800a43e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3de:	f107 0314 	add.w	r3, r7, #20
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe f8ba 	bl	800855c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3ec:	e027      	b.n	800a43e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3ee:	f107 0308 	add.w	r3, r7, #8
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fa06 	bl	8008804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3fc:	e01f      	b.n	800a43e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3fe:	4b58      	ldr	r3, [pc, #352]	; (800a560 <UART_SetConfig+0x9cc>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d009      	beq.n	800a41e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a40a:	4b55      	ldr	r3, [pc, #340]	; (800a560 <UART_SetConfig+0x9cc>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	08db      	lsrs	r3, r3, #3
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	4a53      	ldr	r2, [pc, #332]	; (800a564 <UART_SetConfig+0x9d0>)
 800a416:	fa22 f303 	lsr.w	r3, r2, r3
 800a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a41c:	e00f      	b.n	800a43e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a41e:	4b51      	ldr	r3, [pc, #324]	; (800a564 <UART_SetConfig+0x9d0>)
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a422:	e00c      	b.n	800a43e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a424:	4b4c      	ldr	r3, [pc, #304]	; (800a558 <UART_SetConfig+0x9c4>)
 800a426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a428:	e009      	b.n	800a43e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a42a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a430:	e005      	b.n	800a43e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a432:	2300      	movs	r3, #0
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a43c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80ea 	beq.w	800a61a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44a:	4a44      	ldr	r2, [pc, #272]	; (800a55c <UART_SetConfig+0x9c8>)
 800a44c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a450:	461a      	mov	r2, r3
 800a452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a454:	fbb3 f3f2 	udiv	r3, r3, r2
 800a458:	005a      	lsls	r2, r3, #1
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	085b      	lsrs	r3, r3, #1
 800a460:	441a      	add	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	fbb2 f3f3 	udiv	r3, r2, r3
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	2b0f      	cmp	r3, #15
 800a472:	d916      	bls.n	800a4a2 <UART_SetConfig+0x90e>
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a47a:	d212      	bcs.n	800a4a2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f023 030f 	bic.w	r3, r3, #15
 800a484:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	b29a      	uxth	r2, r3
 800a492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a494:	4313      	orrs	r3, r2
 800a496:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a49e:	60da      	str	r2, [r3, #12]
 800a4a0:	e0bb      	b.n	800a61a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a4a8:	e0b7      	b.n	800a61a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	dc4a      	bgt.n	800a548 <UART_SetConfig+0x9b4>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f2c0 8086 	blt.w	800a5c4 <UART_SetConfig+0xa30>
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	f200 8083 	bhi.w	800a5c4 <UART_SetConfig+0xa30>
 800a4be:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <UART_SetConfig+0x930>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a54f 	.word	0x0800a54f
 800a4c8:	0800a569 	.word	0x0800a569
 800a4cc:	0800a5c5 	.word	0x0800a5c5
 800a4d0:	0800a5c5 	.word	0x0800a5c5
 800a4d4:	0800a571 	.word	0x0800a571
 800a4d8:	0800a5c5 	.word	0x0800a5c5
 800a4dc:	0800a5c5 	.word	0x0800a5c5
 800a4e0:	0800a5c5 	.word	0x0800a5c5
 800a4e4:	0800a581 	.word	0x0800a581
 800a4e8:	0800a5c5 	.word	0x0800a5c5
 800a4ec:	0800a5c5 	.word	0x0800a5c5
 800a4f0:	0800a5c5 	.word	0x0800a5c5
 800a4f4:	0800a5c5 	.word	0x0800a5c5
 800a4f8:	0800a5c5 	.word	0x0800a5c5
 800a4fc:	0800a5c5 	.word	0x0800a5c5
 800a500:	0800a5c5 	.word	0x0800a5c5
 800a504:	0800a591 	.word	0x0800a591
 800a508:	0800a5c5 	.word	0x0800a5c5
 800a50c:	0800a5c5 	.word	0x0800a5c5
 800a510:	0800a5c5 	.word	0x0800a5c5
 800a514:	0800a5c5 	.word	0x0800a5c5
 800a518:	0800a5c5 	.word	0x0800a5c5
 800a51c:	0800a5c5 	.word	0x0800a5c5
 800a520:	0800a5c5 	.word	0x0800a5c5
 800a524:	0800a5c5 	.word	0x0800a5c5
 800a528:	0800a5c5 	.word	0x0800a5c5
 800a52c:	0800a5c5 	.word	0x0800a5c5
 800a530:	0800a5c5 	.word	0x0800a5c5
 800a534:	0800a5c5 	.word	0x0800a5c5
 800a538:	0800a5c5 	.word	0x0800a5c5
 800a53c:	0800a5c5 	.word	0x0800a5c5
 800a540:	0800a5c5 	.word	0x0800a5c5
 800a544:	0800a5b7 	.word	0x0800a5b7
 800a548:	2b40      	cmp	r3, #64	; 0x40
 800a54a:	d037      	beq.n	800a5bc <UART_SetConfig+0xa28>
 800a54c:	e03a      	b.n	800a5c4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a54e:	f7fd f883 	bl	8007658 <HAL_RCC_GetPCLK1Freq>
 800a552:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a554:	e03c      	b.n	800a5d0 <UART_SetConfig+0xa3c>
 800a556:	bf00      	nop
 800a558:	003d0900 	.word	0x003d0900
 800a55c:	08010fac 	.word	0x08010fac
 800a560:	58024400 	.word	0x58024400
 800a564:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a568:	f7fd f88c 	bl	8007684 <HAL_RCC_GetPCLK2Freq>
 800a56c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a56e:	e02f      	b.n	800a5d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a570:	f107 0314 	add.w	r3, r7, #20
 800a574:	4618      	mov	r0, r3
 800a576:	f7fd fff1 	bl	800855c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a57e:	e027      	b.n	800a5d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe f93d 	bl	8008804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a58e:	e01f      	b.n	800a5d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a590:	4b2c      	ldr	r3, [pc, #176]	; (800a644 <UART_SetConfig+0xab0>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a59c:	4b29      	ldr	r3, [pc, #164]	; (800a644 <UART_SetConfig+0xab0>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	08db      	lsrs	r3, r3, #3
 800a5a2:	f003 0303 	and.w	r3, r3, #3
 800a5a6:	4a28      	ldr	r2, [pc, #160]	; (800a648 <UART_SetConfig+0xab4>)
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5ae:	e00f      	b.n	800a5d0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a5b0:	4b25      	ldr	r3, [pc, #148]	; (800a648 <UART_SetConfig+0xab4>)
 800a5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5b4:	e00c      	b.n	800a5d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5b6:	4b25      	ldr	r3, [pc, #148]	; (800a64c <UART_SetConfig+0xab8>)
 800a5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5ba:	e009      	b.n	800a5d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5c2:	e005      	b.n	800a5d0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a5ce:	bf00      	nop
    }

    if (pclk != 0U)
 800a5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d021      	beq.n	800a61a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	4a1d      	ldr	r2, [pc, #116]	; (800a650 <UART_SetConfig+0xabc>)
 800a5dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	085b      	lsrs	r3, r3, #1
 800a5ee:	441a      	add	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	2b0f      	cmp	r3, #15
 800a600:	d908      	bls.n	800a614 <UART_SetConfig+0xa80>
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a608:	d204      	bcs.n	800a614 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a610:	60da      	str	r2, [r3, #12]
 800a612:	e002      	b.n	800a61a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a636:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3738      	adds	r7, #56	; 0x38
 800a63e:	46bd      	mov	sp, r7
 800a640:	bdb0      	pop	{r4, r5, r7, pc}
 800a642:	bf00      	nop
 800a644:	58024400 	.word	0x58024400
 800a648:	03d09000 	.word	0x03d09000
 800a64c:	003d0900 	.word	0x003d0900
 800a650:	08010fac 	.word	0x08010fac

0800a654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00a      	beq.n	800a67e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	f003 0308 	and.w	r3, r3, #8
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00a      	beq.n	800a706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70a:	f003 0320 	and.w	r3, r3, #32
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00a      	beq.n	800a728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a730:	2b00      	cmp	r3, #0
 800a732:	d01a      	beq.n	800a76a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	430a      	orrs	r2, r1
 800a748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a74e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a752:	d10a      	bne.n	800a76a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	430a      	orrs	r2, r1
 800a768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00a      	beq.n	800a78c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	430a      	orrs	r2, r1
 800a78a:	605a      	str	r2, [r3, #4]
  }
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7a8:	f7f7 f92c 	bl	8001a04 <HAL_GetTick>
 800a7ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0308 	and.w	r3, r3, #8
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d10e      	bne.n	800a7da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f82f 	bl	800a82e <UART_WaitOnFlagUntilTimeout>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e025      	b.n	800a826 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d10e      	bne.n	800a806 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f819 	bl	800a82e <UART_WaitOnFlagUntilTimeout>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e00f      	b.n	800a826 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	603b      	str	r3, [r7, #0]
 800a83a:	4613      	mov	r3, r2
 800a83c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a83e:	e062      	b.n	800a906 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d05e      	beq.n	800a906 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a848:	f7f7 f8dc 	bl	8001a04 <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	429a      	cmp	r2, r3
 800a856:	d302      	bcc.n	800a85e <UART_WaitOnFlagUntilTimeout+0x30>
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d11d      	bne.n	800a89a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a86c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0201 	bic.w	r2, r2, #1
 800a87c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e045      	b.n	800a926 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d02e      	beq.n	800a906 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8b6:	d126      	bne.n	800a906 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 0201 	bic.w	r2, r2, #1
 800a8e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e00f      	b.n	800a926 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	69da      	ldr	r2, [r3, #28]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4013      	ands	r3, r2
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	429a      	cmp	r2, r3
 800a914:	bf0c      	ite	eq
 800a916:	2301      	moveq	r3, #1
 800a918:	2300      	movne	r3, #0
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	461a      	mov	r2, r3
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	429a      	cmp	r2, r3
 800a922:	d08d      	beq.n	800a840 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a946:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6899      	ldr	r1, [r3, #8]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <UART_EndRxTransfer+0x60>)
 800a954:	400b      	ands	r3, r1
 800a956:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d107      	bne.n	800a970 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0210 	bic.w	r2, r2, #16
 800a96e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	effffffe 	.word	0xeffffffe

0800a994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff f8d8 	bl	8009b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9b8:	bf00      	nop
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9d6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7ff f8b4 	bl	8009b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d101      	bne.n	800aa46 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa42:	2302      	movs	r3, #2
 800aa44:	e027      	b.n	800aa96 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2224      	movs	r2, #36	; 0x24
 800aa52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f022 0201 	bic.w	r2, r2, #1
 800aa6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2220      	movs	r2, #32
 800aa88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d101      	bne.n	800aaba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aab6:	2302      	movs	r3, #2
 800aab8:	e02d      	b.n	800ab16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2224      	movs	r2, #36	; 0x24
 800aac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 0201 	bic.w	r2, r2, #1
 800aae0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f850 	bl	800ab9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d101      	bne.n	800ab36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab32:	2302      	movs	r3, #2
 800ab34:	e02d      	b.n	800ab92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2224      	movs	r2, #36	; 0x24
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f022 0201 	bic.w	r2, r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f812 	bl	800ab9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2220      	movs	r2, #32
 800ab84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
	...

0800ab9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d108      	bne.n	800abbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abbc:	e031      	b.n	800ac22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abbe:	2310      	movs	r3, #16
 800abc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abc2:	2310      	movs	r3, #16
 800abc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	0e5b      	lsrs	r3, r3, #25
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f003 0307 	and.w	r3, r3, #7
 800abd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	0f5b      	lsrs	r3, r3, #29
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 0307 	and.w	r3, r3, #7
 800abe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
 800abe8:	7b3a      	ldrb	r2, [r7, #12]
 800abea:	4911      	ldr	r1, [pc, #68]	; (800ac30 <UARTEx_SetNbDataToProcess+0x94>)
 800abec:	5c8a      	ldrb	r2, [r1, r2]
 800abee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abf2:	7b3a      	ldrb	r2, [r7, #12]
 800abf4:	490f      	ldr	r1, [pc, #60]	; (800ac34 <UARTEx_SetNbDataToProcess+0x98>)
 800abf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	7b7a      	ldrb	r2, [r7, #13]
 800ac08:	4909      	ldr	r1, [pc, #36]	; (800ac30 <UARTEx_SetNbDataToProcess+0x94>)
 800ac0a:	5c8a      	ldrb	r2, [r1, r2]
 800ac0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac10:	7b7a      	ldrb	r2, [r7, #13]
 800ac12:	4908      	ldr	r1, [pc, #32]	; (800ac34 <UARTEx_SetNbDataToProcess+0x98>)
 800ac14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac16:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac22:	bf00      	nop
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	08010fc4 	.word	0x08010fc4
 800ac34:	08010fcc 	.word	0x08010fcc

0800ac38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac38:	b084      	sub	sp, #16
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	f107 001c 	add.w	r0, r7, #28
 800ac46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d120      	bne.n	800ac92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68da      	ldr	r2, [r3, #12]
 800ac60:	4b2a      	ldr	r3, [pc, #168]	; (800ad0c <USB_CoreInit+0xd4>)
 800ac62:	4013      	ands	r3, r2
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ac74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d105      	bne.n	800ac86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f990 	bl	800afac <USB_CoreReset>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73fb      	strb	r3, [r7, #15]
 800ac90:	e01a      	b.n	800acc8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f984 	bl	800afac <USB_CoreReset>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d106      	bne.n	800acbc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	639a      	str	r2, [r3, #56]	; 0x38
 800acba:	e005      	b.n	800acc8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	2b01      	cmp	r3, #1
 800accc:	d116      	bne.n	800acfc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800acdc:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <USB_CoreInit+0xd8>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f043 0206 	orr.w	r2, r3, #6
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f043 0220 	orr.w	r2, r3, #32
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad08:	b004      	add	sp, #16
 800ad0a:	4770      	bx	lr
 800ad0c:	ffbdffbf 	.word	0xffbdffbf
 800ad10:	03ee0000 	.word	0x03ee0000

0800ad14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f043 0201 	orr.w	r2, r3, #1
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b083      	sub	sp, #12
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f023 0201 	bic.w	r2, r3, #1
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d106      	bne.n	800ad84 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60da      	str	r2, [r3, #12]
 800ad82:	e00b      	b.n	800ad9c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	e001      	b.n	800ad9c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e003      	b.n	800ada4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ad9c:	2032      	movs	r0, #50	; 0x32
 800ad9e:	f7f6 fe3d 	bl	8001a1c <HAL_Delay>

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	019b      	lsls	r3, r3, #6
 800adbe:	f043 0220 	orr.w	r2, r3, #32
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3301      	adds	r3, #1
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4a09      	ldr	r2, [pc, #36]	; (800adf4 <USB_FlushTxFifo+0x48>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d901      	bls.n	800add8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e006      	b.n	800ade6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d0f0      	beq.n	800adc6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	00030d40 	.word	0x00030d40

0800adf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2210      	movs	r2, #16
 800ae08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4a09      	ldr	r2, [pc, #36]	; (800ae38 <USB_FlushRxFifo+0x40>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d901      	bls.n	800ae1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e006      	b.n	800ae2a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	f003 0310 	and.w	r3, r3, #16
 800ae24:	2b10      	cmp	r3, #16
 800ae26:	d0f0      	beq.n	800ae0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	00030d40 	.word	0x00030d40

0800ae3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b089      	sub	sp, #36	; 0x24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	4611      	mov	r1, r2
 800ae48:	461a      	mov	r2, r3
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	71fb      	strb	r3, [r7, #7]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ae5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d123      	bne.n	800aeaa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae62:	88bb      	ldrh	r3, [r7, #4]
 800ae64:	3303      	adds	r3, #3
 800ae66:	089b      	lsrs	r3, r3, #2
 800ae68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61bb      	str	r3, [r7, #24]
 800ae6e:	e018      	b.n	800aea2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	031a      	lsls	r2, r3, #12
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	4413      	add	r3, r2
 800ae78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	3301      	adds	r3, #1
 800ae88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	3301      	adds	r3, #1
 800ae94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d3e2      	bcc.n	800ae70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3724      	adds	r7, #36	; 0x24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b08b      	sub	sp, #44	; 0x2c
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aece:	88fb      	ldrh	r3, [r7, #6]
 800aed0:	089b      	lsrs	r3, r3, #2
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aed6:	88fb      	ldrh	r3, [r7, #6]
 800aed8:	f003 0303 	and.w	r3, r3, #3
 800aedc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aede:	2300      	movs	r3, #0
 800aee0:	623b      	str	r3, [r7, #32]
 800aee2:	e014      	b.n	800af0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	601a      	str	r2, [r3, #0]
    pDest++;
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	3301      	adds	r3, #1
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	3301      	adds	r3, #1
 800aefa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	3301      	adds	r3, #1
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af04:	3301      	adds	r3, #1
 800af06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	3301      	adds	r3, #1
 800af0c:	623b      	str	r3, [r7, #32]
 800af0e:	6a3a      	ldr	r2, [r7, #32]
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	429a      	cmp	r2, r3
 800af14:	d3e6      	bcc.n	800aee4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800af16:	8bfb      	ldrh	r3, [r7, #30]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01e      	beq.n	800af5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af26:	461a      	mov	r2, r3
 800af28:	f107 0310 	add.w	r3, r7, #16
 800af2c:	6812      	ldr	r2, [r2, #0]
 800af2e:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	00db      	lsls	r3, r3, #3
 800af38:	fa22 f303 	lsr.w	r3, r2, r3
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	701a      	strb	r2, [r3, #0]
      i++;
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	3301      	adds	r3, #1
 800af46:	623b      	str	r3, [r7, #32]
      pDest++;
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	3301      	adds	r3, #1
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800af4e:	8bfb      	ldrh	r3, [r7, #30]
 800af50:	3b01      	subs	r3, #1
 800af52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800af54:	8bfb      	ldrh	r3, [r7, #30]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1ea      	bne.n	800af30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	372c      	adds	r7, #44	; 0x2c
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	4013      	ands	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800af80:	68fb      	ldr	r3, [r7, #12]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	f003 0301 	and.w	r3, r3, #1
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
	...

0800afac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	3301      	adds	r3, #1
 800afbc:	60fb      	str	r3, [r7, #12]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	4a13      	ldr	r2, [pc, #76]	; (800b010 <USB_CoreReset+0x64>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d901      	bls.n	800afca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e01b      	b.n	800b002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	daf2      	bge.n	800afb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	f043 0201 	orr.w	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3301      	adds	r3, #1
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4a09      	ldr	r2, [pc, #36]	; (800b010 <USB_CoreReset+0x64>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d901      	bls.n	800aff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e006      	b.n	800b002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b01      	cmp	r3, #1
 800affe:	d0f0      	beq.n	800afe2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	00030d40 	.word	0x00030d40

0800b014 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b014:	b084      	sub	sp, #16
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	f107 001c 	add.w	r0, r7, #28
 800b022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b030:	461a      	mov	r2, r3
 800b032:	2300      	movs	r3, #0
 800b034:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b056:	2b00      	cmp	r3, #0
 800b058:	d018      	beq.n	800b08c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d10a      	bne.n	800b076 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b06e:	f043 0304 	orr.w	r3, r3, #4
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	e014      	b.n	800b0a0 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b084:	f023 0304 	bic.w	r3, r3, #4
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	e009      	b.n	800b0a0 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b09a:	f023 0304 	bic.w	r3, r3, #4
 800b09e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b0a0:	2110      	movs	r1, #16
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff fe82 	bl	800adac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff fea5 	bl	800adf8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	e015      	b.n	800b0e0 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d3e5      	bcc.n	800b0b4 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f8ac 	bl	800b248 <USB_DriveVbus>

  HAL_Delay(200U);
 800b0f0:	20c8      	movs	r0, #200	; 0xc8
 800b0f2:	f7f6 fc93 	bl	8001a1c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b102:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00b      	beq.n	800b128 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b116:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a14      	ldr	r2, [pc, #80]	; (800b16c <USB_HostInit+0x158>)
 800b11c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a13      	ldr	r2, [pc, #76]	; (800b170 <USB_HostInit+0x15c>)
 800b122:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b126:	e009      	b.n	800b13c <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2280      	movs	r2, #128	; 0x80
 800b12c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a10      	ldr	r2, [pc, #64]	; (800b174 <USB_HostInit+0x160>)
 800b132:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a10      	ldr	r2, [pc, #64]	; (800b178 <USB_HostInit+0x164>)
 800b138:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d105      	bne.n	800b14e <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	f043 0210 	orr.w	r2, r3, #16
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	699a      	ldr	r2, [r3, #24]
 800b152:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <USB_HostInit+0x168>)
 800b154:	4313      	orrs	r3, r2
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b166:	b004      	add	sp, #16
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	01000200 	.word	0x01000200
 800b170:	00e00300 	.word	0x00e00300
 800b174:	00600080 	.word	0x00600080
 800b178:	004000e0 	.word	0x004000e0
 800b17c:	a3200008 	.word	0xa3200008

0800b180 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b19e:	f023 0303 	bic.w	r3, r3, #3
 800b1a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	68f9      	ldr	r1, [r7, #12]
 800b1b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d107      	bne.n	800b1d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b1ce:	6053      	str	r3, [r2, #4]
 800b1d0:	e009      	b.n	800b1e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b1d2:	78fb      	ldrb	r3, [r7, #3]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d106      	bne.n	800b1e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f241 7370 	movw	r3, #6000	; 0x1770
 800b1e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b214:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b21e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b222:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b224:	2064      	movs	r0, #100	; 0x64
 800b226:	f7f6 fbf9 	bl	8001a1c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b236:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b238:	200a      	movs	r0, #10
 800b23a:	f7f6 fbef 	bl	8001a1c <HAL_Delay>

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b26c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d109      	bne.n	800b28c <USB_DriveVbus+0x44>
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d106      	bne.n	800b28c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b286:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b28a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b296:	d109      	bne.n	800b2ac <USB_DriveVbus+0x64>
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d106      	bne.n	800b2ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b2a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	0c5b      	lsrs	r3, r3, #17
 800b2d8:	f003 0303 	and.w	r3, r3, #3
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	b29b      	uxth	r3, r3
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3714      	adds	r7, #20
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
	...

0800b30c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	4608      	mov	r0, r1
 800b316:	4611      	mov	r1, r2
 800b318:	461a      	mov	r2, r3
 800b31a:	4603      	mov	r3, r0
 800b31c:	70fb      	strb	r3, [r7, #3]
 800b31e:	460b      	mov	r3, r1
 800b320:	70bb      	strb	r3, [r7, #2]
 800b322:	4613      	mov	r3, r2
 800b324:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b32e:	78fb      	ldrb	r3, [r7, #3]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	4413      	add	r3, r2
 800b336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b33a:	461a      	mov	r2, r3
 800b33c:	f04f 33ff 	mov.w	r3, #4294967295
 800b340:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b342:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b346:	2b03      	cmp	r3, #3
 800b348:	d87e      	bhi.n	800b448 <USB_HC_Init+0x13c>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <USB_HC_Init+0x44>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b361 	.word	0x0800b361
 800b354:	0800b40b 	.word	0x0800b40b
 800b358:	0800b361 	.word	0x0800b361
 800b35c:	0800b3cd 	.word	0x0800b3cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	4413      	add	r3, r2
 800b368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b36c:	461a      	mov	r2, r3
 800b36e:	f240 439d 	movw	r3, #1181	; 0x49d
 800b372:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	da10      	bge.n	800b39e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b37c:	78fb      	ldrb	r3, [r7, #3]
 800b37e:	015a      	lsls	r2, r3, #5
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	4413      	add	r3, r2
 800b384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	78fa      	ldrb	r2, [r7, #3]
 800b38c:	0151      	lsls	r1, r2, #5
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	440a      	add	r2, r1
 800b392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b39a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b39c:	e057      	b.n	800b44e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d051      	beq.n	800b44e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	78fa      	ldrb	r2, [r7, #3]
 800b3ba:	0151      	lsls	r1, r2, #5
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	440a      	add	r2, r1
 800b3c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b3c8:	60d3      	str	r3, [r2, #12]
      break;
 800b3ca:	e040      	b.n	800b44e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3d8:	461a      	mov	r2, r3
 800b3da:	f240 639d 	movw	r3, #1693	; 0x69d
 800b3de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b3e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	da34      	bge.n	800b452 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b3e8:	78fb      	ldrb	r3, [r7, #3]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	78fa      	ldrb	r2, [r7, #3]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b406:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b408:	e023      	b.n	800b452 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b40a:	78fb      	ldrb	r3, [r7, #3]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	4413      	add	r3, r2
 800b412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b416:	461a      	mov	r2, r3
 800b418:	f240 2325 	movw	r3, #549	; 0x225
 800b41c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b41e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b422:	2b00      	cmp	r3, #0
 800b424:	da17      	bge.n	800b456 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b426:	78fb      	ldrb	r3, [r7, #3]
 800b428:	015a      	lsls	r2, r3, #5
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	78fa      	ldrb	r2, [r7, #3]
 800b436:	0151      	lsls	r1, r2, #5
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	440a      	add	r2, r1
 800b43c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b440:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b444:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b446:	e006      	b.n	800b456 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	77fb      	strb	r3, [r7, #31]
      break;
 800b44c:	e004      	b.n	800b458 <USB_HC_Init+0x14c>
      break;
 800b44e:	bf00      	nop
 800b450:	e002      	b.n	800b458 <USB_HC_Init+0x14c>
      break;
 800b452:	bf00      	nop
 800b454:	e000      	b.n	800b458 <USB_HC_Init+0x14c>
      break;
 800b456:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b45e:	699a      	ldr	r2, [r3, #24]
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	2101      	movs	r1, #1
 800b468:	fa01 f303 	lsl.w	r3, r1, r3
 800b46c:	6939      	ldr	r1, [r7, #16]
 800b46e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b472:	4313      	orrs	r3, r2
 800b474:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b482:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b486:	2b00      	cmp	r3, #0
 800b488:	da03      	bge.n	800b492 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b48a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b48e:	61bb      	str	r3, [r7, #24]
 800b490:	e001      	b.n	800b496 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff ff0f 	bl	800b2ba <USB_GetHostSpeed>
 800b49c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b49e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d106      	bne.n	800b4b4 <USB_HC_Init+0x1a8>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d003      	beq.n	800b4b4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b4ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b4b0:	617b      	str	r3, [r7, #20]
 800b4b2:	e001      	b.n	800b4b8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b4b8:	787b      	ldrb	r3, [r7, #1]
 800b4ba:	059b      	lsls	r3, r3, #22
 800b4bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b4c0:	78bb      	ldrb	r3, [r7, #2]
 800b4c2:	02db      	lsls	r3, r3, #11
 800b4c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b4c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b4ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b4ce:	049b      	lsls	r3, r3, #18
 800b4d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b4d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b4d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b4d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b4dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b4e2:	78fb      	ldrb	r3, [r7, #3]
 800b4e4:	0159      	lsls	r1, r3, #5
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	440b      	add	r3, r1
 800b4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b4f4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b4f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d10f      	bne.n	800b51e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b4fe:	78fb      	ldrb	r3, [r7, #3]
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	4413      	add	r3, r2
 800b506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	78fa      	ldrb	r2, [r7, #3]
 800b50e:	0151      	lsls	r1, r2, #5
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	440a      	add	r2, r1
 800b514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b51c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b51e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3720      	adds	r7, #32
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08c      	sub	sp, #48	; 0x30
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b540:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b544:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d02d      	beq.n	800b5ae <USB_HC_StartXfer+0x86>
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	791b      	ldrb	r3, [r3, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d129      	bne.n	800b5ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d117      	bne.n	800b590 <USB_HC_StartXfer+0x68>
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	79db      	ldrb	r3, [r3, #7]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <USB_HC_StartXfer+0x48>
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	79db      	ldrb	r3, [r3, #7]
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d10f      	bne.n	800b590 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	6a3b      	ldr	r3, [r7, #32]
 800b576:	4413      	add	r3, r2
 800b578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	69fa      	ldr	r2, [r7, #28]
 800b580:	0151      	lsls	r1, r2, #5
 800b582:	6a3a      	ldr	r2, [r7, #32]
 800b584:	440a      	add	r2, r1
 800b586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b58e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b590:	79fb      	ldrb	r3, [r7, #7]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <USB_HC_StartXfer+0x86>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	795b      	ldrb	r3, [r3, #5]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d107      	bne.n	800b5ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	785b      	ldrb	r3, [r3, #1]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 fa2f 	bl	800ba08 <USB_DoPing>
      return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e0f8      	b.n	800b7a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d018      	beq.n	800b5e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	8912      	ldrh	r2, [r2, #8]
 800b5be:	4413      	add	r3, r2
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	8912      	ldrh	r2, [r2, #8]
 800b5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b5cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b5ce:	8b7b      	ldrh	r3, [r7, #26]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d90b      	bls.n	800b5ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b5d4:	8b7b      	ldrh	r3, [r7, #26]
 800b5d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b5d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	8912      	ldrh	r2, [r2, #8]
 800b5de:	fb02 f203 	mul.w	r2, r2, r3
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	611a      	str	r2, [r3, #16]
 800b5e6:	e001      	b.n	800b5ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	78db      	ldrb	r3, [r3, #3]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d007      	beq.n	800b604 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b5f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	8912      	ldrh	r2, [r2, #8]
 800b5fa:	fb02 f203 	mul.w	r2, r2, r3
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	611a      	str	r2, [r3, #16]
 800b602:	e003      	b.n	800b60c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	695a      	ldr	r2, [r3, #20]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b616:	04d9      	lsls	r1, r3, #19
 800b618:	4b63      	ldr	r3, [pc, #396]	; (800b7a8 <USB_HC_StartXfer+0x280>)
 800b61a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b61c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	7a9b      	ldrb	r3, [r3, #10]
 800b622:	075b      	lsls	r3, r3, #29
 800b624:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b628:	69f9      	ldr	r1, [r7, #28]
 800b62a:	0148      	lsls	r0, r1, #5
 800b62c:	6a39      	ldr	r1, [r7, #32]
 800b62e:	4401      	add	r1, r0
 800b630:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b634:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b636:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d009      	beq.n	800b652 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	68d9      	ldr	r1, [r3, #12]
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	015a      	lsls	r2, r3, #5
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	4413      	add	r3, r2
 800b64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b64e:	460a      	mov	r2, r1
 800b650:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bf0c      	ite	eq
 800b662:	2301      	moveq	r3, #1
 800b664:	2300      	movne	r3, #0
 800b666:	b2db      	uxtb	r3, r3
 800b668:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	6a3b      	ldr	r3, [r7, #32]
 800b670:	4413      	add	r3, r2
 800b672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	69fa      	ldr	r2, [r7, #28]
 800b67a:	0151      	lsls	r1, r2, #5
 800b67c:	6a3a      	ldr	r2, [r7, #32]
 800b67e:	440a      	add	r2, r1
 800b680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b684:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b688:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	015a      	lsls	r2, r3, #5
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	4413      	add	r3, r2
 800b692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	7e7b      	ldrb	r3, [r7, #25]
 800b69a:	075b      	lsls	r3, r3, #29
 800b69c:	69f9      	ldr	r1, [r7, #28]
 800b69e:	0148      	lsls	r0, r1, #5
 800b6a0:	6a39      	ldr	r1, [r7, #32]
 800b6a2:	4401      	add	r1, r0
 800b6a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	015a      	lsls	r2, r3, #5
 800b6b0:	6a3b      	ldr	r3, [r7, #32]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	78db      	ldrb	r3, [r3, #3]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6d2:	613b      	str	r3, [r7, #16]
 800b6d4:	e003      	b.n	800b6de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b6dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b6e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	015a      	lsls	r2, r3, #5
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	e04e      	b.n	800b7a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	78db      	ldrb	r3, [r3, #3]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d149      	bne.n	800b79e <USB_HC_StartXfer+0x276>
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d045      	beq.n	800b79e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	79db      	ldrb	r3, [r3, #7]
 800b716:	2b03      	cmp	r3, #3
 800b718:	d830      	bhi.n	800b77c <USB_HC_StartXfer+0x254>
 800b71a:	a201      	add	r2, pc, #4	; (adr r2, 800b720 <USB_HC_StartXfer+0x1f8>)
 800b71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b755 	.word	0x0800b755
 800b728:	0800b731 	.word	0x0800b731
 800b72c:	0800b755 	.word	0x0800b755
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	3303      	adds	r3, #3
 800b736:	089b      	lsrs	r3, r3, #2
 800b738:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b73a:	8afa      	ldrh	r2, [r7, #22]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	b29b      	uxth	r3, r3
 800b742:	429a      	cmp	r2, r3
 800b744:	d91c      	bls.n	800b780 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	f043 0220 	orr.w	r2, r3, #32
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	619a      	str	r2, [r3, #24]
        }
        break;
 800b752:	e015      	b.n	800b780 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	3303      	adds	r3, #3
 800b75a:	089b      	lsrs	r3, r3, #2
 800b75c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b75e:	8afa      	ldrh	r2, [r7, #22]
 800b760:	6a3b      	ldr	r3, [r7, #32]
 800b762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d90a      	bls.n	800b784 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	619a      	str	r2, [r3, #24]
        }
        break;
 800b77a:	e003      	b.n	800b784 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b77c:	bf00      	nop
 800b77e:	e002      	b.n	800b786 <USB_HC_StartXfer+0x25e>
        break;
 800b780:	bf00      	nop
 800b782:	e000      	b.n	800b786 <USB_HC_StartXfer+0x25e>
        break;
 800b784:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	68d9      	ldr	r1, [r3, #12]
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	785a      	ldrb	r2, [r3, #1]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	b29b      	uxth	r3, r3
 800b794:	2000      	movs	r0, #0
 800b796:	9000      	str	r0, [sp, #0]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff fb4f 	bl	800ae3c <USB_WritePacket>
  }

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3728      	adds	r7, #40	; 0x28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	1ff80000 	.word	0x1ff80000

0800b7ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7be:	695b      	ldr	r3, [r3, #20]
 800b7c0:	b29b      	uxth	r3, r3
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b089      	sub	sp, #36	; 0x24
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800b7de:	78fb      	ldrb	r3, [r7, #3]
 800b7e0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	015a      	lsls	r2, r3, #5
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	0c9b      	lsrs	r3, r3, #18
 800b7f6:	f003 0303 	and.w	r3, r3, #3
 800b7fa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	4413      	add	r3, r2
 800b804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	0fdb      	lsrs	r3, r3, #31
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f003 0320 	and.w	r3, r3, #32
 800b81a:	2b20      	cmp	r3, #32
 800b81c:	d104      	bne.n	800b828 <USB_HC_Halt+0x5a>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b824:	2300      	movs	r3, #0
 800b826:	e0e8      	b.n	800b9fa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <USB_HC_Halt+0x66>
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d173      	bne.n	800b91c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	0151      	lsls	r1, r2, #5
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	440a      	add	r2, r1
 800b84a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b84e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b852:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	f003 0320 	and.w	r3, r3, #32
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f040 80cb 	bne.w	800b9f8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d143      	bne.n	800b8f6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	015a      	lsls	r2, r3, #5
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	4413      	add	r3, r2
 800b876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	0151      	lsls	r1, r2, #5
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	440a      	add	r2, r1
 800b884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b88c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	4413      	add	r3, r2
 800b896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	697a      	ldr	r2, [r7, #20]
 800b89e:	0151      	lsls	r1, r2, #5
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	440a      	add	r2, r1
 800b8a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	015a      	lsls	r2, r3, #5
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	0151      	lsls	r1, r2, #5
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	440a      	add	r2, r1
 800b8c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8cc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	61fb      	str	r3, [r7, #28]
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8da:	d81d      	bhi.n	800b918 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8f2:	d0ec      	beq.n	800b8ce <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b8f4:	e080      	b.n	800b9f8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	0151      	lsls	r1, r2, #5
 800b908:	69ba      	ldr	r2, [r7, #24]
 800b90a:	440a      	add	r2, r1
 800b90c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b914:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b916:	e06f      	b.n	800b9f8 <USB_HC_Halt+0x22a>
            break;
 800b918:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b91a:	e06d      	b.n	800b9f8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	4413      	add	r3, r2
 800b924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	0151      	lsls	r1, r2, #5
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	440a      	add	r2, r1
 800b932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b93a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d143      	bne.n	800b9d4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	4413      	add	r3, r2
 800b954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	0151      	lsls	r1, r2, #5
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	440a      	add	r2, r1
 800b962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b96a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	4413      	add	r3, r2
 800b974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	0151      	lsls	r1, r2, #5
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	440a      	add	r2, r1
 800b982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b98a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	4413      	add	r3, r2
 800b994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	0151      	lsls	r1, r2, #5
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	440a      	add	r2, r1
 800b9a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9aa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	61fb      	str	r3, [r7, #28]
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9b8:	d81d      	bhi.n	800b9f6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	015a      	lsls	r2, r3, #5
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9d0:	d0ec      	beq.n	800b9ac <USB_HC_Halt+0x1de>
 800b9d2:	e011      	b.n	800b9f8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	0151      	lsls	r1, r2, #5
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	440a      	add	r2, r1
 800b9ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	e000      	b.n	800b9f8 <USB_HC_Halt+0x22a>
          break;
 800b9f6:	bf00      	nop
    }
  }

  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3724      	adds	r7, #36	; 0x24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
	...

0800ba08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ba18:	78fb      	ldrb	r3, [r7, #3]
 800ba1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	04da      	lsls	r2, r3, #19
 800ba24:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <USB_DoPing+0x74>)
 800ba26:	4013      	ands	r3, r2
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	0151      	lsls	r1, r2, #5
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	440a      	add	r2, r1
 800ba30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba66:	461a      	mov	r2, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	1ff80000 	.word	0x1ff80000

0800ba80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff f950 	bl	800ad36 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ba96:	2110      	movs	r1, #16
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff f987 	bl	800adac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff f9aa 	bl	800adf8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800baa4:	2300      	movs	r3, #0
 800baa6:	613b      	str	r3, [r7, #16]
 800baa8:	e01f      	b.n	800baea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	015a      	lsls	r2, r3, #5
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	4413      	add	r3, r2
 800bab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bac8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bad0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	015a      	lsls	r2, r3, #5
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4413      	add	r3, r2
 800bada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bade:	461a      	mov	r2, r3
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	3301      	adds	r3, #1
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b0f      	cmp	r3, #15
 800baee:	d9dc      	bls.n	800baaa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800baf0:	2300      	movs	r3, #0
 800baf2:	613b      	str	r3, [r7, #16]
 800baf4:	e034      	b.n	800bb60 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	3301      	adds	r3, #1
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb3c:	d80c      	bhi.n	800bb58 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	015a      	lsls	r2, r3, #5
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4413      	add	r3, r2
 800bb46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb54:	d0ec      	beq.n	800bb30 <USB_StopHost+0xb0>
 800bb56:	e000      	b.n	800bb5a <USB_StopHost+0xda>
        break;
 800bb58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	613b      	str	r3, [r7, #16]
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	2b0f      	cmp	r3, #15
 800bb64:	d9c7      	bls.n	800baf6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff f8c9 	bl	800ad14 <USB_EnableGlobalInt>

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b089      	sub	sp, #36	; 0x24
 800bb90:	af04      	add	r7, sp, #16
 800bb92:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bb94:	2301      	movs	r3, #1
 800bb96:	2202      	movs	r2, #2
 800bb98:	2102      	movs	r1, #2
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fccc 	bl	800c538 <USBH_FindInterface>
 800bba0:	4603      	mov	r3, r0
 800bba2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
 800bba6:	2bff      	cmp	r3, #255	; 0xff
 800bba8:	d002      	beq.n	800bbb0 <USBH_CDC_InterfaceInit+0x24>
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d901      	bls.n	800bbb4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	e13d      	b.n	800be30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fca1 	bl	800c500 <USBH_SelectInterface>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	e131      	b.n	800be30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bbd2:	2050      	movs	r0, #80	; 0x50
 800bbd4:	f002 fb40 	bl	800e258 <malloc>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbe2:	69db      	ldr	r3, [r3, #28]
 800bbe4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bbec:	2302      	movs	r3, #2
 800bbee:	e11f      	b.n	800be30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bbf0:	2250      	movs	r2, #80	; 0x50
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	68b8      	ldr	r0, [r7, #8]
 800bbf6:	f002 fb3f 	bl	800e278 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	211a      	movs	r1, #26
 800bc00:	fb01 f303 	mul.w	r3, r1, r3
 800bc04:	4413      	add	r3, r2
 800bc06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b25b      	sxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	da15      	bge.n	800bc3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	211a      	movs	r1, #26
 800bc18:	fb01 f303 	mul.w	r3, r1, r3
 800bc1c:	4413      	add	r3, r2
 800bc1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc22:	781a      	ldrb	r2, [r3, #0]
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	211a      	movs	r1, #26
 800bc2e:	fb01 f303 	mul.w	r3, r1, r3
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bc38:	881a      	ldrh	r2, [r3, #0]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	785b      	ldrb	r3, [r3, #1]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f001 fe98 	bl	800d97a <USBH_AllocPipe>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	7819      	ldrb	r1, [r3, #0]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	7858      	ldrb	r0, [r3, #1]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	8952      	ldrh	r2, [r2, #10]
 800bc6a:	9202      	str	r2, [sp, #8]
 800bc6c:	2203      	movs	r2, #3
 800bc6e:	9201      	str	r2, [sp, #4]
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	4623      	mov	r3, r4
 800bc74:	4602      	mov	r2, r0
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f001 fe50 	bl	800d91c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2200      	movs	r2, #0
 800bc82:	4619      	mov	r1, r3
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f002 fa39 	bl	800e0fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	210a      	movs	r1, #10
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fc51 	bl	800c538 <USBH_FindInterface>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	2bff      	cmp	r3, #255	; 0xff
 800bc9e:	d002      	beq.n	800bca6 <USBH_CDC_InterfaceInit+0x11a>
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d901      	bls.n	800bcaa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bca6:	2302      	movs	r3, #2
 800bca8:	e0c2      	b.n	800be30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	211a      	movs	r1, #26
 800bcb0:	fb01 f303 	mul.w	r3, r1, r3
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	b25b      	sxtb	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	da16      	bge.n	800bcf0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	211a      	movs	r1, #26
 800bcc8:	fb01 f303 	mul.w	r3, r1, r3
 800bccc:	4413      	add	r3, r2
 800bcce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bcd2:	781a      	ldrb	r2, [r3, #0]
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	211a      	movs	r1, #26
 800bcde:	fb01 f303 	mul.w	r3, r1, r3
 800bce2:	4413      	add	r3, r2
 800bce4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bce8:	881a      	ldrh	r2, [r3, #0]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	835a      	strh	r2, [r3, #26]
 800bcee:	e015      	b.n	800bd1c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	211a      	movs	r1, #26
 800bcf6:	fb01 f303 	mul.w	r3, r1, r3
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd00:	781a      	ldrb	r2, [r3, #0]
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	211a      	movs	r1, #26
 800bd0c:	fb01 f303 	mul.w	r3, r1, r3
 800bd10:	4413      	add	r3, r2
 800bd12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bd16:	881a      	ldrh	r2, [r3, #0]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	211a      	movs	r1, #26
 800bd22:	fb01 f303 	mul.w	r3, r1, r3
 800bd26:	4413      	add	r3, r2
 800bd28:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b25b      	sxtb	r3, r3
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	da16      	bge.n	800bd62 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	211a      	movs	r1, #26
 800bd3a:	fb01 f303 	mul.w	r3, r1, r3
 800bd3e:	4413      	add	r3, r2
 800bd40:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bd44:	781a      	ldrb	r2, [r3, #0]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	211a      	movs	r1, #26
 800bd50:	fb01 f303 	mul.w	r3, r1, r3
 800bd54:	4413      	add	r3, r2
 800bd56:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bd5a:	881a      	ldrh	r2, [r3, #0]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	835a      	strh	r2, [r3, #26]
 800bd60:	e015      	b.n	800bd8e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	211a      	movs	r1, #26
 800bd68:	fb01 f303 	mul.w	r3, r1, r3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	211a      	movs	r1, #26
 800bd7e:	fb01 f303 	mul.w	r3, r1, r3
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bd88:	881a      	ldrh	r2, [r3, #0]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	7b9b      	ldrb	r3, [r3, #14]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f001 fdf0 	bl	800d97a <USBH_AllocPipe>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	7bdb      	ldrb	r3, [r3, #15]
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f001 fde6 	bl	800d97a <USBH_AllocPipe>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	7b59      	ldrb	r1, [r3, #13]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	7b98      	ldrb	r0, [r3, #14]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	8b12      	ldrh	r2, [r2, #24]
 800bdce:	9202      	str	r2, [sp, #8]
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	9201      	str	r2, [sp, #4]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	4623      	mov	r3, r4
 800bdd8:	4602      	mov	r2, r0
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f001 fd9e 	bl	800d91c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	7b19      	ldrb	r1, [r3, #12]
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	7bd8      	ldrb	r0, [r3, #15]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	8b52      	ldrh	r2, [r2, #26]
 800bdf8:	9202      	str	r2, [sp, #8]
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	9201      	str	r2, [sp, #4]
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	4623      	mov	r3, r4
 800be02:	4602      	mov	r2, r0
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f001 fd89 	bl	800d91c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	7b5b      	ldrb	r3, [r3, #13]
 800be16:	2200      	movs	r2, #0
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f002 f96e 	bl	800e0fc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	7b1b      	ldrb	r3, [r3, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f002 f967 	bl	800e0fc <USBH_LL_SetToggle>

  return USBH_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	bd90      	pop	{r4, r7, pc}

0800be38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00e      	beq.n	800be70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f001 fd7e 	bl	800d95a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 fda9 	bl	800d9bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	7b1b      	ldrb	r3, [r3, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00e      	beq.n	800be96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	7b1b      	ldrb	r3, [r3, #12]
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f001 fd6b 	bl	800d95a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	7b1b      	ldrb	r3, [r3, #12]
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f001 fd96 	bl	800d9bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	7b5b      	ldrb	r3, [r3, #13]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00e      	beq.n	800bebc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7b5b      	ldrb	r3, [r3, #13]
 800bea2:	4619      	mov	r1, r3
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f001 fd58 	bl	800d95a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	7b5b      	ldrb	r3, [r3, #13]
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f001 fd83 	bl	800d9bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bec2:	69db      	ldr	r3, [r3, #28]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00b      	beq.n	800bee0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bece:	69db      	ldr	r3, [r3, #28]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f002 f9c9 	bl	800e268 <free>
    phost->pActiveClass->pData = 0U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bedc:	2200      	movs	r2, #0
 800bede:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b084      	sub	sp, #16
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3340      	adds	r3, #64	; 0x40
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f8b1 	bl	800c06a <GetLineCoding>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bf0c:	7afb      	ldrb	r3, [r7, #11]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d105      	bne.n	800bf1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf18:	2102      	movs	r1, #2
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bf1e:	7afb      	ldrb	r3, [r7, #11]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bf30:	2301      	movs	r3, #1
 800bf32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d877      	bhi.n	800c03c <USBH_CDC_Process+0x114>
 800bf4c:	a201      	add	r2, pc, #4	; (adr r2, 800bf54 <USBH_CDC_Process+0x2c>)
 800bf4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf52:	bf00      	nop
 800bf54:	0800bf69 	.word	0x0800bf69
 800bf58:	0800bf6f 	.word	0x0800bf6f
 800bf5c:	0800bf9f 	.word	0x0800bf9f
 800bf60:	0800c013 	.word	0x0800c013
 800bf64:	0800c021 	.word	0x0800c021
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf6c:	e06d      	b.n	800c04a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f897 	bl	800c0a8 <SetLineCoding>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bf7e:	7bbb      	ldrb	r3, [r7, #14]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d104      	bne.n	800bf8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2202      	movs	r2, #2
 800bf88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bf8c:	e058      	b.n	800c040 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800bf8e:	7bbb      	ldrb	r3, [r7, #14]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d055      	beq.n	800c040 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2204      	movs	r2, #4
 800bf98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bf9c:	e050      	b.n	800c040 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	3340      	adds	r3, #64	; 0x40
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f860 	bl	800c06a <GetLineCoding>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bfae:	7bbb      	ldrb	r3, [r7, #14]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d126      	bne.n	800c002 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfc6:	791b      	ldrb	r3, [r3, #4]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d13b      	bne.n	800c044 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d133      	bne.n	800c044 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfe6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d12b      	bne.n	800c044 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bff4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d124      	bne.n	800c044 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f9be 	bl	800c37c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c000:	e020      	b.n	800c044 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d01d      	beq.n	800c044 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2204      	movs	r2, #4
 800c00c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c010:	e018      	b.n	800c044 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f8e1 	bl	800c1da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f954 	bl	800c2c6 <CDC_ProcessReception>
      break;
 800c01e:	e014      	b.n	800c04a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c020:	2100      	movs	r1, #0
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f001 f849 	bl	800d0ba <USBH_ClrFeature>
 800c028:	4603      	mov	r3, r0
 800c02a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c03a:	e005      	b.n	800c048 <USBH_CDC_Process+0x120>

    default:
      break;
 800c03c:	bf00      	nop
 800c03e:	e004      	b.n	800c04a <USBH_CDC_Process+0x122>
      break;
 800c040:	bf00      	nop
 800c042:	e002      	b.n	800c04a <USBH_CDC_Process+0x122>
      break;
 800c044:	bf00      	nop
 800c046:	e000      	b.n	800c04a <USBH_CDC_Process+0x122>
      break;
 800c048:	bf00      	nop

  }

  return status;
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b082      	sub	sp, #8
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	22a1      	movs	r2, #161	; 0xa1
 800c078:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2221      	movs	r2, #33	; 0x21
 800c07e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2207      	movs	r2, #7
 800c090:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2207      	movs	r2, #7
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f9ee 	bl	800d47a <USBH_CtlReq>
 800c09e:	4603      	mov	r3, r0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2221      	movs	r2, #33	; 0x21
 800c0b6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2220      	movs	r2, #32
 800c0bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2207      	movs	r2, #7
 800c0ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2207      	movs	r2, #7
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f001 f9cf 	bl	800d47a <USBH_CtlReq>
 800c0dc:	4603      	mov	r3, r0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0f4:	69db      	ldr	r3, [r3, #28]
 800c0f6:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b0b      	cmp	r3, #11
 800c100:	d107      	bne.n	800c112 <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	7b1b      	ldrb	r3, [r3, #12]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 ff3b 	bl	800df84 <USBH_LL_GetLastXferSize>
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	e001      	b.n	800c116 <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	b29b      	uxth	r3, r3
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800c122:	b480      	push	{r7}
 800c124:	b087      	sub	sp, #28
 800c126:	af00      	add	r7, sp, #0
 800c128:	60f8      	str	r0, [r7, #12]
 800c12a:	60b9      	str	r1, [r7, #8]
 800c12c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c12e:	2301      	movs	r3, #1
 800c130:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c138:	69db      	ldr	r3, [r3, #28]
 800c13a:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c142:	2b00      	cmp	r3, #0
 800c144:	d004      	beq.n	800c150 <USBH_CDC_Transmit+0x2e>
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c14c:	2b03      	cmp	r3, #3
 800c14e:	d10f      	bne.n	800c170 <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	2203      	movs	r2, #3
 800c160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800c170:	7dfb      	ldrb	r3, [r7, #23]
}
 800c172:	4618      	mov	r0, r3
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800c17e:	b480      	push	{r7}
 800c180:	b087      	sub	sp, #28
 800c182:	af00      	add	r7, sp, #0
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c18a:	2301      	movs	r3, #1
 800c18c:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c194:	69db      	ldr	r3, [r3, #28]
 800c196:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d004      	beq.n	800c1ac <USBH_CDC_Receive+0x2e>
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d10f      	bne.n	800c1cc <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2203      	movs	r2, #3
 800c1bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	2203      	movs	r2, #3
 800c1c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	371c      	adds	r7, #28
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b086      	sub	sp, #24
 800c1de:	af02      	add	r7, sp, #8
 800c1e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d002      	beq.n	800c200 <CDC_ProcessTransmission+0x26>
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d023      	beq.n	800c246 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c1fe:	e05e      	b.n	800c2be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	8b12      	ldrh	r2, [r2, #24]
 800c208:	4293      	cmp	r3, r2
 800c20a:	d90b      	bls.n	800c224 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	69d9      	ldr	r1, [r3, #28]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	8b1a      	ldrh	r2, [r3, #24]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	7b5b      	ldrb	r3, [r3, #13]
 800c218:	2001      	movs	r0, #1
 800c21a:	9000      	str	r0, [sp, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 fb3a 	bl	800d896 <USBH_BulkSendData>
 800c222:	e00b      	b.n	800c23c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	7b5b      	ldrb	r3, [r3, #13]
 800c232:	2001      	movs	r0, #1
 800c234:	9000      	str	r0, [sp, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f001 fb2d 	bl	800d896 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2202      	movs	r2, #2
 800c240:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c244:	e03b      	b.n	800c2be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	7b5b      	ldrb	r3, [r3, #13]
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f001 ff2b 	bl	800e0a8 <USBH_LL_GetURBState>
 800c252:	4603      	mov	r3, r0
 800c254:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c256:	7afb      	ldrb	r3, [r7, #11]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d128      	bne.n	800c2ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	8b12      	ldrh	r2, [r2, #24]
 800c264:	4293      	cmp	r3, r2
 800c266:	d90e      	bls.n	800c286 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	8b12      	ldrh	r2, [r2, #24]
 800c270:	1a9a      	subs	r2, r3, r2
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	8b12      	ldrh	r2, [r2, #24]
 800c27e:	441a      	add	r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	61da      	str	r2, [r3, #28]
 800c284:	e002      	b.n	800c28c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c290:	2b00      	cmp	r3, #0
 800c292:	d004      	beq.n	800c29e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c29c:	e00e      	b.n	800c2bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 fbca 	bl	800da40 <USBH_CDC_TransmitCallback>
      break;
 800c2ac:	e006      	b.n	800c2bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d103      	bne.n	800c2bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c2bc:	bf00      	nop
  }
}
 800c2be:	bf00      	nop
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b086      	sub	sp, #24
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d002      	beq.n	800c2ec <CDC_ProcessReception+0x26>
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	d00e      	beq.n	800c308 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c2ea:	e043      	b.n	800c374 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	6a19      	ldr	r1, [r3, #32]
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	8b5a      	ldrh	r2, [r3, #26]
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	7b1b      	ldrb	r3, [r3, #12]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f001 faf1 	bl	800d8e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2204      	movs	r2, #4
 800c302:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c306:	e035      	b.n	800c374 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	7b1b      	ldrb	r3, [r3, #12]
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f001 feca 	bl	800e0a8 <USBH_LL_GetURBState>
 800c314:	4603      	mov	r3, r0
 800c316:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c318:	7cfb      	ldrb	r3, [r7, #19]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d129      	bne.n	800c372 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	7b1b      	ldrb	r3, [r3, #12]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 fe2d 	bl	800df84 <USBH_LL_GetLastXferSize>
 800c32a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	429a      	cmp	r2, r3
 800c334:	d016      	beq.n	800c364 <CDC_ProcessReception+0x9e>
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	8b5b      	ldrh	r3, [r3, #26]
 800c33a:	461a      	mov	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4293      	cmp	r3, r2
 800c340:	d910      	bls.n	800c364 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	1ad2      	subs	r2, r2, r3
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	6a1a      	ldr	r2, [r3, #32]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	441a      	add	r2, r3
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2203      	movs	r2, #3
 800c35e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c362:	e006      	b.n	800c372 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f001 fb71 	bl	800da54 <USBH_CDC_ReceiveCallback>
      break;
 800c372:	bf00      	nop
  }
}
 800c374:	bf00      	nop
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	4613      	mov	r3, r2
 800c39c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e029      	b.n	800c3fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	79fa      	ldrb	r2, [r7, #7]
 800c3ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f000 f81f 	bl	800c404 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f001 fd11 	bl	800de1c <USBH_LL_Init>

  return USBH_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c410:	2300      	movs	r3, #0
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e009      	b.n	800c42a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	33e0      	adds	r3, #224	; 0xe0
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	2200      	movs	r2, #0
 800c422:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3301      	adds	r3, #1
 800c428:	60fb      	str	r3, [r7, #12]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b0e      	cmp	r3, #14
 800c42e:	d9f2      	bls.n	800c416 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c430:	2300      	movs	r3, #0
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e009      	b.n	800c44a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c440:	2200      	movs	r2, #0
 800c442:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	3301      	adds	r3, #1
 800c448:	60fb      	str	r3, [r7, #12]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c450:	d3f1      	bcc.n	800c436 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2240      	movs	r2, #64	; 0x40
 800c476:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d016      	beq.n	800c4ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10e      	bne.n	800c4e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c4d0:	1c59      	adds	r1, r3, #1
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	33de      	adds	r3, #222	; 0xde
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73fb      	strb	r3, [r7, #15]
 800c4e6:	e004      	b.n	800c4f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	73fb      	strb	r3, [r7, #15]
 800c4ec:	e001      	b.n	800c4f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c516:	78fa      	ldrb	r2, [r7, #3]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d204      	bcs.n	800c526 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	78fa      	ldrb	r2, [r7, #3]
 800c520:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c524:	e001      	b.n	800c52a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c526:	2302      	movs	r3, #2
 800c528:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c538:	b480      	push	{r7}
 800c53a:	b087      	sub	sp, #28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	4608      	mov	r0, r1
 800c542:	4611      	mov	r1, r2
 800c544:	461a      	mov	r2, r3
 800c546:	4603      	mov	r3, r0
 800c548:	70fb      	strb	r3, [r7, #3]
 800c54a:	460b      	mov	r3, r1
 800c54c:	70bb      	strb	r3, [r7, #2]
 800c54e:	4613      	mov	r3, r2
 800c550:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c556:	2300      	movs	r3, #0
 800c558:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c560:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c562:	e025      	b.n	800c5b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	221a      	movs	r2, #26
 800c568:	fb02 f303 	mul.w	r3, r2, r3
 800c56c:	3308      	adds	r3, #8
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	4413      	add	r3, r2
 800c572:	3302      	adds	r3, #2
 800c574:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	795b      	ldrb	r3, [r3, #5]
 800c57a:	78fa      	ldrb	r2, [r7, #3]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d002      	beq.n	800c586 <USBH_FindInterface+0x4e>
 800c580:	78fb      	ldrb	r3, [r7, #3]
 800c582:	2bff      	cmp	r3, #255	; 0xff
 800c584:	d111      	bne.n	800c5aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c58a:	78ba      	ldrb	r2, [r7, #2]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d002      	beq.n	800c596 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c590:	78bb      	ldrb	r3, [r7, #2]
 800c592:	2bff      	cmp	r3, #255	; 0xff
 800c594:	d109      	bne.n	800c5aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c59a:	787a      	ldrb	r2, [r7, #1]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d002      	beq.n	800c5a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c5a0:	787b      	ldrb	r3, [r7, #1]
 800c5a2:	2bff      	cmp	r3, #255	; 0xff
 800c5a4:	d101      	bne.n	800c5aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	e006      	b.n	800c5b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c5b0:	7dfb      	ldrb	r3, [r7, #23]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d9d6      	bls.n	800c564 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c5b6:	23ff      	movs	r3, #255	; 0xff
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	371c      	adds	r7, #28
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f001 fc61 	bl	800de94 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f001 fd7a 	bl	800e0ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b088      	sub	sp, #32
 800c5e8:	af04      	add	r7, sp, #16
 800c5ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d102      	bne.n	800c606 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2203      	movs	r2, #3
 800c604:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b0b      	cmp	r3, #11
 800c60e:	f200 81b3 	bhi.w	800c978 <USBH_Process+0x394>
 800c612:	a201      	add	r2, pc, #4	; (adr r2, 800c618 <USBH_Process+0x34>)
 800c614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c618:	0800c649 	.word	0x0800c649
 800c61c:	0800c67b 	.word	0x0800c67b
 800c620:	0800c6e3 	.word	0x0800c6e3
 800c624:	0800c913 	.word	0x0800c913
 800c628:	0800c979 	.word	0x0800c979
 800c62c:	0800c787 	.word	0x0800c787
 800c630:	0800c8b9 	.word	0x0800c8b9
 800c634:	0800c7bd 	.word	0x0800c7bd
 800c638:	0800c7dd 	.word	0x0800c7dd
 800c63c:	0800c7fd 	.word	0x0800c7fd
 800c640:	0800c82b 	.word	0x0800c82b
 800c644:	0800c8fb 	.word	0x0800c8fb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 8193 	beq.w	800c97c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c65c:	20c8      	movs	r0, #200	; 0xc8
 800c65e:	f001 fd7d 	bl	800e15c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f001 fc73 	bl	800df4e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c678:	e180      	b.n	800c97c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c680:	2b01      	cmp	r3, #1
 800c682:	d107      	bne.n	800c694 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2202      	movs	r2, #2
 800c690:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c692:	e182      	b.n	800c99a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c69a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c69e:	d914      	bls.n	800c6ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d903      	bls.n	800c6c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	220d      	movs	r2, #13
 800c6be:	701a      	strb	r2, [r3, #0]
      break;
 800c6c0:	e16b      	b.n	800c99a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	701a      	strb	r2, [r3, #0]
      break;
 800c6c8:	e167      	b.n	800c99a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c6d0:	f103 020a 	add.w	r2, r3, #10
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c6da:	200a      	movs	r0, #10
 800c6dc:	f001 fd3e 	bl	800e15c <USBH_Delay>
      break;
 800c6e0:	e15b      	b.n	800c99a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6f2:	2104      	movs	r1, #4
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c6f8:	2064      	movs	r0, #100	; 0x64
 800c6fa:	f001 fd2f 	bl	800e15c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f001 fbfe 	bl	800df00 <USBH_LL_GetSpeed>
 800c704:	4603      	mov	r3, r0
 800c706:	461a      	mov	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2205      	movs	r2, #5
 800c712:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c714:	2100      	movs	r1, #0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f001 f92f 	bl	800d97a <USBH_AllocPipe>
 800c71c:	4603      	mov	r3, r0
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c724:	2180      	movs	r1, #128	; 0x80
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f001 f927 	bl	800d97a <USBH_AllocPipe>
 800c72c:	4603      	mov	r3, r0
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7919      	ldrb	r1, [r3, #4]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c748:	b292      	uxth	r2, r2
 800c74a:	9202      	str	r2, [sp, #8]
 800c74c:	2200      	movs	r2, #0
 800c74e:	9201      	str	r2, [sp, #4]
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	4603      	mov	r3, r0
 800c754:	2280      	movs	r2, #128	; 0x80
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f001 f8e0 	bl	800d91c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	7959      	ldrb	r1, [r3, #5]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c770:	b292      	uxth	r2, r2
 800c772:	9202      	str	r2, [sp, #8]
 800c774:	2200      	movs	r2, #0
 800c776:	9201      	str	r2, [sp, #4]
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4603      	mov	r3, r0
 800c77c:	2200      	movs	r2, #0
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f001 f8cc 	bl	800d91c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c784:	e109      	b.n	800c99a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f90c 	bl	800c9a4 <USBH_HandleEnum>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c790:	7bbb      	ldrb	r3, [r7, #14]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b00      	cmp	r3, #0
 800c796:	f040 80f3 	bne.w	800c980 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d103      	bne.n	800c7b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2208      	movs	r2, #8
 800c7b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c7b2:	e0e5      	b.n	800c980 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2207      	movs	r2, #7
 800c7b8:	701a      	strb	r2, [r3, #0]
      break;
 800c7ba:	e0e1      	b.n	800c980 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f000 80de 	beq.w	800c984 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7ce:	2101      	movs	r1, #1
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2208      	movs	r2, #8
 800c7d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c7da:	e0d3      	b.n	800c984 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fc20 	bl	800d02c <USBH_SetCfg>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f040 80ca 	bne.w	800c988 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2209      	movs	r2, #9
 800c7f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c7fa:	e0c5      	b.n	800c988 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c802:	f003 0320 	and.w	r3, r3, #32
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00b      	beq.n	800c822 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c80a:	2101      	movs	r1, #1
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fc30 	bl	800d072 <USBH_SetFeature>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	f040 80b9 	bne.w	800c98c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	220a      	movs	r2, #10
 800c81e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c820:	e0b4      	b.n	800c98c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	220a      	movs	r2, #10
 800c826:	701a      	strb	r2, [r3, #0]
      break;
 800c828:	e0b0      	b.n	800c98c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c830:	2b00      	cmp	r3, #0
 800c832:	f000 80ad 	beq.w	800c990 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c83e:	2300      	movs	r3, #0
 800c840:	73fb      	strb	r3, [r7, #15]
 800c842:	e016      	b.n	800c872 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c844:	7bfa      	ldrb	r2, [r7, #15]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	32de      	adds	r2, #222	; 0xde
 800c84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c84e:	791a      	ldrb	r2, [r3, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c856:	429a      	cmp	r2, r3
 800c858:	d108      	bne.n	800c86c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c85a:	7bfa      	ldrb	r2, [r7, #15]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	32de      	adds	r2, #222	; 0xde
 800c860:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c86a:	e005      	b.n	800c878 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	3301      	adds	r3, #1
 800c870:	73fb      	strb	r3, [r7, #15]
 800c872:	7bfb      	ldrb	r3, [r7, #15]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d0e5      	beq.n	800c844 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d016      	beq.n	800c8b0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	4798      	blx	r3
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2206      	movs	r2, #6
 800c898:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8a0:	2103      	movs	r1, #3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c8a6:	e073      	b.n	800c990 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	220d      	movs	r2, #13
 800c8ac:	701a      	strb	r2, [r3, #0]
      break;
 800c8ae:	e06f      	b.n	800c990 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	220d      	movs	r2, #13
 800c8b4:	701a      	strb	r2, [r3, #0]
      break;
 800c8b6:	e06b      	b.n	800c990 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d017      	beq.n	800c8f2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	4798      	blx	r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d103      	bne.n	800c8e2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	220b      	movs	r2, #11
 800c8de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c8e0:	e058      	b.n	800c994 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d154      	bne.n	800c994 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	220d      	movs	r2, #13
 800c8ee:	701a      	strb	r2, [r3, #0]
      break;
 800c8f0:	e050      	b.n	800c994 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	220d      	movs	r2, #13
 800c8f6:	701a      	strb	r2, [r3, #0]
      break;
 800c8f8:	e04c      	b.n	800c994 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c900:	2b00      	cmp	r3, #0
 800c902:	d049      	beq.n	800c998 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	4798      	blx	r3
      }
      break;
 800c910:	e042      	b.n	800c998 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff fd72 	bl	800c404 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d009      	beq.n	800c93e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c944:	2b00      	cmp	r3, #0
 800c946:	d005      	beq.n	800c954 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c94e:	2105      	movs	r1, #5
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d107      	bne.n	800c970 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff fe2b 	bl	800c5c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c96e:	e014      	b.n	800c99a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f001 fa8f 	bl	800de94 <USBH_LL_Start>
      break;
 800c976:	e010      	b.n	800c99a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c978:	bf00      	nop
 800c97a:	e00e      	b.n	800c99a <USBH_Process+0x3b6>
      break;
 800c97c:	bf00      	nop
 800c97e:	e00c      	b.n	800c99a <USBH_Process+0x3b6>
      break;
 800c980:	bf00      	nop
 800c982:	e00a      	b.n	800c99a <USBH_Process+0x3b6>
    break;
 800c984:	bf00      	nop
 800c986:	e008      	b.n	800c99a <USBH_Process+0x3b6>
      break;
 800c988:	bf00      	nop
 800c98a:	e006      	b.n	800c99a <USBH_Process+0x3b6>
      break;
 800c98c:	bf00      	nop
 800c98e:	e004      	b.n	800c99a <USBH_Process+0x3b6>
      break;
 800c990:	bf00      	nop
 800c992:	e002      	b.n	800c99a <USBH_Process+0x3b6>
      break;
 800c994:	bf00      	nop
 800c996:	e000      	b.n	800c99a <USBH_Process+0x3b6>
      break;
 800c998:	bf00      	nop
  }
  return USBH_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af04      	add	r7, sp, #16
 800c9aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	785b      	ldrb	r3, [r3, #1]
 800c9b8:	2b07      	cmp	r3, #7
 800c9ba:	f200 81c1 	bhi.w	800cd40 <USBH_HandleEnum+0x39c>
 800c9be:	a201      	add	r2, pc, #4	; (adr r2, 800c9c4 <USBH_HandleEnum+0x20>)
 800c9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c4:	0800c9e5 	.word	0x0800c9e5
 800c9c8:	0800caa3 	.word	0x0800caa3
 800c9cc:	0800cb0d 	.word	0x0800cb0d
 800c9d0:	0800cb9b 	.word	0x0800cb9b
 800c9d4:	0800cc05 	.word	0x0800cc05
 800c9d8:	0800cc75 	.word	0x0800cc75
 800c9dc:	0800ccbb 	.word	0x0800ccbb
 800c9e0:	0800cd01 	.word	0x0800cd01
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c9e4:	2108      	movs	r1, #8
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 fa50 	bl	800ce8c <USBH_Get_DevDesc>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9f0:	7bbb      	ldrb	r3, [r7, #14]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d130      	bne.n	800ca58 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	7919      	ldrb	r1, [r3, #4]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ca1a:	b292      	uxth	r2, r2
 800ca1c:	9202      	str	r2, [sp, #8]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	9201      	str	r2, [sp, #4]
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	4603      	mov	r3, r0
 800ca26:	2280      	movs	r2, #128	; 0x80
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 ff77 	bl	800d91c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7959      	ldrb	r1, [r3, #5]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca42:	b292      	uxth	r2, r2
 800ca44:	9202      	str	r2, [sp, #8]
 800ca46:	2200      	movs	r2, #0
 800ca48:	9201      	str	r2, [sp, #4]
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2200      	movs	r2, #0
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 ff63 	bl	800d91c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ca56:	e175      	b.n	800cd44 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	f040 8172 	bne.w	800cd44 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca66:	3301      	adds	r3, #1
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d903      	bls.n	800ca82 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	220d      	movs	r2, #13
 800ca7e:	701a      	strb	r2, [r3, #0]
      break;
 800ca80:	e160      	b.n	800cd44 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	795b      	ldrb	r3, [r3, #5]
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 ff97 	bl	800d9bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	791b      	ldrb	r3, [r3, #4]
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 ff91 	bl	800d9bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	701a      	strb	r2, [r3, #0]
      break;
 800caa0:	e150      	b.n	800cd44 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800caa2:	2112      	movs	r1, #18
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f9f1 	bl	800ce8c <USBH_Get_DevDesc>
 800caaa:	4603      	mov	r3, r0
 800caac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800caba:	e145      	b.n	800cd48 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	f040 8142 	bne.w	800cd48 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800caca:	3301      	adds	r3, #1
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d903      	bls.n	800cae6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	220d      	movs	r2, #13
 800cae2:	701a      	strb	r2, [r3, #0]
      break;
 800cae4:	e130      	b.n	800cd48 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	795b      	ldrb	r3, [r3, #5]
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 ff65 	bl	800d9bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	791b      	ldrb	r3, [r3, #4]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 ff5f 	bl	800d9bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]
      break;
 800cb0a:	e11d      	b.n	800cd48 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fa68 	bl	800cfe4 <USBH_SetAddress>
 800cb14:	4603      	mov	r3, r0
 800cb16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d132      	bne.n	800cb84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cb1e:	2002      	movs	r0, #2
 800cb20:	f001 fb1c 	bl	800e15c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2203      	movs	r2, #3
 800cb30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7919      	ldrb	r1, [r3, #4]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cb46:	b292      	uxth	r2, r2
 800cb48:	9202      	str	r2, [sp, #8]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	9201      	str	r2, [sp, #4]
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4603      	mov	r3, r0
 800cb52:	2280      	movs	r2, #128	; 0x80
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fee1 	bl	800d91c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7959      	ldrb	r1, [r3, #5]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb6e:	b292      	uxth	r2, r2
 800cb70:	9202      	str	r2, [sp, #8]
 800cb72:	2200      	movs	r2, #0
 800cb74:	9201      	str	r2, [sp, #4]
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fecd 	bl	800d91c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cb82:	e0e3      	b.n	800cd4c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	f040 80e0 	bne.w	800cd4c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	220d      	movs	r2, #13
 800cb90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	705a      	strb	r2, [r3, #1]
      break;
 800cb98:	e0d8      	b.n	800cd4c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cb9a:	2109      	movs	r1, #9
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f99d 	bl	800cedc <USBH_Get_CfgDesc>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d103      	bne.n	800cbb4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2204      	movs	r2, #4
 800cbb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cbb2:	e0cd      	b.n	800cd50 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbb4:	7bbb      	ldrb	r3, [r7, #14]
 800cbb6:	2b03      	cmp	r3, #3
 800cbb8:	f040 80ca 	bne.w	800cd50 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d903      	bls.n	800cbde <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	220d      	movs	r2, #13
 800cbda:	701a      	strb	r2, [r3, #0]
      break;
 800cbdc:	e0b8      	b.n	800cd50 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	795b      	ldrb	r3, [r3, #5]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fee9 	bl	800d9bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	791b      	ldrb	r3, [r3, #4]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fee3 	bl	800d9bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	701a      	strb	r2, [r3, #0]
      break;
 800cc02:	e0a5      	b.n	800cd50 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 f965 	bl	800cedc <USBH_Get_CfgDesc>
 800cc12:	4603      	mov	r3, r0
 800cc14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d103      	bne.n	800cc24 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2205      	movs	r2, #5
 800cc20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cc22:	e097      	b.n	800cd54 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	2b03      	cmp	r3, #3
 800cc28:	f040 8094 	bne.w	800cd54 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc32:	3301      	adds	r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	d903      	bls.n	800cc4e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	220d      	movs	r2, #13
 800cc4a:	701a      	strb	r2, [r3, #0]
      break;
 800cc4c:	e082      	b.n	800cd54 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	795b      	ldrb	r3, [r3, #5]
 800cc52:	4619      	mov	r1, r3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 feb1 	bl	800d9bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	791b      	ldrb	r3, [r3, #4]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 feab 	bl	800d9bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	701a      	strb	r2, [r3, #0]
      break;
 800cc72:	e06f      	b.n	800cd54 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d019      	beq.n	800ccb2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cc8a:	23ff      	movs	r3, #255	; 0xff
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f949 	bl	800cf24 <USBH_Get_StringDesc>
 800cc92:	4603      	mov	r3, r0
 800cc94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cc96:	7bbb      	ldrb	r3, [r7, #14]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d103      	bne.n	800cca4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2206      	movs	r2, #6
 800cca0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cca2:	e059      	b.n	800cd58 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	2b03      	cmp	r3, #3
 800cca8:	d156      	bne.n	800cd58 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2206      	movs	r2, #6
 800ccae:	705a      	strb	r2, [r3, #1]
      break;
 800ccb0:	e052      	b.n	800cd58 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2206      	movs	r2, #6
 800ccb6:	705a      	strb	r2, [r3, #1]
      break;
 800ccb8:	e04e      	b.n	800cd58 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d019      	beq.n	800ccf8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ccd0:	23ff      	movs	r3, #255	; 0xff
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 f926 	bl	800cf24 <USBH_Get_StringDesc>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d103      	bne.n	800ccea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2207      	movs	r2, #7
 800cce6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cce8:	e038      	b.n	800cd5c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccea:	7bbb      	ldrb	r3, [r7, #14]
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d135      	bne.n	800cd5c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2207      	movs	r2, #7
 800ccf4:	705a      	strb	r2, [r3, #1]
      break;
 800ccf6:	e031      	b.n	800cd5c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2207      	movs	r2, #7
 800ccfc:	705a      	strb	r2, [r3, #1]
      break;
 800ccfe:	e02d      	b.n	800cd5c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d017      	beq.n	800cd3a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cd16:	23ff      	movs	r3, #255	; 0xff
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f903 	bl	800cf24 <USBH_Get_StringDesc>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cd22:	7bbb      	ldrb	r3, [r7, #14]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cd2c:	e018      	b.n	800cd60 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd2e:	7bbb      	ldrb	r3, [r7, #14]
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d115      	bne.n	800cd60 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73fb      	strb	r3, [r7, #15]
      break;
 800cd38:	e012      	b.n	800cd60 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]
      break;
 800cd3e:	e00f      	b.n	800cd60 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cd40:	bf00      	nop
 800cd42:	e00e      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd44:	bf00      	nop
 800cd46:	e00c      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd48:	bf00      	nop
 800cd4a:	e00a      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd4c:	bf00      	nop
 800cd4e:	e008      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd50:	bf00      	nop
 800cd52:	e006      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd54:	bf00      	nop
 800cd56:	e004      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd58:	bf00      	nop
 800cd5a:	e002      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd5c:	bf00      	nop
 800cd5e:	e000      	b.n	800cd62 <USBH_HandleEnum+0x3be>
      break;
 800cd60:	bf00      	nop
  }
  return Status;
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cd7e:	bf00      	nop
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd98:	1c5a      	adds	r2, r3, #1
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f804 	bl	800cdae <USBH_HandleSof>
}
 800cda6:	bf00      	nop
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	2b0b      	cmp	r3, #11
 800cdbe:	d10a      	bne.n	800cdd6 <USBH_HandleSof+0x28>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d005      	beq.n	800cdd6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	4798      	blx	r3
  }
}
 800cdd6:	bf00      	nop
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2201      	movs	r2, #1
 800cdea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800cdee:	bf00      	nop
}
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ce0a:	bf00      	nop
}
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ce16:	b480      	push	{r7}
 800ce18:	b083      	sub	sp, #12
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 f830 	bl	800deca <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	791b      	ldrb	r3, [r3, #4]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fda3 	bl	800d9bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	795b      	ldrb	r3, [r3, #5]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 fd9d 	bl	800d9bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	460b      	mov	r3, r1
 800ce96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ce9e:	78fb      	ldrb	r3, [r7, #3]
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	4613      	mov	r3, r2
 800cea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ceaa:	2100      	movs	r1, #0
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f864 	bl	800cf7a <USBH_GetDescriptor>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73fb      	strb	r3, [r7, #15]
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10a      	bne.n	800ced2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cec8:	78fa      	ldrb	r2, [r7, #3]
 800ceca:	b292      	uxth	r2, r2
 800cecc:	4619      	mov	r1, r3
 800cece:	f000 f918 	bl	800d102 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af02      	add	r7, sp, #8
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	460b      	mov	r3, r1
 800cee6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	331c      	adds	r3, #28
 800ceec:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ceee:	887b      	ldrh	r3, [r7, #2]
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cef8:	2100      	movs	r1, #0
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f83d 	bl	800cf7a <USBH_GetDescriptor>
 800cf00:	4603      	mov	r3, r0
 800cf02:	72fb      	strb	r3, [r7, #11]
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d107      	bne.n	800cf1a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cf10:	887a      	ldrh	r2, [r7, #2]
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f964 	bl	800d1e2 <USBH_ParseCfgDesc>
  }

  return status;
 800cf1a:	7afb      	ldrb	r3, [r7, #11]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af02      	add	r7, sp, #8
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	607a      	str	r2, [r7, #4]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	460b      	mov	r3, r1
 800cf32:	72fb      	strb	r3, [r7, #11]
 800cf34:	4613      	mov	r3, r2
 800cf36:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800cf38:	7afb      	ldrb	r3, [r7, #11]
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cf40:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cf48:	893b      	ldrh	r3, [r7, #8]
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	2100      	movs	r1, #0
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f812 	bl	800cf7a <USBH_GetDescriptor>
 800cf56:	4603      	mov	r3, r0
 800cf58:	75fb      	strb	r3, [r7, #23]
 800cf5a:	7dfb      	ldrb	r3, [r7, #23]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d107      	bne.n	800cf70 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cf66:	893a      	ldrh	r2, [r7, #8]
 800cf68:	6879      	ldr	r1, [r7, #4]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 fa37 	bl	800d3de <USBH_ParseStringDesc>
  }

  return status;
 800cf70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	60f8      	str	r0, [r7, #12]
 800cf82:	607b      	str	r3, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	72fb      	strb	r3, [r7, #11]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	789b      	ldrb	r3, [r3, #2]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d11c      	bne.n	800cfce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cf94:	7afb      	ldrb	r3, [r7, #11]
 800cf96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2206      	movs	r2, #6
 800cfa4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	893a      	ldrh	r2, [r7, #8]
 800cfaa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cfac:	893b      	ldrh	r3, [r7, #8]
 800cfae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cfb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfb6:	d104      	bne.n	800cfc2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f240 4209 	movw	r2, #1033	; 0x409
 800cfbe:	829a      	strh	r2, [r3, #20]
 800cfc0:	e002      	b.n	800cfc8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8b3a      	ldrh	r2, [r7, #24]
 800cfcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cfce:	8b3b      	ldrh	r3, [r7, #24]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f000 fa50 	bl	800d47a <USBH_CtlReq>
 800cfda:	4603      	mov	r3, r0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	789b      	ldrb	r3, [r3, #2]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d10f      	bne.n	800d018 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2205      	movs	r2, #5
 800d002:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d004:	78fb      	ldrb	r3, [r7, #3]
 800d006:	b29a      	uxth	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d018:	2200      	movs	r2, #0
 800d01a:	2100      	movs	r1, #0
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 fa2c 	bl	800d47a <USBH_CtlReq>
 800d022:	4603      	mov	r3, r0
}
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	789b      	ldrb	r3, [r3, #2]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d10e      	bne.n	800d05e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2209      	movs	r2, #9
 800d04a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	887a      	ldrh	r2, [r7, #2]
 800d050:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d05e:	2200      	movs	r2, #0
 800d060:	2100      	movs	r1, #0
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fa09 	bl	800d47a <USBH_CtlReq>
 800d068:	4603      	mov	r3, r0
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3708      	adds	r7, #8
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b082      	sub	sp, #8
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	460b      	mov	r3, r1
 800d07c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	789b      	ldrb	r3, [r3, #2]
 800d082:	2b01      	cmp	r3, #1
 800d084:	d10f      	bne.n	800d0a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2203      	movs	r2, #3
 800d090:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d092:	78fb      	ldrb	r3, [r7, #3]
 800d094:	b29a      	uxth	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f9e5 	bl	800d47a <USBH_CtlReq>
 800d0b0:	4603      	mov	r3, r0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3708      	adds	r7, #8
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b082      	sub	sp, #8
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	789b      	ldrb	r3, [r3, #2]
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d10f      	bne.n	800d0ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d0e0:	78fb      	ldrb	r3, [r7, #3]
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f9c1 	bl	800d47a <USBH_CtlReq>
 800d0f8:	4603      	mov	r3, r0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d102:	b480      	push	{r7}
 800d104:	b085      	sub	sp, #20
 800d106:	af00      	add	r7, sp, #0
 800d108:	60f8      	str	r0, [r7, #12]
 800d10a:	60b9      	str	r1, [r7, #8]
 800d10c:	4613      	mov	r3, r2
 800d10e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	781a      	ldrb	r2, [r3, #0]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	785a      	ldrb	r2, [r3, #1]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	3302      	adds	r3, #2
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	b29a      	uxth	r2, r3
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	3303      	adds	r3, #3
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	021b      	lsls	r3, r3, #8
 800d132:	b29b      	uxth	r3, r3
 800d134:	4313      	orrs	r3, r2
 800d136:	b29a      	uxth	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	791a      	ldrb	r2, [r3, #4]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	795a      	ldrb	r2, [r3, #5]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	799a      	ldrb	r2, [r3, #6]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	79da      	ldrb	r2, [r3, #7]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d15c:	88fb      	ldrh	r3, [r7, #6]
 800d15e:	2b08      	cmp	r3, #8
 800d160:	d939      	bls.n	800d1d6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	3308      	adds	r3, #8
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	b29a      	uxth	r2, r3
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	3309      	adds	r3, #9
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	b29b      	uxth	r3, r3
 800d172:	021b      	lsls	r3, r3, #8
 800d174:	b29b      	uxth	r3, r3
 800d176:	4313      	orrs	r3, r2
 800d178:	b29a      	uxth	r2, r3
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	330a      	adds	r3, #10
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	b29a      	uxth	r2, r3
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	330b      	adds	r3, #11
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	021b      	lsls	r3, r3, #8
 800d190:	b29b      	uxth	r3, r3
 800d192:	4313      	orrs	r3, r2
 800d194:	b29a      	uxth	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	330c      	adds	r3, #12
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	330d      	adds	r3, #13
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	021b      	lsls	r3, r3, #8
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	7b9a      	ldrb	r2, [r3, #14]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	7bda      	ldrb	r2, [r3, #15]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	7c1a      	ldrb	r2, [r3, #16]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	7c5a      	ldrb	r2, [r3, #17]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	745a      	strb	r2, [r3, #17]
  }
}
 800d1d6:	bf00      	nop
 800d1d8:	3714      	adds	r7, #20
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b08a      	sub	sp, #40	; 0x28
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	781a      	ldrb	r2, [r3, #0]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	785a      	ldrb	r2, [r3, #1]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	3302      	adds	r3, #2
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	b29a      	uxth	r2, r3
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	3303      	adds	r3, #3
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	b29b      	uxth	r3, r3
 800d224:	021b      	lsls	r3, r3, #8
 800d226:	b29b      	uxth	r3, r3
 800d228:	4313      	orrs	r3, r2
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	791a      	ldrb	r2, [r3, #4]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	795a      	ldrb	r2, [r3, #5]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	799a      	ldrb	r2, [r3, #6]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	79da      	ldrb	r2, [r3, #7]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	7a1a      	ldrb	r2, [r3, #8]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d258:	88fb      	ldrh	r3, [r7, #6]
 800d25a:	2b09      	cmp	r3, #9
 800d25c:	d95f      	bls.n	800d31e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d25e:	2309      	movs	r3, #9
 800d260:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d262:	2300      	movs	r3, #0
 800d264:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d266:	e051      	b.n	800d30c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d268:	f107 0316 	add.w	r3, r7, #22
 800d26c:	4619      	mov	r1, r3
 800d26e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d270:	f000 f8e8 	bl	800d444 <USBH_GetNextDesc>
 800d274:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	785b      	ldrb	r3, [r3, #1]
 800d27a:	2b04      	cmp	r3, #4
 800d27c:	d146      	bne.n	800d30c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d27e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d282:	221a      	movs	r2, #26
 800d284:	fb02 f303 	mul.w	r3, r2, r3
 800d288:	3308      	adds	r3, #8
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	4413      	add	r3, r2
 800d28e:	3302      	adds	r3, #2
 800d290:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d294:	69f8      	ldr	r0, [r7, #28]
 800d296:	f000 f846 	bl	800d326 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d29a:	2300      	movs	r3, #0
 800d29c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d2a4:	e022      	b.n	800d2ec <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d2a6:	f107 0316 	add.w	r3, r7, #22
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2ae:	f000 f8c9 	bl	800d444 <USBH_GetNextDesc>
 800d2b2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b05      	cmp	r3, #5
 800d2ba:	d117      	bne.n	800d2ec <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d2bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d2c4:	3201      	adds	r2, #1
 800d2c6:	00d2      	lsls	r2, r2, #3
 800d2c8:	211a      	movs	r1, #26
 800d2ca:	fb01 f303 	mul.w	r3, r1, r3
 800d2ce:	4413      	add	r3, r2
 800d2d0:	3308      	adds	r3, #8
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	3304      	adds	r3, #4
 800d2d8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d2da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2dc:	69b8      	ldr	r0, [r7, #24]
 800d2de:	f000 f851 	bl	800d384 <USBH_ParseEPDesc>
            ep_ix++;
 800d2e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	791b      	ldrb	r3, [r3, #4]
 800d2f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d204      	bcs.n	800d302 <USBH_ParseCfgDesc+0x120>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	885a      	ldrh	r2, [r3, #2]
 800d2fc:	8afb      	ldrh	r3, [r7, #22]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d8d1      	bhi.n	800d2a6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d306:	3301      	adds	r3, #1
 800d308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d30c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d310:	2b01      	cmp	r3, #1
 800d312:	d804      	bhi.n	800d31e <USBH_ParseCfgDesc+0x13c>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	885a      	ldrh	r2, [r3, #2]
 800d318:	8afb      	ldrh	r3, [r7, #22]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d8a4      	bhi.n	800d268 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d31e:	bf00      	nop
 800d320:	3728      	adds	r7, #40	; 0x28
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d326:	b480      	push	{r7}
 800d328:	b083      	sub	sp, #12
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781a      	ldrb	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	785a      	ldrb	r2, [r3, #1]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	789a      	ldrb	r2, [r3, #2]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	78da      	ldrb	r2, [r3, #3]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	791a      	ldrb	r2, [r3, #4]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	795a      	ldrb	r2, [r3, #5]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	799a      	ldrb	r2, [r3, #6]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	79da      	ldrb	r2, [r3, #7]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	7a1a      	ldrb	r2, [r3, #8]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	721a      	strb	r2, [r3, #8]
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	785a      	ldrb	r2, [r3, #1]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	789a      	ldrb	r2, [r3, #2]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	78da      	ldrb	r2, [r3, #3]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	3305      	adds	r3, #5
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	021b      	lsls	r3, r3, #8
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	799a      	ldrb	r2, [r3, #6]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	719a      	strb	r2, [r3, #6]
}
 800d3d2:	bf00      	nop
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr

0800d3de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d3de:	b480      	push	{r7}
 800d3e0:	b087      	sub	sp, #28
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	60f8      	str	r0, [r7, #12]
 800d3e6:	60b9      	str	r1, [r7, #8]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	d120      	bne.n	800d438 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	1e9a      	subs	r2, r3, #2
 800d3fc:	88fb      	ldrh	r3, [r7, #6]
 800d3fe:	4293      	cmp	r3, r2
 800d400:	bf28      	it	cs
 800d402:	4613      	movcs	r3, r2
 800d404:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3302      	adds	r3, #2
 800d40a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d40c:	2300      	movs	r3, #0
 800d40e:	82fb      	strh	r3, [r7, #22]
 800d410:	e00b      	b.n	800d42a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d412:	8afb      	ldrh	r3, [r7, #22]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4413      	add	r3, r2
 800d418:	781a      	ldrb	r2, [r3, #0]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	3301      	adds	r3, #1
 800d422:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d424:	8afb      	ldrh	r3, [r7, #22]
 800d426:	3302      	adds	r3, #2
 800d428:	82fb      	strh	r3, [r7, #22]
 800d42a:	8afa      	ldrh	r2, [r7, #22]
 800d42c:	8abb      	ldrh	r3, [r7, #20]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d3ef      	bcc.n	800d412 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2200      	movs	r2, #0
 800d436:	701a      	strb	r2, [r3, #0]
  }
}
 800d438:	bf00      	nop
 800d43a:	371c      	adds	r7, #28
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	881a      	ldrh	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	b29b      	uxth	r3, r3
 800d458:	4413      	add	r3, r2
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4413      	add	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d46c:	68fb      	ldr	r3, [r7, #12]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr

0800d47a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b086      	sub	sp, #24
 800d47e:	af00      	add	r7, sp, #0
 800d480:	60f8      	str	r0, [r7, #12]
 800d482:	60b9      	str	r1, [r7, #8]
 800d484:	4613      	mov	r3, r2
 800d486:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d488:	2301      	movs	r3, #1
 800d48a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	789b      	ldrb	r3, [r3, #2]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d002      	beq.n	800d49a <USBH_CtlReq+0x20>
 800d494:	2b02      	cmp	r3, #2
 800d496:	d00f      	beq.n	800d4b8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d498:	e027      	b.n	800d4ea <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	88fa      	ldrh	r2, [r7, #6]
 800d4a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	75fb      	strb	r3, [r7, #23]
      break;
 800d4b6:	e018      	b.n	800d4ea <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 f81b 	bl	800d4f4 <USBH_HandleControl>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d4c2:	7dfb      	ldrb	r3, [r7, #23]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <USBH_CtlReq+0x54>
 800d4c8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ca:	2b03      	cmp	r3, #3
 800d4cc:	d106      	bne.n	800d4dc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	761a      	strb	r2, [r3, #24]
      break;
 800d4da:	e005      	b.n	800d4e8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d102      	bne.n	800d4e8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	709a      	strb	r2, [r3, #2]
      break;
 800d4e8:	bf00      	nop
  }
  return status;
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af02      	add	r7, sp, #8
 800d4fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d500:	2300      	movs	r3, #0
 800d502:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	7e1b      	ldrb	r3, [r3, #24]
 800d508:	3b01      	subs	r3, #1
 800d50a:	2b0a      	cmp	r3, #10
 800d50c:	f200 8156 	bhi.w	800d7bc <USBH_HandleControl+0x2c8>
 800d510:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <USBH_HandleControl+0x24>)
 800d512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d516:	bf00      	nop
 800d518:	0800d545 	.word	0x0800d545
 800d51c:	0800d55f 	.word	0x0800d55f
 800d520:	0800d5c9 	.word	0x0800d5c9
 800d524:	0800d5ef 	.word	0x0800d5ef
 800d528:	0800d627 	.word	0x0800d627
 800d52c:	0800d651 	.word	0x0800d651
 800d530:	0800d6a3 	.word	0x0800d6a3
 800d534:	0800d6c5 	.word	0x0800d6c5
 800d538:	0800d701 	.word	0x0800d701
 800d53c:	0800d727 	.word	0x0800d727
 800d540:	0800d765 	.word	0x0800d765
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f103 0110 	add.w	r1, r3, #16
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	795b      	ldrb	r3, [r3, #5]
 800d54e:	461a      	mov	r2, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f943 	bl	800d7dc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2202      	movs	r2, #2
 800d55a:	761a      	strb	r2, [r3, #24]
      break;
 800d55c:	e139      	b.n	800d7d2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	795b      	ldrb	r3, [r3, #5]
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fd9f 	bl	800e0a8 <USBH_LL_GetURBState>
 800d56a:	4603      	mov	r3, r0
 800d56c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d11e      	bne.n	800d5b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	7c1b      	ldrb	r3, [r3, #16]
 800d578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d57c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	8adb      	ldrh	r3, [r3, #22]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d00a      	beq.n	800d59c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d586:	7b7b      	ldrb	r3, [r7, #13]
 800d588:	2b80      	cmp	r3, #128	; 0x80
 800d58a:	d103      	bne.n	800d594 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2203      	movs	r2, #3
 800d590:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d592:	e115      	b.n	800d7c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2205      	movs	r2, #5
 800d598:	761a      	strb	r2, [r3, #24]
      break;
 800d59a:	e111      	b.n	800d7c0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d59c:	7b7b      	ldrb	r3, [r7, #13]
 800d59e:	2b80      	cmp	r3, #128	; 0x80
 800d5a0:	d103      	bne.n	800d5aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2209      	movs	r2, #9
 800d5a6:	761a      	strb	r2, [r3, #24]
      break;
 800d5a8:	e10a      	b.n	800d7c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2207      	movs	r2, #7
 800d5ae:	761a      	strb	r2, [r3, #24]
      break;
 800d5b0:	e106      	b.n	800d7c0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d5b2:	7bbb      	ldrb	r3, [r7, #14]
 800d5b4:	2b04      	cmp	r3, #4
 800d5b6:	d003      	beq.n	800d5c0 <USBH_HandleControl+0xcc>
 800d5b8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	f040 8100 	bne.w	800d7c0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	220b      	movs	r2, #11
 800d5c4:	761a      	strb	r2, [r3, #24]
      break;
 800d5c6:	e0fb      	b.n	800d7c0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6899      	ldr	r1, [r3, #8]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	899a      	ldrh	r2, [r3, #12]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	791b      	ldrb	r3, [r3, #4]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f93a 	bl	800d85a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2204      	movs	r2, #4
 800d5ea:	761a      	strb	r2, [r3, #24]
      break;
 800d5ec:	e0f1      	b.n	800d7d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	791b      	ldrb	r3, [r3, #4]
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 fd57 	bl	800e0a8 <USBH_LL_GetURBState>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d102      	bne.n	800d60a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2209      	movs	r2, #9
 800d608:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d60a:	7bbb      	ldrb	r3, [r7, #14]
 800d60c:	2b05      	cmp	r3, #5
 800d60e:	d102      	bne.n	800d616 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d610:	2303      	movs	r3, #3
 800d612:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d614:	e0d6      	b.n	800d7c4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d616:	7bbb      	ldrb	r3, [r7, #14]
 800d618:	2b04      	cmp	r3, #4
 800d61a:	f040 80d3 	bne.w	800d7c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	220b      	movs	r2, #11
 800d622:	761a      	strb	r2, [r3, #24]
      break;
 800d624:	e0ce      	b.n	800d7c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6899      	ldr	r1, [r3, #8]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	899a      	ldrh	r2, [r3, #12]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	795b      	ldrb	r3, [r3, #5]
 800d632:	2001      	movs	r0, #1
 800d634:	9000      	str	r0, [sp, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f8ea 	bl	800d810 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2206      	movs	r2, #6
 800d64c:	761a      	strb	r2, [r3, #24]
      break;
 800d64e:	e0c0      	b.n	800d7d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	795b      	ldrb	r3, [r3, #5]
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 fd26 	bl	800e0a8 <USBH_LL_GetURBState>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	2b01      	cmp	r3, #1
 800d664:	d103      	bne.n	800d66e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2207      	movs	r2, #7
 800d66a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d66c:	e0ac      	b.n	800d7c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d66e:	7bbb      	ldrb	r3, [r7, #14]
 800d670:	2b05      	cmp	r3, #5
 800d672:	d105      	bne.n	800d680 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	220c      	movs	r2, #12
 800d678:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d67a:	2303      	movs	r3, #3
 800d67c:	73fb      	strb	r3, [r7, #15]
      break;
 800d67e:	e0a3      	b.n	800d7c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d680:	7bbb      	ldrb	r3, [r7, #14]
 800d682:	2b02      	cmp	r3, #2
 800d684:	d103      	bne.n	800d68e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2205      	movs	r2, #5
 800d68a:	761a      	strb	r2, [r3, #24]
      break;
 800d68c:	e09c      	b.n	800d7c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
 800d690:	2b04      	cmp	r3, #4
 800d692:	f040 8099 	bne.w	800d7c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	220b      	movs	r2, #11
 800d69a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d69c:	2302      	movs	r3, #2
 800d69e:	73fb      	strb	r3, [r7, #15]
      break;
 800d6a0:	e092      	b.n	800d7c8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	791b      	ldrb	r3, [r3, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f8d5 	bl	800d85a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2208      	movs	r2, #8
 800d6c0:	761a      	strb	r2, [r3, #24]

      break;
 800d6c2:	e086      	b.n	800d7d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	791b      	ldrb	r3, [r3, #4]
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fcec 	bl	800e0a8 <USBH_LL_GetURBState>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d105      	bne.n	800d6e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	220d      	movs	r2, #13
 800d6de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d6e4:	e072      	b.n	800d7cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d6e6:	7bbb      	ldrb	r3, [r7, #14]
 800d6e8:	2b04      	cmp	r3, #4
 800d6ea:	d103      	bne.n	800d6f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	220b      	movs	r2, #11
 800d6f0:	761a      	strb	r2, [r3, #24]
      break;
 800d6f2:	e06b      	b.n	800d7cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
 800d6f6:	2b05      	cmp	r3, #5
 800d6f8:	d168      	bne.n	800d7cc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d6fe:	e065      	b.n	800d7cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	795b      	ldrb	r3, [r3, #5]
 800d704:	2201      	movs	r2, #1
 800d706:	9200      	str	r2, [sp, #0]
 800d708:	2200      	movs	r2, #0
 800d70a:	2100      	movs	r1, #0
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f87f 	bl	800d810 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d718:	b29a      	uxth	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	220a      	movs	r2, #10
 800d722:	761a      	strb	r2, [r3, #24]
      break;
 800d724:	e055      	b.n	800d7d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	795b      	ldrb	r3, [r3, #5]
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fcbb 	bl	800e0a8 <USBH_LL_GetURBState>
 800d732:	4603      	mov	r3, r0
 800d734:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d736:	7bbb      	ldrb	r3, [r7, #14]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d105      	bne.n	800d748 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	220d      	movs	r2, #13
 800d744:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d746:	e043      	b.n	800d7d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d748:	7bbb      	ldrb	r3, [r7, #14]
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d103      	bne.n	800d756 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2209      	movs	r2, #9
 800d752:	761a      	strb	r2, [r3, #24]
      break;
 800d754:	e03c      	b.n	800d7d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d756:	7bbb      	ldrb	r3, [r7, #14]
 800d758:	2b04      	cmp	r3, #4
 800d75a:	d139      	bne.n	800d7d0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	220b      	movs	r2, #11
 800d760:	761a      	strb	r2, [r3, #24]
      break;
 800d762:	e035      	b.n	800d7d0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	7e5b      	ldrb	r3, [r3, #25]
 800d768:	3301      	adds	r3, #1
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	765a      	strb	r2, [r3, #25]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	7e5b      	ldrb	r3, [r3, #25]
 800d774:	2b02      	cmp	r3, #2
 800d776:	d806      	bhi.n	800d786 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d784:	e025      	b.n	800d7d2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d78c:	2106      	movs	r1, #6
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	795b      	ldrb	r3, [r3, #5]
 800d79c:	4619      	mov	r1, r3
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f90c 	bl	800d9bc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	791b      	ldrb	r3, [r3, #4]
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f906 	bl	800d9bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d7b6:	2302      	movs	r3, #2
 800d7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ba:	e00a      	b.n	800d7d2 <USBH_HandleControl+0x2de>

    default:
      break;
 800d7bc:	bf00      	nop
 800d7be:	e008      	b.n	800d7d2 <USBH_HandleControl+0x2de>
      break;
 800d7c0:	bf00      	nop
 800d7c2:	e006      	b.n	800d7d2 <USBH_HandleControl+0x2de>
      break;
 800d7c4:	bf00      	nop
 800d7c6:	e004      	b.n	800d7d2 <USBH_HandleControl+0x2de>
      break;
 800d7c8:	bf00      	nop
 800d7ca:	e002      	b.n	800d7d2 <USBH_HandleControl+0x2de>
      break;
 800d7cc:	bf00      	nop
 800d7ce:	e000      	b.n	800d7d2 <USBH_HandleControl+0x2de>
      break;
 800d7d0:	bf00      	nop
  }

  return status;
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af04      	add	r7, sp, #16
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d7ea:	79f9      	ldrb	r1, [r7, #7]
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	9303      	str	r3, [sp, #12]
 800d7f0:	2308      	movs	r3, #8
 800d7f2:	9302      	str	r3, [sp, #8]
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	9301      	str	r3, [sp, #4]
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	2200      	movs	r2, #0
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 fc20 	bl	800e046 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af04      	add	r7, sp, #16
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4611      	mov	r1, r2
 800d81c:	461a      	mov	r2, r3
 800d81e:	460b      	mov	r3, r1
 800d820:	80fb      	strh	r3, [r7, #6]
 800d822:	4613      	mov	r3, r2
 800d824:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d830:	2300      	movs	r3, #0
 800d832:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d834:	7979      	ldrb	r1, [r7, #5]
 800d836:	7e3b      	ldrb	r3, [r7, #24]
 800d838:	9303      	str	r3, [sp, #12]
 800d83a:	88fb      	ldrh	r3, [r7, #6]
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	2301      	movs	r3, #1
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	2300      	movs	r3, #0
 800d848:	2200      	movs	r2, #0
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f000 fbfb 	bl	800e046 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b088      	sub	sp, #32
 800d85e:	af04      	add	r7, sp, #16
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	4611      	mov	r1, r2
 800d866:	461a      	mov	r2, r3
 800d868:	460b      	mov	r3, r1
 800d86a:	80fb      	strh	r3, [r7, #6]
 800d86c:	4613      	mov	r3, r2
 800d86e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d870:	7979      	ldrb	r1, [r7, #5]
 800d872:	2300      	movs	r3, #0
 800d874:	9303      	str	r3, [sp, #12]
 800d876:	88fb      	ldrh	r3, [r7, #6]
 800d878:	9302      	str	r3, [sp, #8]
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	9301      	str	r3, [sp, #4]
 800d87e:	2301      	movs	r3, #1
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	2300      	movs	r3, #0
 800d884:	2201      	movs	r2, #1
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 fbdd 	bl	800e046 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d88c:	2300      	movs	r3, #0

}
 800d88e:	4618      	mov	r0, r3
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b088      	sub	sp, #32
 800d89a:	af04      	add	r7, sp, #16
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	80fb      	strh	r3, [r7, #6]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d8ba:	7979      	ldrb	r1, [r7, #5]
 800d8bc:	7e3b      	ldrb	r3, [r7, #24]
 800d8be:	9303      	str	r3, [sp, #12]
 800d8c0:	88fb      	ldrh	r3, [r7, #6]
 800d8c2:	9302      	str	r3, [sp, #8]
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	9300      	str	r3, [sp, #0]
 800d8cc:	2302      	movs	r3, #2
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f000 fbb8 	bl	800e046 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af04      	add	r7, sp, #16
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	80fb      	strh	r3, [r7, #6]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d8f6:	7979      	ldrb	r1, [r7, #5]
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	9303      	str	r3, [sp, #12]
 800d8fc:	88fb      	ldrh	r3, [r7, #6]
 800d8fe:	9302      	str	r3, [sp, #8]
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	2301      	movs	r3, #1
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	2302      	movs	r3, #2
 800d90a:	2201      	movs	r2, #1
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 fb9a 	bl	800e046 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d912:	2300      	movs	r3, #0
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af04      	add	r7, sp, #16
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	4608      	mov	r0, r1
 800d926:	4611      	mov	r1, r2
 800d928:	461a      	mov	r2, r3
 800d92a:	4603      	mov	r3, r0
 800d92c:	70fb      	strb	r3, [r7, #3]
 800d92e:	460b      	mov	r3, r1
 800d930:	70bb      	strb	r3, [r7, #2]
 800d932:	4613      	mov	r3, r2
 800d934:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d936:	7878      	ldrb	r0, [r7, #1]
 800d938:	78ba      	ldrb	r2, [r7, #2]
 800d93a:	78f9      	ldrb	r1, [r7, #3]
 800d93c:	8b3b      	ldrh	r3, [r7, #24]
 800d93e:	9302      	str	r3, [sp, #8]
 800d940:	7d3b      	ldrb	r3, [r7, #20]
 800d942:	9301      	str	r3, [sp, #4]
 800d944:	7c3b      	ldrb	r3, [r7, #16]
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	4603      	mov	r3, r0
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fb2d 	bl	800dfaa <USBH_LL_OpenPipe>

  return USBH_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b082      	sub	sp, #8
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d966:	78fb      	ldrb	r3, [r7, #3]
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fb4c 	bl	800e008 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d970:	2300      	movs	r3, #0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b084      	sub	sp, #16
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	460b      	mov	r3, r1
 800d984:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f836 	bl	800d9f8 <USBH_GetFreePipe>
 800d98c:	4603      	mov	r3, r0
 800d98e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d990:	89fb      	ldrh	r3, [r7, #14]
 800d992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d996:	4293      	cmp	r3, r2
 800d998:	d00a      	beq.n	800d9b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d99a:	78fa      	ldrb	r2, [r7, #3]
 800d99c:	89fb      	ldrh	r3, [r7, #14]
 800d99e:	f003 030f 	and.w	r3, r3, #15
 800d9a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9a6:	6879      	ldr	r1, [r7, #4]
 800d9a8:	33e0      	adds	r3, #224	; 0xe0
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	440b      	add	r3, r1
 800d9ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d9b0:	89fb      	ldrh	r3, [r7, #14]
 800d9b2:	b2db      	uxtb	r3, r3
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d9c8:	78fb      	ldrb	r3, [r7, #3]
 800d9ca:	2b0a      	cmp	r3, #10
 800d9cc:	d80d      	bhi.n	800d9ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	33e0      	adds	r3, #224	; 0xe0
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4413      	add	r3, r2
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	78fb      	ldrb	r3, [r7, #3]
 800d9dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	33e0      	adds	r3, #224	; 0xe0
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	440b      	add	r3, r1
 800d9e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800da04:	2300      	movs	r3, #0
 800da06:	73fb      	strb	r3, [r7, #15]
 800da08:	e00f      	b.n	800da2a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	33e0      	adds	r3, #224	; 0xe0
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d102      	bne.n	800da24 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800da1e:	7bfb      	ldrb	r3, [r7, #15]
 800da20:	b29b      	uxth	r3, r3
 800da22:	e007      	b.n	800da34 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	3301      	adds	r3, #1
 800da28:	73fb      	strb	r3, [r7, #15]
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
 800da2c:	2b0a      	cmp	r3, #10
 800da2e:	d9ec      	bls.n	800da0a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800da30:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800da34:	4618      	mov	r0, r3
 800da36:	3714      	adds	r7, #20
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
  	{

  	}
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a12      	ldr	r2, [pc, #72]	; (800daa8 <USBH_CDC_ReceiveCallback+0x54>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d11c      	bne.n	800da9e <USBH_CDC_ReceiveCallback+0x4a>
  	{
  		// Handles the data recived from the USB CDC host, here just printing it out to UART
  		rx_size = USBH_CDC_GetLastReceivedDataSize(phost);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7fe fb3e 	bl	800c0e6 <USBH_CDC_GetLastReceivedDataSize>
 800da6a:	4603      	mov	r3, r0
 800da6c:	461a      	mov	r2, r3
 800da6e:	4b0f      	ldr	r3, [pc, #60]	; (800daac <USBH_CDC_ReceiveCallback+0x58>)
 800da70:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, CDC_RX_Buffer, rx_size, HAL_MAX_DELAY);
 800da72:	4b0e      	ldr	r3, [pc, #56]	; (800daac <USBH_CDC_ReceiveCallback+0x58>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	b29a      	uxth	r2, r3
 800da78:	f04f 33ff 	mov.w	r3, #4294967295
 800da7c:	490c      	ldr	r1, [pc, #48]	; (800dab0 <USBH_CDC_ReceiveCallback+0x5c>)
 800da7e:	480d      	ldr	r0, [pc, #52]	; (800dab4 <USBH_CDC_ReceiveCallback+0x60>)
 800da80:	f7fb fd18 	bl	80094b4 <HAL_UART_Transmit>

		// Reset buffer and restart the callback function to receive more data
		memset(CDC_RX_Buffer,0,RX_BUFF_SIZE);
 800da84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da88:	2100      	movs	r1, #0
 800da8a:	4809      	ldr	r0, [pc, #36]	; (800dab0 <USBH_CDC_ReceiveCallback+0x5c>)
 800da8c:	f000 fbf4 	bl	800e278 <memset>
		USBH_CDC_Receive(phost, CDC_RX_Buffer, RX_BUFF_SIZE);
 800da90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da94:	4906      	ldr	r1, [pc, #24]	; (800dab0 <USBH_CDC_ReceiveCallback+0x5c>)
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7fe fb71 	bl	800c17e <USBH_CDC_Receive>
  	}

  	return;
 800da9c:	bf00      	nop
 800da9e:	bf00      	nop
}
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	240005fc 	.word	0x240005fc
 800daac:	240003e8 	.word	0x240003e8
 800dab0:	240009d4 	.word	0x240009d4
 800dab4:	240003f8 	.word	0x240003f8

0800dab8 <writeToDongle>:
{
	USBH_CDC_Receive(&hUsbHostFS, CDC_RX_Buffer, RX_BUFF_SIZE);
}

void writeToDongle(uint8_t * cmd)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	USBH_CDC_Transmit(&hUsbHostFS, cmd, strlen((char *)cmd));
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7f2 fc0d 	bl	80002e0 <strlen>
 800dac6:	4603      	mov	r3, r0
 800dac8:	461a      	mov	r2, r3
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	4803      	ldr	r0, [pc, #12]	; (800dadc <writeToDongle+0x24>)
 800dace:	f7fe fb28 	bl	800c122 <USBH_CDC_Transmit>
}
 800dad2:	bf00      	nop
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	240005fc 	.word	0x240005fc

0800dae0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dae4:	2201      	movs	r2, #1
 800dae6:	490e      	ldr	r1, [pc, #56]	; (800db20 <MX_USB_HOST_Init+0x40>)
 800dae8:	480e      	ldr	r0, [pc, #56]	; (800db24 <MX_USB_HOST_Init+0x44>)
 800daea:	f7fe fc51 	bl	800c390 <USBH_Init>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800daf4:	f7f3 fb1c 	bl	8001130 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800daf8:	490b      	ldr	r1, [pc, #44]	; (800db28 <MX_USB_HOST_Init+0x48>)
 800dafa:	480a      	ldr	r0, [pc, #40]	; (800db24 <MX_USB_HOST_Init+0x44>)
 800dafc:	f7fe fcd6 	bl	800c4ac <USBH_RegisterClass>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800db06:	f7f3 fb13 	bl	8001130 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800db0a:	4806      	ldr	r0, [pc, #24]	; (800db24 <MX_USB_HOST_Init+0x44>)
 800db0c:	f7fe fd5a 	bl	800c5c4 <USBH_Start>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800db16:	f7f3 fb0b 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800db1a:	bf00      	nop
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	0800db41 	.word	0x0800db41
 800db24:	240005fc 	.word	0x240005fc
 800db28:	24000010 	.word	0x24000010

0800db2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800db30:	4802      	ldr	r0, [pc, #8]	; (800db3c <MX_USB_HOST_Process+0x10>)
 800db32:	f7fe fd57 	bl	800c5e4 <USBH_Process>
}
 800db36:	bf00      	nop
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	240005fc 	.word	0x240005fc

0800db40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800db4c:	78fb      	ldrb	r3, [r7, #3]
 800db4e:	3b01      	subs	r3, #1
 800db50:	2b04      	cmp	r3, #4
 800db52:	d866      	bhi.n	800dc22 <USBH_UserProcess+0xe2>
 800db54:	a201      	add	r2, pc, #4	; (adr r2, 800db5c <USBH_UserProcess+0x1c>)
 800db56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5a:	bf00      	nop
 800db5c:	0800dc23 	.word	0x0800dc23
 800db60:	0800db9f 	.word	0x0800db9f
 800db64:	0800dc23 	.word	0x0800dc23
 800db68:	0800dbf5 	.word	0x0800dbf5
 800db6c:	0800db71 	.word	0x0800db71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800db70:	4b2f      	ldr	r3, [pc, #188]	; (800dc30 <USBH_UserProcess+0xf0>)
 800db72:	2203      	movs	r2, #3
 800db74:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800db76:	4b2f      	ldr	r3, [pc, #188]	; (800dc34 <USBH_UserProcess+0xf4>)
 800db78:	2200      	movs	r2, #0
 800db7a:	701a      	strb	r2, [r3, #0]

  // Turn on Red LED, turn off Green and Yellow LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800db7c:	2200      	movs	r2, #0
 800db7e:	2101      	movs	r1, #1
 800db80:	482d      	ldr	r0, [pc, #180]	; (800dc38 <USBH_UserProcess+0xf8>)
 800db82:	f7f5 fbd5 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800db86:	2200      	movs	r2, #0
 800db88:	2102      	movs	r1, #2
 800db8a:	482c      	ldr	r0, [pc, #176]	; (800dc3c <USBH_UserProcess+0xfc>)
 800db8c:	f7f5 fbd0 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800db90:	2201      	movs	r2, #1
 800db92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800db96:	4828      	ldr	r0, [pc, #160]	; (800dc38 <USBH_UserProcess+0xf8>)
 800db98:	f7f5 fbca 	bl	8003330 <HAL_GPIO_WritePin>
  break;
 800db9c:	e044      	b.n	800dc28 <USBH_UserProcess+0xe8>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800db9e:	4b24      	ldr	r3, [pc, #144]	; (800dc30 <USBH_UserProcess+0xf0>)
 800dba0:	2202      	movs	r2, #2
 800dba2:	701a      	strb	r2, [r3, #0]
  // Check if BleuIO firmware is running
  // (idProduct:0x6001 = bootloader, idProduct:0x6002 = bleuio fw)
  if(phost->device.DevDesc.idProduct == 0x6002)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800dbaa:	f246 0202 	movw	r2, #24578	; 0x6002
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d139      	bne.n	800dc26 <USBH_UserProcess+0xe6>
  {
	  isBleuIOReady = true;
 800dbb2:	4b20      	ldr	r3, [pc, #128]	; (800dc34 <USBH_UserProcess+0xf4>)
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	701a      	strb	r2, [r3, #0]
	  // Sends message to uart that BleuIO is connected and ready
	  HAL_UART_Transmit(&huart3, (uint8_t*)BLEUIO_READY, strlen(BLEUIO_READY), HAL_MAX_DELAY);
 800dbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbbc:	2219      	movs	r2, #25
 800dbbe:	4920      	ldr	r1, [pc, #128]	; (800dc40 <USBH_UserProcess+0x100>)
 800dbc0:	4820      	ldr	r0, [pc, #128]	; (800dc44 <USBH_UserProcess+0x104>)
 800dbc2:	f7fb fc77 	bl	80094b4 <HAL_UART_Transmit>

	  // Turn on Green LED, turn off Yellow and Red LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	2101      	movs	r1, #1
 800dbca:	481b      	ldr	r0, [pc, #108]	; (800dc38 <USBH_UserProcess+0xf8>)
 800dbcc:	f7f5 fbb0 	bl	8003330 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	2102      	movs	r1, #2
 800dbd4:	4819      	ldr	r0, [pc, #100]	; (800dc3c <USBH_UserProcess+0xfc>)
 800dbd6:	f7f5 fbab 	bl	8003330 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dbe0:	4815      	ldr	r0, [pc, #84]	; (800dc38 <USBH_UserProcess+0xf8>)
 800dbe2:	f7f5 fba5 	bl	8003330 <HAL_GPIO_WritePin>

	  // Start receiving from usb
	  USBH_CDC_Receive(&hUsbHostFS, CDC_RX_Buffer, RX_BUFF_SIZE);
 800dbe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbea:	4917      	ldr	r1, [pc, #92]	; (800dc48 <USBH_UserProcess+0x108>)
 800dbec:	4817      	ldr	r0, [pc, #92]	; (800dc4c <USBH_UserProcess+0x10c>)
 800dbee:	f7fe fac6 	bl	800c17e <USBH_CDC_Receive>
  }
  break;
 800dbf2:	e018      	b.n	800dc26 <USBH_UserProcess+0xe6>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dbf4:	4b0e      	ldr	r3, [pc, #56]	; (800dc30 <USBH_UserProcess+0xf0>)
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800dbfa:	4b0e      	ldr	r3, [pc, #56]	; (800dc34 <USBH_UserProcess+0xf4>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	701a      	strb	r2, [r3, #0]
  // Turn on Yellow LED, turn off Green and Red LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800dc00:	2200      	movs	r2, #0
 800dc02:	2101      	movs	r1, #1
 800dc04:	480c      	ldr	r0, [pc, #48]	; (800dc38 <USBH_UserProcess+0xf8>)
 800dc06:	f7f5 fb93 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	2102      	movs	r1, #2
 800dc0e:	480b      	ldr	r0, [pc, #44]	; (800dc3c <USBH_UserProcess+0xfc>)
 800dc10:	f7f5 fb8e 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800dc14:	2200      	movs	r2, #0
 800dc16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dc1a:	4807      	ldr	r0, [pc, #28]	; (800dc38 <USBH_UserProcess+0xf8>)
 800dc1c:	f7f5 fb88 	bl	8003330 <HAL_GPIO_WritePin>
  break;
 800dc20:	e002      	b.n	800dc28 <USBH_UserProcess+0xe8>

  default:
  break;
 800dc22:	bf00      	nop
 800dc24:	e000      	b.n	800dc28 <USBH_UserProcess+0xe8>
  break;
 800dc26:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	240003ec 	.word	0x240003ec
 800dc34:	2400048c 	.word	0x2400048c
 800dc38:	58020400 	.word	0x58020400
 800dc3c:	58021000 	.word	0x58021000
 800dc40:	08010f80 	.word	0x08010f80
 800dc44:	240003f8 	.word	0x240003f8
 800dc48:	240009d4 	.word	0x240009d4
 800dc4c:	240005fc 	.word	0x240005fc

0800dc50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b0b8      	sub	sp, #224	; 0xe0
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	601a      	str	r2, [r3, #0]
 800dc60:	605a      	str	r2, [r3, #4]
 800dc62:	609a      	str	r2, [r3, #8]
 800dc64:	60da      	str	r2, [r3, #12]
 800dc66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dc68:	f107 0310 	add.w	r3, r7, #16
 800dc6c:	22bc      	movs	r2, #188	; 0xbc
 800dc6e:	2100      	movs	r1, #0
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 fb01 	bl	800e278 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a3b      	ldr	r2, [pc, #236]	; (800dd68 <HAL_HCD_MspInit+0x118>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d16e      	bne.n	800dd5e <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dc80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dc84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800dc86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dc8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dc8e:	f107 0310 	add.w	r3, r7, #16
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7f9 fd0c 	bl	80076b0 <HAL_RCCEx_PeriphCLKConfig>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d001      	beq.n	800dca2 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800dc9e:	f7f3 fa47 	bl	8001130 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800dca2:	f7f8 fd59 	bl	8006758 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dca6:	4b31      	ldr	r3, [pc, #196]	; (800dd6c <HAL_HCD_MspInit+0x11c>)
 800dca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dcac:	4a2f      	ldr	r2, [pc, #188]	; (800dd6c <HAL_HCD_MspInit+0x11c>)
 800dcae:	f043 0301 	orr.w	r3, r3, #1
 800dcb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dcb6:	4b2d      	ldr	r3, [pc, #180]	; (800dd6c <HAL_HCD_MspInit+0x11c>)
 800dcb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	60fb      	str	r3, [r7, #12]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800dcc4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800dcc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dccc:	2302      	movs	r3, #2
 800dcce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800dcde:	230a      	movs	r3, #10
 800dce0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dce4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dce8:	4619      	mov	r1, r3
 800dcea:	4821      	ldr	r0, [pc, #132]	; (800dd70 <HAL_HCD_MspInit+0x120>)
 800dcec:	f7f5 f970 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dcf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dd08:	4619      	mov	r1, r3
 800dd0a:	4819      	ldr	r0, [pc, #100]	; (800dd70 <HAL_HCD_MspInit+0x120>)
 800dd0c:	f7f5 f960 	bl	8002fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd10:	4b16      	ldr	r3, [pc, #88]	; (800dd6c <HAL_HCD_MspInit+0x11c>)
 800dd12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800dd16:	4a15      	ldr	r2, [pc, #84]	; (800dd6c <HAL_HCD_MspInit+0x11c>)
 800dd18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800dd20:	4b12      	ldr	r3, [pc, #72]	; (800dd6c <HAL_HCD_MspInit+0x11c>)
 800dd22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800dd26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd2a:	60bb      	str	r3, [r7, #8]
 800dd2c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2100      	movs	r1, #0
 800dd32:	2062      	movs	r0, #98	; 0x62
 800dd34:	f7f3 ff91 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800dd38:	2062      	movs	r0, #98	; 0x62
 800dd3a:	f7f3 ffa8 	bl	8001c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800dd3e:	2200      	movs	r2, #0
 800dd40:	2100      	movs	r1, #0
 800dd42:	2063      	movs	r0, #99	; 0x63
 800dd44:	f7f3 ff89 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800dd48:	2063      	movs	r0, #99	; 0x63
 800dd4a:	f7f3 ffa0 	bl	8001c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2100      	movs	r1, #0
 800dd52:	2065      	movs	r0, #101	; 0x65
 800dd54:	f7f3 ff81 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dd58:	2065      	movs	r0, #101	; 0x65
 800dd5a:	f7f3 ff98 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd5e:	bf00      	nop
 800dd60:	37e0      	adds	r7, #224	; 0xe0
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	40080000 	.word	0x40080000
 800dd6c:	58024400 	.word	0x58024400
 800dd70:	58020000 	.word	0x58020000

0800dd74 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7ff f801 	bl	800cd8a <USBH_LL_IncTimer>
}
 800dd88:	bf00      	nop
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7ff f839 	bl	800ce16 <USBH_LL_Connect>
}
 800dda4:	bf00      	nop
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7ff f842 	bl	800ce44 <USBH_LL_Disconnect>
}
 800ddc0:	bf00      	nop
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	70fb      	strb	r3, [r7, #3]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe fff3 	bl	800cdde <USBH_LL_PortEnabled>
}
 800ddf8:	bf00      	nop
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fff3 	bl	800cdfa <USBH_LL_PortDisabled>
}
 800de14:	bf00      	nop
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d129      	bne.n	800de82 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800de2e:	4a17      	ldr	r2, [pc, #92]	; (800de8c <USBH_LL_Init+0x70>)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a14      	ldr	r2, [pc, #80]	; (800de8c <USBH_LL_Init+0x70>)
 800de3a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de3e:	4b13      	ldr	r3, [pc, #76]	; (800de8c <USBH_LL_Init+0x70>)
 800de40:	4a13      	ldr	r2, [pc, #76]	; (800de90 <USBH_LL_Init+0x74>)
 800de42:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800de44:	4b11      	ldr	r3, [pc, #68]	; (800de8c <USBH_LL_Init+0x70>)
 800de46:	2210      	movs	r2, #16
 800de48:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800de4a:	4b10      	ldr	r3, [pc, #64]	; (800de8c <USBH_LL_Init+0x70>)
 800de4c:	2201      	movs	r2, #1
 800de4e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800de50:	4b0e      	ldr	r3, [pc, #56]	; (800de8c <USBH_LL_Init+0x70>)
 800de52:	2200      	movs	r2, #0
 800de54:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800de56:	4b0d      	ldr	r3, [pc, #52]	; (800de8c <USBH_LL_Init+0x70>)
 800de58:	2202      	movs	r2, #2
 800de5a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de5c:	4b0b      	ldr	r3, [pc, #44]	; (800de8c <USBH_LL_Init+0x70>)
 800de5e:	2200      	movs	r2, #0
 800de60:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800de62:	480a      	ldr	r0, [pc, #40]	; (800de8c <USBH_LL_Init+0x70>)
 800de64:	f7f5 fa7d 	bl	8003362 <HAL_HCD_Init>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800de6e:	f7f3 f95f 	bl	8001130 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800de72:	4806      	ldr	r0, [pc, #24]	; (800de8c <USBH_LL_Init+0x70>)
 800de74:	f7f5 fe5a 	bl	8003b2c <HAL_HCD_GetCurrentFrame>
 800de78:	4603      	mov	r3, r0
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7fe ff75 	bl	800cd6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	24000dd4 	.word	0x24000dd4
 800de90:	40080000 	.word	0x40080000

0800de94 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800deaa:	4618      	mov	r0, r3
 800deac:	f7f5 fdc8 	bl	8003a40 <HAL_HCD_Start>
 800deb0:	4603      	mov	r3, r0
 800deb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 f95c 	bl	800e174 <USBH_Get_USB_Status>
 800debc:	4603      	mov	r3, r0
 800debe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b084      	sub	sp, #16
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7f5 fdd0 	bl	8003a86 <HAL_HCD_Stop>
 800dee6:	4603      	mov	r3, r0
 800dee8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800deea:	7bfb      	ldrb	r3, [r7, #15]
 800deec:	4618      	mov	r0, r3
 800deee:	f000 f941 	bl	800e174 <USBH_Get_USB_Status>
 800def2:	4603      	mov	r3, r0
 800def4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800def6:	7bbb      	ldrb	r3, [r7, #14]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800df08:	2301      	movs	r3, #1
 800df0a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df12:	4618      	mov	r0, r3
 800df14:	f7f5 fe18 	bl	8003b48 <HAL_HCD_GetCurrentSpeed>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d00c      	beq.n	800df38 <USBH_LL_GetSpeed+0x38>
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d80d      	bhi.n	800df3e <USBH_LL_GetSpeed+0x3e>
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <USBH_LL_GetSpeed+0x2c>
 800df26:	2b01      	cmp	r3, #1
 800df28:	d003      	beq.n	800df32 <USBH_LL_GetSpeed+0x32>
 800df2a:	e008      	b.n	800df3e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800df2c:	2300      	movs	r3, #0
 800df2e:	73fb      	strb	r3, [r7, #15]
    break;
 800df30:	e008      	b.n	800df44 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800df32:	2301      	movs	r3, #1
 800df34:	73fb      	strb	r3, [r7, #15]
    break;
 800df36:	e005      	b.n	800df44 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800df38:	2302      	movs	r3, #2
 800df3a:	73fb      	strb	r3, [r7, #15]
    break;
 800df3c:	e002      	b.n	800df44 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800df3e:	2301      	movs	r3, #1
 800df40:	73fb      	strb	r3, [r7, #15]
    break;
 800df42:	bf00      	nop
  }
  return  speed;
 800df44:	7bfb      	ldrb	r3, [r7, #15]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b084      	sub	sp, #16
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df5a:	2300      	movs	r3, #0
 800df5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df64:	4618      	mov	r0, r3
 800df66:	f7f5 fdab 	bl	8003ac0 <HAL_HCD_ResetPort>
 800df6a:	4603      	mov	r3, r0
 800df6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df6e:	7bfb      	ldrb	r3, [r7, #15]
 800df70:	4618      	mov	r0, r3
 800df72:	f000 f8ff 	bl	800e174 <USBH_Get_USB_Status>
 800df76:	4603      	mov	r3, r0
 800df78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	460b      	mov	r3, r1
 800df8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df96:	78fa      	ldrb	r2, [r7, #3]
 800df98:	4611      	mov	r1, r2
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7f5 fdb2 	bl	8003b04 <HAL_HCD_HC_GetXferCount>
 800dfa0:	4603      	mov	r3, r0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dfaa:	b590      	push	{r4, r7, lr}
 800dfac:	b089      	sub	sp, #36	; 0x24
 800dfae:	af04      	add	r7, sp, #16
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	4608      	mov	r0, r1
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	4603      	mov	r3, r0
 800dfba:	70fb      	strb	r3, [r7, #3]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70bb      	strb	r3, [r7, #2]
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dfd2:	787c      	ldrb	r4, [r7, #1]
 800dfd4:	78ba      	ldrb	r2, [r7, #2]
 800dfd6:	78f9      	ldrb	r1, [r7, #3]
 800dfd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dfe0:	9301      	str	r3, [sp, #4]
 800dfe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	4623      	mov	r3, r4
 800dfea:	f7f5 fa1c 	bl	8003426 <HAL_HCD_HC_Init>
 800dfee:	4603      	mov	r3, r0
 800dff0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 f8bd 	bl	800e174 <USBH_Get_USB_Status>
 800dffa:	4603      	mov	r3, r0
 800dffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dffe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	bd90      	pop	{r4, r7, pc}

0800e008 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	460b      	mov	r3, r1
 800e012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e022:	78fa      	ldrb	r2, [r7, #3]
 800e024:	4611      	mov	r1, r2
 800e026:	4618      	mov	r0, r3
 800e028:	f7f5 fa8c 	bl	8003544 <HAL_HCD_HC_Halt>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	4618      	mov	r0, r3
 800e034:	f000 f89e 	bl	800e174 <USBH_Get_USB_Status>
 800e038:	4603      	mov	r3, r0
 800e03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e046:	b590      	push	{r4, r7, lr}
 800e048:	b089      	sub	sp, #36	; 0x24
 800e04a:	af04      	add	r7, sp, #16
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	4608      	mov	r0, r1
 800e050:	4611      	mov	r1, r2
 800e052:	461a      	mov	r2, r3
 800e054:	4603      	mov	r3, r0
 800e056:	70fb      	strb	r3, [r7, #3]
 800e058:	460b      	mov	r3, r1
 800e05a:	70bb      	strb	r3, [r7, #2]
 800e05c:	4613      	mov	r3, r2
 800e05e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e060:	2300      	movs	r3, #0
 800e062:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e06e:	787c      	ldrb	r4, [r7, #1]
 800e070:	78ba      	ldrb	r2, [r7, #2]
 800e072:	78f9      	ldrb	r1, [r7, #3]
 800e074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e078:	9303      	str	r3, [sp, #12]
 800e07a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e07c:	9302      	str	r3, [sp, #8]
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	9301      	str	r3, [sp, #4]
 800e082:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e086:	9300      	str	r3, [sp, #0]
 800e088:	4623      	mov	r3, r4
 800e08a:	f7f5 fa7f 	bl	800358c <HAL_HCD_HC_SubmitRequest>
 800e08e:	4603      	mov	r3, r0
 800e090:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	4618      	mov	r0, r3
 800e096:	f000 f86d 	bl	800e174 <USBH_Get_USB_Status>
 800e09a:	4603      	mov	r3, r0
 800e09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3714      	adds	r7, #20
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd90      	pop	{r4, r7, pc}

0800e0a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0ba:	78fa      	ldrb	r2, [r7, #3]
 800e0bc:	4611      	mov	r1, r2
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f5 fd0c 	bl	8003adc <HAL_HCD_HC_GetURBState>
 800e0c4:	4603      	mov	r3, r0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b082      	sub	sp, #8
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d103      	bne.n	800e0ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e0e4:	78fb      	ldrb	r3, [r7, #3]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 f870 	bl	800e1cc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e0ec:	20c8      	movs	r0, #200	; 0xc8
 800e0ee:	f7f3 fc95 	bl	8001a1c <HAL_Delay>
  return USBH_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	70fb      	strb	r3, [r7, #3]
 800e108:	4613      	mov	r3, r2
 800e10a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e112:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	212c      	movs	r1, #44	; 0x2c
 800e11a:	fb01 f303 	mul.w	r3, r1, r3
 800e11e:	4413      	add	r3, r2
 800e120:	333b      	adds	r3, #59	; 0x3b
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d009      	beq.n	800e13c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e128:	78fb      	ldrb	r3, [r7, #3]
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	212c      	movs	r1, #44	; 0x2c
 800e12e:	fb01 f303 	mul.w	r3, r1, r3
 800e132:	4413      	add	r3, r2
 800e134:	3354      	adds	r3, #84	; 0x54
 800e136:	78ba      	ldrb	r2, [r7, #2]
 800e138:	701a      	strb	r2, [r3, #0]
 800e13a:	e008      	b.n	800e14e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e13c:	78fb      	ldrb	r3, [r7, #3]
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	212c      	movs	r1, #44	; 0x2c
 800e142:	fb01 f303 	mul.w	r3, r1, r3
 800e146:	4413      	add	r3, r2
 800e148:	3355      	adds	r3, #85	; 0x55
 800e14a:	78ba      	ldrb	r2, [r7, #2]
 800e14c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	3714      	adds	r7, #20
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7f3 fc59 	bl	8001a1c <HAL_Delay>
}
 800e16a:	bf00      	nop
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
	...

0800e174 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	4603      	mov	r3, r0
 800e17c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e182:	79fb      	ldrb	r3, [r7, #7]
 800e184:	2b03      	cmp	r3, #3
 800e186:	d817      	bhi.n	800e1b8 <USBH_Get_USB_Status+0x44>
 800e188:	a201      	add	r2, pc, #4	; (adr r2, 800e190 <USBH_Get_USB_Status+0x1c>)
 800e18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18e:	bf00      	nop
 800e190:	0800e1a1 	.word	0x0800e1a1
 800e194:	0800e1a7 	.word	0x0800e1a7
 800e198:	0800e1ad 	.word	0x0800e1ad
 800e19c:	0800e1b3 	.word	0x0800e1b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a4:	e00b      	b.n	800e1be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1aa:	e008      	b.n	800e1be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b0:	e005      	b.n	800e1be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e1b2:	2302      	movs	r3, #2
 800e1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b6:	e002      	b.n	800e1be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e1bc:	bf00      	nop
  }
  return usb_status;
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3714      	adds	r7, #20
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d102      	bne.n	800e1e6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	73fb      	strb	r3, [r7, #15]
 800e1e4:	e001      	b.n	800e1ea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,(GPIO_PinState)data);
 800e1ea:	7bfb      	ldrb	r3, [r7, #15]
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e1f2:	4803      	ldr	r0, [pc, #12]	; (800e200 <MX_DriverVbusFS+0x34>)
 800e1f4:	f7f5 f89c 	bl	8003330 <HAL_GPIO_WritePin>
}
 800e1f8:	bf00      	nop
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	58020c00 	.word	0x58020c00

0800e204 <__errno>:
 800e204:	4b01      	ldr	r3, [pc, #4]	; (800e20c <__errno+0x8>)
 800e206:	6818      	ldr	r0, [r3, #0]
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	24000030 	.word	0x24000030

0800e210 <__libc_init_array>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	4d0d      	ldr	r5, [pc, #52]	; (800e248 <__libc_init_array+0x38>)
 800e214:	4c0d      	ldr	r4, [pc, #52]	; (800e24c <__libc_init_array+0x3c>)
 800e216:	1b64      	subs	r4, r4, r5
 800e218:	10a4      	asrs	r4, r4, #2
 800e21a:	2600      	movs	r6, #0
 800e21c:	42a6      	cmp	r6, r4
 800e21e:	d109      	bne.n	800e234 <__libc_init_array+0x24>
 800e220:	4d0b      	ldr	r5, [pc, #44]	; (800e250 <__libc_init_array+0x40>)
 800e222:	4c0c      	ldr	r4, [pc, #48]	; (800e254 <__libc_init_array+0x44>)
 800e224:	f002 fe2c 	bl	8010e80 <_init>
 800e228:	1b64      	subs	r4, r4, r5
 800e22a:	10a4      	asrs	r4, r4, #2
 800e22c:	2600      	movs	r6, #0
 800e22e:	42a6      	cmp	r6, r4
 800e230:	d105      	bne.n	800e23e <__libc_init_array+0x2e>
 800e232:	bd70      	pop	{r4, r5, r6, pc}
 800e234:	f855 3b04 	ldr.w	r3, [r5], #4
 800e238:	4798      	blx	r3
 800e23a:	3601      	adds	r6, #1
 800e23c:	e7ee      	b.n	800e21c <__libc_init_array+0xc>
 800e23e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e242:	4798      	blx	r3
 800e244:	3601      	adds	r6, #1
 800e246:	e7f2      	b.n	800e22e <__libc_init_array+0x1e>
 800e248:	080113bc 	.word	0x080113bc
 800e24c:	080113bc 	.word	0x080113bc
 800e250:	080113bc 	.word	0x080113bc
 800e254:	080113c0 	.word	0x080113c0

0800e258 <malloc>:
 800e258:	4b02      	ldr	r3, [pc, #8]	; (800e264 <malloc+0xc>)
 800e25a:	4601      	mov	r1, r0
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	f000 b863 	b.w	800e328 <_malloc_r>
 800e262:	bf00      	nop
 800e264:	24000030 	.word	0x24000030

0800e268 <free>:
 800e268:	4b02      	ldr	r3, [pc, #8]	; (800e274 <free+0xc>)
 800e26a:	4601      	mov	r1, r0
 800e26c:	6818      	ldr	r0, [r3, #0]
 800e26e:	f000 b80b 	b.w	800e288 <_free_r>
 800e272:	bf00      	nop
 800e274:	24000030 	.word	0x24000030

0800e278 <memset>:
 800e278:	4402      	add	r2, r0
 800e27a:	4603      	mov	r3, r0
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d100      	bne.n	800e282 <memset+0xa>
 800e280:	4770      	bx	lr
 800e282:	f803 1b01 	strb.w	r1, [r3], #1
 800e286:	e7f9      	b.n	800e27c <memset+0x4>

0800e288 <_free_r>:
 800e288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e28a:	2900      	cmp	r1, #0
 800e28c:	d048      	beq.n	800e320 <_free_r+0x98>
 800e28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e292:	9001      	str	r0, [sp, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	f1a1 0404 	sub.w	r4, r1, #4
 800e29a:	bfb8      	it	lt
 800e29c:	18e4      	addlt	r4, r4, r3
 800e29e:	f001 fb33 	bl	800f908 <__malloc_lock>
 800e2a2:	4a20      	ldr	r2, [pc, #128]	; (800e324 <_free_r+0x9c>)
 800e2a4:	9801      	ldr	r0, [sp, #4]
 800e2a6:	6813      	ldr	r3, [r2, #0]
 800e2a8:	4615      	mov	r5, r2
 800e2aa:	b933      	cbnz	r3, 800e2ba <_free_r+0x32>
 800e2ac:	6063      	str	r3, [r4, #4]
 800e2ae:	6014      	str	r4, [r2, #0]
 800e2b0:	b003      	add	sp, #12
 800e2b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2b6:	f001 bb2d 	b.w	800f914 <__malloc_unlock>
 800e2ba:	42a3      	cmp	r3, r4
 800e2bc:	d90b      	bls.n	800e2d6 <_free_r+0x4e>
 800e2be:	6821      	ldr	r1, [r4, #0]
 800e2c0:	1862      	adds	r2, r4, r1
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	bf04      	itt	eq
 800e2c6:	681a      	ldreq	r2, [r3, #0]
 800e2c8:	685b      	ldreq	r3, [r3, #4]
 800e2ca:	6063      	str	r3, [r4, #4]
 800e2cc:	bf04      	itt	eq
 800e2ce:	1852      	addeq	r2, r2, r1
 800e2d0:	6022      	streq	r2, [r4, #0]
 800e2d2:	602c      	str	r4, [r5, #0]
 800e2d4:	e7ec      	b.n	800e2b0 <_free_r+0x28>
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	b10b      	cbz	r3, 800e2e0 <_free_r+0x58>
 800e2dc:	42a3      	cmp	r3, r4
 800e2de:	d9fa      	bls.n	800e2d6 <_free_r+0x4e>
 800e2e0:	6811      	ldr	r1, [r2, #0]
 800e2e2:	1855      	adds	r5, r2, r1
 800e2e4:	42a5      	cmp	r5, r4
 800e2e6:	d10b      	bne.n	800e300 <_free_r+0x78>
 800e2e8:	6824      	ldr	r4, [r4, #0]
 800e2ea:	4421      	add	r1, r4
 800e2ec:	1854      	adds	r4, r2, r1
 800e2ee:	42a3      	cmp	r3, r4
 800e2f0:	6011      	str	r1, [r2, #0]
 800e2f2:	d1dd      	bne.n	800e2b0 <_free_r+0x28>
 800e2f4:	681c      	ldr	r4, [r3, #0]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	6053      	str	r3, [r2, #4]
 800e2fa:	4421      	add	r1, r4
 800e2fc:	6011      	str	r1, [r2, #0]
 800e2fe:	e7d7      	b.n	800e2b0 <_free_r+0x28>
 800e300:	d902      	bls.n	800e308 <_free_r+0x80>
 800e302:	230c      	movs	r3, #12
 800e304:	6003      	str	r3, [r0, #0]
 800e306:	e7d3      	b.n	800e2b0 <_free_r+0x28>
 800e308:	6825      	ldr	r5, [r4, #0]
 800e30a:	1961      	adds	r1, r4, r5
 800e30c:	428b      	cmp	r3, r1
 800e30e:	bf04      	itt	eq
 800e310:	6819      	ldreq	r1, [r3, #0]
 800e312:	685b      	ldreq	r3, [r3, #4]
 800e314:	6063      	str	r3, [r4, #4]
 800e316:	bf04      	itt	eq
 800e318:	1949      	addeq	r1, r1, r5
 800e31a:	6021      	streq	r1, [r4, #0]
 800e31c:	6054      	str	r4, [r2, #4]
 800e31e:	e7c7      	b.n	800e2b0 <_free_r+0x28>
 800e320:	b003      	add	sp, #12
 800e322:	bd30      	pop	{r4, r5, pc}
 800e324:	240003f0 	.word	0x240003f0

0800e328 <_malloc_r>:
 800e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32a:	1ccd      	adds	r5, r1, #3
 800e32c:	f025 0503 	bic.w	r5, r5, #3
 800e330:	3508      	adds	r5, #8
 800e332:	2d0c      	cmp	r5, #12
 800e334:	bf38      	it	cc
 800e336:	250c      	movcc	r5, #12
 800e338:	2d00      	cmp	r5, #0
 800e33a:	4606      	mov	r6, r0
 800e33c:	db01      	blt.n	800e342 <_malloc_r+0x1a>
 800e33e:	42a9      	cmp	r1, r5
 800e340:	d903      	bls.n	800e34a <_malloc_r+0x22>
 800e342:	230c      	movs	r3, #12
 800e344:	6033      	str	r3, [r6, #0]
 800e346:	2000      	movs	r0, #0
 800e348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e34a:	f001 fadd 	bl	800f908 <__malloc_lock>
 800e34e:	4921      	ldr	r1, [pc, #132]	; (800e3d4 <_malloc_r+0xac>)
 800e350:	680a      	ldr	r2, [r1, #0]
 800e352:	4614      	mov	r4, r2
 800e354:	b99c      	cbnz	r4, 800e37e <_malloc_r+0x56>
 800e356:	4f20      	ldr	r7, [pc, #128]	; (800e3d8 <_malloc_r+0xb0>)
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	b923      	cbnz	r3, 800e366 <_malloc_r+0x3e>
 800e35c:	4621      	mov	r1, r4
 800e35e:	4630      	mov	r0, r6
 800e360:	f000 fc80 	bl	800ec64 <_sbrk_r>
 800e364:	6038      	str	r0, [r7, #0]
 800e366:	4629      	mov	r1, r5
 800e368:	4630      	mov	r0, r6
 800e36a:	f000 fc7b 	bl	800ec64 <_sbrk_r>
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	d123      	bne.n	800e3ba <_malloc_r+0x92>
 800e372:	230c      	movs	r3, #12
 800e374:	6033      	str	r3, [r6, #0]
 800e376:	4630      	mov	r0, r6
 800e378:	f001 facc 	bl	800f914 <__malloc_unlock>
 800e37c:	e7e3      	b.n	800e346 <_malloc_r+0x1e>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	1b5b      	subs	r3, r3, r5
 800e382:	d417      	bmi.n	800e3b4 <_malloc_r+0x8c>
 800e384:	2b0b      	cmp	r3, #11
 800e386:	d903      	bls.n	800e390 <_malloc_r+0x68>
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	441c      	add	r4, r3
 800e38c:	6025      	str	r5, [r4, #0]
 800e38e:	e004      	b.n	800e39a <_malloc_r+0x72>
 800e390:	6863      	ldr	r3, [r4, #4]
 800e392:	42a2      	cmp	r2, r4
 800e394:	bf0c      	ite	eq
 800e396:	600b      	streq	r3, [r1, #0]
 800e398:	6053      	strne	r3, [r2, #4]
 800e39a:	4630      	mov	r0, r6
 800e39c:	f001 faba 	bl	800f914 <__malloc_unlock>
 800e3a0:	f104 000b 	add.w	r0, r4, #11
 800e3a4:	1d23      	adds	r3, r4, #4
 800e3a6:	f020 0007 	bic.w	r0, r0, #7
 800e3aa:	1ac2      	subs	r2, r0, r3
 800e3ac:	d0cc      	beq.n	800e348 <_malloc_r+0x20>
 800e3ae:	1a1b      	subs	r3, r3, r0
 800e3b0:	50a3      	str	r3, [r4, r2]
 800e3b2:	e7c9      	b.n	800e348 <_malloc_r+0x20>
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	6864      	ldr	r4, [r4, #4]
 800e3b8:	e7cc      	b.n	800e354 <_malloc_r+0x2c>
 800e3ba:	1cc4      	adds	r4, r0, #3
 800e3bc:	f024 0403 	bic.w	r4, r4, #3
 800e3c0:	42a0      	cmp	r0, r4
 800e3c2:	d0e3      	beq.n	800e38c <_malloc_r+0x64>
 800e3c4:	1a21      	subs	r1, r4, r0
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	f000 fc4c 	bl	800ec64 <_sbrk_r>
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	d1dd      	bne.n	800e38c <_malloc_r+0x64>
 800e3d0:	e7cf      	b.n	800e372 <_malloc_r+0x4a>
 800e3d2:	bf00      	nop
 800e3d4:	240003f0 	.word	0x240003f0
 800e3d8:	240003f4 	.word	0x240003f4

0800e3dc <__cvt>:
 800e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3de:	ed2d 8b02 	vpush	{d8}
 800e3e2:	eeb0 8b40 	vmov.f64	d8, d0
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	4617      	mov	r7, r2
 800e3ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e3ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e3ee:	ee18 2a90 	vmov	r2, s17
 800e3f2:	f025 0520 	bic.w	r5, r5, #32
 800e3f6:	2a00      	cmp	r2, #0
 800e3f8:	bfb6      	itet	lt
 800e3fa:	222d      	movlt	r2, #45	; 0x2d
 800e3fc:	2200      	movge	r2, #0
 800e3fe:	eeb1 8b40 	vneglt.f64	d8, d0
 800e402:	2d46      	cmp	r5, #70	; 0x46
 800e404:	460c      	mov	r4, r1
 800e406:	701a      	strb	r2, [r3, #0]
 800e408:	d004      	beq.n	800e414 <__cvt+0x38>
 800e40a:	2d45      	cmp	r5, #69	; 0x45
 800e40c:	d100      	bne.n	800e410 <__cvt+0x34>
 800e40e:	3401      	adds	r4, #1
 800e410:	2102      	movs	r1, #2
 800e412:	e000      	b.n	800e416 <__cvt+0x3a>
 800e414:	2103      	movs	r1, #3
 800e416:	ab03      	add	r3, sp, #12
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	ab02      	add	r3, sp, #8
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4622      	mov	r2, r4
 800e420:	4633      	mov	r3, r6
 800e422:	eeb0 0b48 	vmov.f64	d0, d8
 800e426:	f000 fcdb 	bl	800ede0 <_dtoa_r>
 800e42a:	2d47      	cmp	r5, #71	; 0x47
 800e42c:	d109      	bne.n	800e442 <__cvt+0x66>
 800e42e:	07fb      	lsls	r3, r7, #31
 800e430:	d407      	bmi.n	800e442 <__cvt+0x66>
 800e432:	9b03      	ldr	r3, [sp, #12]
 800e434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e436:	1a1b      	subs	r3, r3, r0
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	b005      	add	sp, #20
 800e43c:	ecbd 8b02 	vpop	{d8}
 800e440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e442:	2d46      	cmp	r5, #70	; 0x46
 800e444:	eb00 0204 	add.w	r2, r0, r4
 800e448:	d10c      	bne.n	800e464 <__cvt+0x88>
 800e44a:	7803      	ldrb	r3, [r0, #0]
 800e44c:	2b30      	cmp	r3, #48	; 0x30
 800e44e:	d107      	bne.n	800e460 <__cvt+0x84>
 800e450:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e458:	bf1c      	itt	ne
 800e45a:	f1c4 0401 	rsbne	r4, r4, #1
 800e45e:	6034      	strne	r4, [r6, #0]
 800e460:	6833      	ldr	r3, [r6, #0]
 800e462:	441a      	add	r2, r3
 800e464:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46c:	bf08      	it	eq
 800e46e:	9203      	streq	r2, [sp, #12]
 800e470:	2130      	movs	r1, #48	; 0x30
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	4293      	cmp	r3, r2
 800e476:	d2dc      	bcs.n	800e432 <__cvt+0x56>
 800e478:	1c5c      	adds	r4, r3, #1
 800e47a:	9403      	str	r4, [sp, #12]
 800e47c:	7019      	strb	r1, [r3, #0]
 800e47e:	e7f8      	b.n	800e472 <__cvt+0x96>

0800e480 <__exponent>:
 800e480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e482:	4603      	mov	r3, r0
 800e484:	2900      	cmp	r1, #0
 800e486:	bfb8      	it	lt
 800e488:	4249      	neglt	r1, r1
 800e48a:	f803 2b02 	strb.w	r2, [r3], #2
 800e48e:	bfb4      	ite	lt
 800e490:	222d      	movlt	r2, #45	; 0x2d
 800e492:	222b      	movge	r2, #43	; 0x2b
 800e494:	2909      	cmp	r1, #9
 800e496:	7042      	strb	r2, [r0, #1]
 800e498:	dd2a      	ble.n	800e4f0 <__exponent+0x70>
 800e49a:	f10d 0407 	add.w	r4, sp, #7
 800e49e:	46a4      	mov	ip, r4
 800e4a0:	270a      	movs	r7, #10
 800e4a2:	46a6      	mov	lr, r4
 800e4a4:	460a      	mov	r2, r1
 800e4a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800e4aa:	fb07 1516 	mls	r5, r7, r6, r1
 800e4ae:	3530      	adds	r5, #48	; 0x30
 800e4b0:	2a63      	cmp	r2, #99	; 0x63
 800e4b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e4b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e4ba:	4631      	mov	r1, r6
 800e4bc:	dcf1      	bgt.n	800e4a2 <__exponent+0x22>
 800e4be:	3130      	adds	r1, #48	; 0x30
 800e4c0:	f1ae 0502 	sub.w	r5, lr, #2
 800e4c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e4c8:	1c44      	adds	r4, r0, #1
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	4561      	cmp	r1, ip
 800e4ce:	d30a      	bcc.n	800e4e6 <__exponent+0x66>
 800e4d0:	f10d 0209 	add.w	r2, sp, #9
 800e4d4:	eba2 020e 	sub.w	r2, r2, lr
 800e4d8:	4565      	cmp	r5, ip
 800e4da:	bf88      	it	hi
 800e4dc:	2200      	movhi	r2, #0
 800e4de:	4413      	add	r3, r2
 800e4e0:	1a18      	subs	r0, r3, r0
 800e4e2:	b003      	add	sp, #12
 800e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e4ee:	e7ed      	b.n	800e4cc <__exponent+0x4c>
 800e4f0:	2330      	movs	r3, #48	; 0x30
 800e4f2:	3130      	adds	r1, #48	; 0x30
 800e4f4:	7083      	strb	r3, [r0, #2]
 800e4f6:	70c1      	strb	r1, [r0, #3]
 800e4f8:	1d03      	adds	r3, r0, #4
 800e4fa:	e7f1      	b.n	800e4e0 <__exponent+0x60>
 800e4fc:	0000      	movs	r0, r0
	...

0800e500 <_printf_float>:
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	b08b      	sub	sp, #44	; 0x2c
 800e506:	460c      	mov	r4, r1
 800e508:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e50c:	4616      	mov	r6, r2
 800e50e:	461f      	mov	r7, r3
 800e510:	4605      	mov	r5, r0
 800e512:	f001 f9e7 	bl	800f8e4 <_localeconv_r>
 800e516:	f8d0 b000 	ldr.w	fp, [r0]
 800e51a:	4658      	mov	r0, fp
 800e51c:	f7f1 fee0 	bl	80002e0 <strlen>
 800e520:	2300      	movs	r3, #0
 800e522:	9308      	str	r3, [sp, #32]
 800e524:	f8d8 3000 	ldr.w	r3, [r8]
 800e528:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e52c:	6822      	ldr	r2, [r4, #0]
 800e52e:	3307      	adds	r3, #7
 800e530:	f023 0307 	bic.w	r3, r3, #7
 800e534:	f103 0108 	add.w	r1, r3, #8
 800e538:	f8c8 1000 	str.w	r1, [r8]
 800e53c:	4682      	mov	sl, r0
 800e53e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e542:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e546:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e7a8 <_printf_float+0x2a8>
 800e54a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e54e:	eeb0 6bc0 	vabs.f64	d6, d0
 800e552:	eeb4 6b47 	vcmp.f64	d6, d7
 800e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55a:	dd24      	ble.n	800e5a6 <_printf_float+0xa6>
 800e55c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e564:	d502      	bpl.n	800e56c <_printf_float+0x6c>
 800e566:	232d      	movs	r3, #45	; 0x2d
 800e568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e56c:	4b90      	ldr	r3, [pc, #576]	; (800e7b0 <_printf_float+0x2b0>)
 800e56e:	4891      	ldr	r0, [pc, #580]	; (800e7b4 <_printf_float+0x2b4>)
 800e570:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e574:	bf94      	ite	ls
 800e576:	4698      	movls	r8, r3
 800e578:	4680      	movhi	r8, r0
 800e57a:	2303      	movs	r3, #3
 800e57c:	6123      	str	r3, [r4, #16]
 800e57e:	f022 0204 	bic.w	r2, r2, #4
 800e582:	2300      	movs	r3, #0
 800e584:	6022      	str	r2, [r4, #0]
 800e586:	9304      	str	r3, [sp, #16]
 800e588:	9700      	str	r7, [sp, #0]
 800e58a:	4633      	mov	r3, r6
 800e58c:	aa09      	add	r2, sp, #36	; 0x24
 800e58e:	4621      	mov	r1, r4
 800e590:	4628      	mov	r0, r5
 800e592:	f000 f9d3 	bl	800e93c <_printf_common>
 800e596:	3001      	adds	r0, #1
 800e598:	f040 808a 	bne.w	800e6b0 <_printf_float+0x1b0>
 800e59c:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a0:	b00b      	add	sp, #44	; 0x2c
 800e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a6:	eeb4 0b40 	vcmp.f64	d0, d0
 800e5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ae:	d709      	bvc.n	800e5c4 <_printf_float+0xc4>
 800e5b0:	ee10 3a90 	vmov	r3, s1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bfbc      	itt	lt
 800e5b8:	232d      	movlt	r3, #45	; 0x2d
 800e5ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e5be:	487e      	ldr	r0, [pc, #504]	; (800e7b8 <_printf_float+0x2b8>)
 800e5c0:	4b7e      	ldr	r3, [pc, #504]	; (800e7bc <_printf_float+0x2bc>)
 800e5c2:	e7d5      	b.n	800e570 <_printf_float+0x70>
 800e5c4:	6863      	ldr	r3, [r4, #4]
 800e5c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e5ca:	9104      	str	r1, [sp, #16]
 800e5cc:	1c59      	adds	r1, r3, #1
 800e5ce:	d13c      	bne.n	800e64a <_printf_float+0x14a>
 800e5d0:	2306      	movs	r3, #6
 800e5d2:	6063      	str	r3, [r4, #4]
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	9303      	str	r3, [sp, #12]
 800e5d8:	ab08      	add	r3, sp, #32
 800e5da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e5de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e5e2:	ab07      	add	r3, sp, #28
 800e5e4:	6861      	ldr	r1, [r4, #4]
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	6022      	str	r2, [r4, #0]
 800e5ea:	f10d 031b 	add.w	r3, sp, #27
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f7ff fef4 	bl	800e3dc <__cvt>
 800e5f4:	9b04      	ldr	r3, [sp, #16]
 800e5f6:	9907      	ldr	r1, [sp, #28]
 800e5f8:	2b47      	cmp	r3, #71	; 0x47
 800e5fa:	4680      	mov	r8, r0
 800e5fc:	d108      	bne.n	800e610 <_printf_float+0x110>
 800e5fe:	1cc8      	adds	r0, r1, #3
 800e600:	db02      	blt.n	800e608 <_printf_float+0x108>
 800e602:	6863      	ldr	r3, [r4, #4]
 800e604:	4299      	cmp	r1, r3
 800e606:	dd41      	ble.n	800e68c <_printf_float+0x18c>
 800e608:	f1a9 0902 	sub.w	r9, r9, #2
 800e60c:	fa5f f989 	uxtb.w	r9, r9
 800e610:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e614:	d820      	bhi.n	800e658 <_printf_float+0x158>
 800e616:	3901      	subs	r1, #1
 800e618:	464a      	mov	r2, r9
 800e61a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e61e:	9107      	str	r1, [sp, #28]
 800e620:	f7ff ff2e 	bl	800e480 <__exponent>
 800e624:	9a08      	ldr	r2, [sp, #32]
 800e626:	9004      	str	r0, [sp, #16]
 800e628:	1813      	adds	r3, r2, r0
 800e62a:	2a01      	cmp	r2, #1
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	dc02      	bgt.n	800e636 <_printf_float+0x136>
 800e630:	6822      	ldr	r2, [r4, #0]
 800e632:	07d2      	lsls	r2, r2, #31
 800e634:	d501      	bpl.n	800e63a <_printf_float+0x13a>
 800e636:	3301      	adds	r3, #1
 800e638:	6123      	str	r3, [r4, #16]
 800e63a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d0a2      	beq.n	800e588 <_printf_float+0x88>
 800e642:	232d      	movs	r3, #45	; 0x2d
 800e644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e648:	e79e      	b.n	800e588 <_printf_float+0x88>
 800e64a:	9904      	ldr	r1, [sp, #16]
 800e64c:	2947      	cmp	r1, #71	; 0x47
 800e64e:	d1c1      	bne.n	800e5d4 <_printf_float+0xd4>
 800e650:	2b00      	cmp	r3, #0
 800e652:	d1bf      	bne.n	800e5d4 <_printf_float+0xd4>
 800e654:	2301      	movs	r3, #1
 800e656:	e7bc      	b.n	800e5d2 <_printf_float+0xd2>
 800e658:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e65c:	d118      	bne.n	800e690 <_printf_float+0x190>
 800e65e:	2900      	cmp	r1, #0
 800e660:	6863      	ldr	r3, [r4, #4]
 800e662:	dd0b      	ble.n	800e67c <_printf_float+0x17c>
 800e664:	6121      	str	r1, [r4, #16]
 800e666:	b913      	cbnz	r3, 800e66e <_printf_float+0x16e>
 800e668:	6822      	ldr	r2, [r4, #0]
 800e66a:	07d0      	lsls	r0, r2, #31
 800e66c:	d502      	bpl.n	800e674 <_printf_float+0x174>
 800e66e:	3301      	adds	r3, #1
 800e670:	440b      	add	r3, r1
 800e672:	6123      	str	r3, [r4, #16]
 800e674:	2300      	movs	r3, #0
 800e676:	65a1      	str	r1, [r4, #88]	; 0x58
 800e678:	9304      	str	r3, [sp, #16]
 800e67a:	e7de      	b.n	800e63a <_printf_float+0x13a>
 800e67c:	b913      	cbnz	r3, 800e684 <_printf_float+0x184>
 800e67e:	6822      	ldr	r2, [r4, #0]
 800e680:	07d2      	lsls	r2, r2, #31
 800e682:	d501      	bpl.n	800e688 <_printf_float+0x188>
 800e684:	3302      	adds	r3, #2
 800e686:	e7f4      	b.n	800e672 <_printf_float+0x172>
 800e688:	2301      	movs	r3, #1
 800e68a:	e7f2      	b.n	800e672 <_printf_float+0x172>
 800e68c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e690:	9b08      	ldr	r3, [sp, #32]
 800e692:	4299      	cmp	r1, r3
 800e694:	db05      	blt.n	800e6a2 <_printf_float+0x1a2>
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	6121      	str	r1, [r4, #16]
 800e69a:	07d8      	lsls	r0, r3, #31
 800e69c:	d5ea      	bpl.n	800e674 <_printf_float+0x174>
 800e69e:	1c4b      	adds	r3, r1, #1
 800e6a0:	e7e7      	b.n	800e672 <_printf_float+0x172>
 800e6a2:	2900      	cmp	r1, #0
 800e6a4:	bfd4      	ite	le
 800e6a6:	f1c1 0202 	rsble	r2, r1, #2
 800e6aa:	2201      	movgt	r2, #1
 800e6ac:	4413      	add	r3, r2
 800e6ae:	e7e0      	b.n	800e672 <_printf_float+0x172>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	055a      	lsls	r2, r3, #21
 800e6b4:	d407      	bmi.n	800e6c6 <_printf_float+0x1c6>
 800e6b6:	6923      	ldr	r3, [r4, #16]
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4628      	mov	r0, r5
 800e6be:	47b8      	blx	r7
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	d12a      	bne.n	800e71a <_printf_float+0x21a>
 800e6c4:	e76a      	b.n	800e59c <_printf_float+0x9c>
 800e6c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e6ca:	f240 80e2 	bls.w	800e892 <_printf_float+0x392>
 800e6ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e6d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6da:	d133      	bne.n	800e744 <_printf_float+0x244>
 800e6dc:	4a38      	ldr	r2, [pc, #224]	; (800e7c0 <_printf_float+0x2c0>)
 800e6de:	2301      	movs	r3, #1
 800e6e0:	4631      	mov	r1, r6
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b8      	blx	r7
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	f43f af58 	beq.w	800e59c <_printf_float+0x9c>
 800e6ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	db02      	blt.n	800e6fa <_printf_float+0x1fa>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	07d8      	lsls	r0, r3, #31
 800e6f8:	d50f      	bpl.n	800e71a <_printf_float+0x21a>
 800e6fa:	4653      	mov	r3, sl
 800e6fc:	465a      	mov	r2, fp
 800e6fe:	4631      	mov	r1, r6
 800e700:	4628      	mov	r0, r5
 800e702:	47b8      	blx	r7
 800e704:	3001      	adds	r0, #1
 800e706:	f43f af49 	beq.w	800e59c <_printf_float+0x9c>
 800e70a:	f04f 0800 	mov.w	r8, #0
 800e70e:	f104 091a 	add.w	r9, r4, #26
 800e712:	9b08      	ldr	r3, [sp, #32]
 800e714:	3b01      	subs	r3, #1
 800e716:	4543      	cmp	r3, r8
 800e718:	dc09      	bgt.n	800e72e <_printf_float+0x22e>
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	079b      	lsls	r3, r3, #30
 800e71e:	f100 8108 	bmi.w	800e932 <_printf_float+0x432>
 800e722:	68e0      	ldr	r0, [r4, #12]
 800e724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e726:	4298      	cmp	r0, r3
 800e728:	bfb8      	it	lt
 800e72a:	4618      	movlt	r0, r3
 800e72c:	e738      	b.n	800e5a0 <_printf_float+0xa0>
 800e72e:	2301      	movs	r3, #1
 800e730:	464a      	mov	r2, r9
 800e732:	4631      	mov	r1, r6
 800e734:	4628      	mov	r0, r5
 800e736:	47b8      	blx	r7
 800e738:	3001      	adds	r0, #1
 800e73a:	f43f af2f 	beq.w	800e59c <_printf_float+0x9c>
 800e73e:	f108 0801 	add.w	r8, r8, #1
 800e742:	e7e6      	b.n	800e712 <_printf_float+0x212>
 800e744:	9b07      	ldr	r3, [sp, #28]
 800e746:	2b00      	cmp	r3, #0
 800e748:	dc3c      	bgt.n	800e7c4 <_printf_float+0x2c4>
 800e74a:	4a1d      	ldr	r2, [pc, #116]	; (800e7c0 <_printf_float+0x2c0>)
 800e74c:	2301      	movs	r3, #1
 800e74e:	4631      	mov	r1, r6
 800e750:	4628      	mov	r0, r5
 800e752:	47b8      	blx	r7
 800e754:	3001      	adds	r0, #1
 800e756:	f43f af21 	beq.w	800e59c <_printf_float+0x9c>
 800e75a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e75e:	4313      	orrs	r3, r2
 800e760:	d102      	bne.n	800e768 <_printf_float+0x268>
 800e762:	6823      	ldr	r3, [r4, #0]
 800e764:	07d9      	lsls	r1, r3, #31
 800e766:	d5d8      	bpl.n	800e71a <_printf_float+0x21a>
 800e768:	4653      	mov	r3, sl
 800e76a:	465a      	mov	r2, fp
 800e76c:	4631      	mov	r1, r6
 800e76e:	4628      	mov	r0, r5
 800e770:	47b8      	blx	r7
 800e772:	3001      	adds	r0, #1
 800e774:	f43f af12 	beq.w	800e59c <_printf_float+0x9c>
 800e778:	f04f 0900 	mov.w	r9, #0
 800e77c:	f104 0a1a 	add.w	sl, r4, #26
 800e780:	9b07      	ldr	r3, [sp, #28]
 800e782:	425b      	negs	r3, r3
 800e784:	454b      	cmp	r3, r9
 800e786:	dc01      	bgt.n	800e78c <_printf_float+0x28c>
 800e788:	9b08      	ldr	r3, [sp, #32]
 800e78a:	e795      	b.n	800e6b8 <_printf_float+0x1b8>
 800e78c:	2301      	movs	r3, #1
 800e78e:	4652      	mov	r2, sl
 800e790:	4631      	mov	r1, r6
 800e792:	4628      	mov	r0, r5
 800e794:	47b8      	blx	r7
 800e796:	3001      	adds	r0, #1
 800e798:	f43f af00 	beq.w	800e59c <_printf_float+0x9c>
 800e79c:	f109 0901 	add.w	r9, r9, #1
 800e7a0:	e7ee      	b.n	800e780 <_printf_float+0x280>
 800e7a2:	bf00      	nop
 800e7a4:	f3af 8000 	nop.w
 800e7a8:	ffffffff 	.word	0xffffffff
 800e7ac:	7fefffff 	.word	0x7fefffff
 800e7b0:	08010fd8 	.word	0x08010fd8
 800e7b4:	08010fdc 	.word	0x08010fdc
 800e7b8:	08010fe4 	.word	0x08010fe4
 800e7bc:	08010fe0 	.word	0x08010fe0
 800e7c0:	08010fe8 	.word	0x08010fe8
 800e7c4:	9a08      	ldr	r2, [sp, #32]
 800e7c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	bfa8      	it	ge
 800e7cc:	461a      	movge	r2, r3
 800e7ce:	2a00      	cmp	r2, #0
 800e7d0:	4691      	mov	r9, r2
 800e7d2:	dc38      	bgt.n	800e846 <_printf_float+0x346>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	9305      	str	r3, [sp, #20]
 800e7d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7dc:	f104 021a 	add.w	r2, r4, #26
 800e7e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7e2:	9905      	ldr	r1, [sp, #20]
 800e7e4:	9304      	str	r3, [sp, #16]
 800e7e6:	eba3 0309 	sub.w	r3, r3, r9
 800e7ea:	428b      	cmp	r3, r1
 800e7ec:	dc33      	bgt.n	800e856 <_printf_float+0x356>
 800e7ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	db3c      	blt.n	800e870 <_printf_float+0x370>
 800e7f6:	6823      	ldr	r3, [r4, #0]
 800e7f8:	07da      	lsls	r2, r3, #31
 800e7fa:	d439      	bmi.n	800e870 <_printf_float+0x370>
 800e7fc:	9a08      	ldr	r2, [sp, #32]
 800e7fe:	9b04      	ldr	r3, [sp, #16]
 800e800:	9907      	ldr	r1, [sp, #28]
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	eba2 0901 	sub.w	r9, r2, r1
 800e808:	4599      	cmp	r9, r3
 800e80a:	bfa8      	it	ge
 800e80c:	4699      	movge	r9, r3
 800e80e:	f1b9 0f00 	cmp.w	r9, #0
 800e812:	dc35      	bgt.n	800e880 <_printf_float+0x380>
 800e814:	f04f 0800 	mov.w	r8, #0
 800e818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e81c:	f104 0a1a 	add.w	sl, r4, #26
 800e820:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e824:	1a9b      	subs	r3, r3, r2
 800e826:	eba3 0309 	sub.w	r3, r3, r9
 800e82a:	4543      	cmp	r3, r8
 800e82c:	f77f af75 	ble.w	800e71a <_printf_float+0x21a>
 800e830:	2301      	movs	r3, #1
 800e832:	4652      	mov	r2, sl
 800e834:	4631      	mov	r1, r6
 800e836:	4628      	mov	r0, r5
 800e838:	47b8      	blx	r7
 800e83a:	3001      	adds	r0, #1
 800e83c:	f43f aeae 	beq.w	800e59c <_printf_float+0x9c>
 800e840:	f108 0801 	add.w	r8, r8, #1
 800e844:	e7ec      	b.n	800e820 <_printf_float+0x320>
 800e846:	4613      	mov	r3, r2
 800e848:	4631      	mov	r1, r6
 800e84a:	4642      	mov	r2, r8
 800e84c:	4628      	mov	r0, r5
 800e84e:	47b8      	blx	r7
 800e850:	3001      	adds	r0, #1
 800e852:	d1bf      	bne.n	800e7d4 <_printf_float+0x2d4>
 800e854:	e6a2      	b.n	800e59c <_printf_float+0x9c>
 800e856:	2301      	movs	r3, #1
 800e858:	4631      	mov	r1, r6
 800e85a:	4628      	mov	r0, r5
 800e85c:	9204      	str	r2, [sp, #16]
 800e85e:	47b8      	blx	r7
 800e860:	3001      	adds	r0, #1
 800e862:	f43f ae9b 	beq.w	800e59c <_printf_float+0x9c>
 800e866:	9b05      	ldr	r3, [sp, #20]
 800e868:	9a04      	ldr	r2, [sp, #16]
 800e86a:	3301      	adds	r3, #1
 800e86c:	9305      	str	r3, [sp, #20]
 800e86e:	e7b7      	b.n	800e7e0 <_printf_float+0x2e0>
 800e870:	4653      	mov	r3, sl
 800e872:	465a      	mov	r2, fp
 800e874:	4631      	mov	r1, r6
 800e876:	4628      	mov	r0, r5
 800e878:	47b8      	blx	r7
 800e87a:	3001      	adds	r0, #1
 800e87c:	d1be      	bne.n	800e7fc <_printf_float+0x2fc>
 800e87e:	e68d      	b.n	800e59c <_printf_float+0x9c>
 800e880:	9a04      	ldr	r2, [sp, #16]
 800e882:	464b      	mov	r3, r9
 800e884:	4442      	add	r2, r8
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	d1c1      	bne.n	800e814 <_printf_float+0x314>
 800e890:	e684      	b.n	800e59c <_printf_float+0x9c>
 800e892:	9a08      	ldr	r2, [sp, #32]
 800e894:	2a01      	cmp	r2, #1
 800e896:	dc01      	bgt.n	800e89c <_printf_float+0x39c>
 800e898:	07db      	lsls	r3, r3, #31
 800e89a:	d537      	bpl.n	800e90c <_printf_float+0x40c>
 800e89c:	2301      	movs	r3, #1
 800e89e:	4642      	mov	r2, r8
 800e8a0:	4631      	mov	r1, r6
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	47b8      	blx	r7
 800e8a6:	3001      	adds	r0, #1
 800e8a8:	f43f ae78 	beq.w	800e59c <_printf_float+0x9c>
 800e8ac:	4653      	mov	r3, sl
 800e8ae:	465a      	mov	r2, fp
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	47b8      	blx	r7
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	f43f ae70 	beq.w	800e59c <_printf_float+0x9c>
 800e8bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e8c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c8:	d01b      	beq.n	800e902 <_printf_float+0x402>
 800e8ca:	9b08      	ldr	r3, [sp, #32]
 800e8cc:	f108 0201 	add.w	r2, r8, #1
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	4631      	mov	r1, r6
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	47b8      	blx	r7
 800e8d8:	3001      	adds	r0, #1
 800e8da:	d10e      	bne.n	800e8fa <_printf_float+0x3fa>
 800e8dc:	e65e      	b.n	800e59c <_printf_float+0x9c>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	464a      	mov	r2, r9
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	47b8      	blx	r7
 800e8e8:	3001      	adds	r0, #1
 800e8ea:	f43f ae57 	beq.w	800e59c <_printf_float+0x9c>
 800e8ee:	f108 0801 	add.w	r8, r8, #1
 800e8f2:	9b08      	ldr	r3, [sp, #32]
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	4543      	cmp	r3, r8
 800e8f8:	dcf1      	bgt.n	800e8de <_printf_float+0x3de>
 800e8fa:	9b04      	ldr	r3, [sp, #16]
 800e8fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e900:	e6db      	b.n	800e6ba <_printf_float+0x1ba>
 800e902:	f04f 0800 	mov.w	r8, #0
 800e906:	f104 091a 	add.w	r9, r4, #26
 800e90a:	e7f2      	b.n	800e8f2 <_printf_float+0x3f2>
 800e90c:	2301      	movs	r3, #1
 800e90e:	4642      	mov	r2, r8
 800e910:	e7df      	b.n	800e8d2 <_printf_float+0x3d2>
 800e912:	2301      	movs	r3, #1
 800e914:	464a      	mov	r2, r9
 800e916:	4631      	mov	r1, r6
 800e918:	4628      	mov	r0, r5
 800e91a:	47b8      	blx	r7
 800e91c:	3001      	adds	r0, #1
 800e91e:	f43f ae3d 	beq.w	800e59c <_printf_float+0x9c>
 800e922:	f108 0801 	add.w	r8, r8, #1
 800e926:	68e3      	ldr	r3, [r4, #12]
 800e928:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e92a:	1a5b      	subs	r3, r3, r1
 800e92c:	4543      	cmp	r3, r8
 800e92e:	dcf0      	bgt.n	800e912 <_printf_float+0x412>
 800e930:	e6f7      	b.n	800e722 <_printf_float+0x222>
 800e932:	f04f 0800 	mov.w	r8, #0
 800e936:	f104 0919 	add.w	r9, r4, #25
 800e93a:	e7f4      	b.n	800e926 <_printf_float+0x426>

0800e93c <_printf_common>:
 800e93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e940:	4616      	mov	r6, r2
 800e942:	4699      	mov	r9, r3
 800e944:	688a      	ldr	r2, [r1, #8]
 800e946:	690b      	ldr	r3, [r1, #16]
 800e948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e94c:	4293      	cmp	r3, r2
 800e94e:	bfb8      	it	lt
 800e950:	4613      	movlt	r3, r2
 800e952:	6033      	str	r3, [r6, #0]
 800e954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e958:	4607      	mov	r7, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	b10a      	cbz	r2, 800e962 <_printf_common+0x26>
 800e95e:	3301      	adds	r3, #1
 800e960:	6033      	str	r3, [r6, #0]
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	0699      	lsls	r1, r3, #26
 800e966:	bf42      	ittt	mi
 800e968:	6833      	ldrmi	r3, [r6, #0]
 800e96a:	3302      	addmi	r3, #2
 800e96c:	6033      	strmi	r3, [r6, #0]
 800e96e:	6825      	ldr	r5, [r4, #0]
 800e970:	f015 0506 	ands.w	r5, r5, #6
 800e974:	d106      	bne.n	800e984 <_printf_common+0x48>
 800e976:	f104 0a19 	add.w	sl, r4, #25
 800e97a:	68e3      	ldr	r3, [r4, #12]
 800e97c:	6832      	ldr	r2, [r6, #0]
 800e97e:	1a9b      	subs	r3, r3, r2
 800e980:	42ab      	cmp	r3, r5
 800e982:	dc26      	bgt.n	800e9d2 <_printf_common+0x96>
 800e984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e988:	1e13      	subs	r3, r2, #0
 800e98a:	6822      	ldr	r2, [r4, #0]
 800e98c:	bf18      	it	ne
 800e98e:	2301      	movne	r3, #1
 800e990:	0692      	lsls	r2, r2, #26
 800e992:	d42b      	bmi.n	800e9ec <_printf_common+0xb0>
 800e994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e998:	4649      	mov	r1, r9
 800e99a:	4638      	mov	r0, r7
 800e99c:	47c0      	blx	r8
 800e99e:	3001      	adds	r0, #1
 800e9a0:	d01e      	beq.n	800e9e0 <_printf_common+0xa4>
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	68e5      	ldr	r5, [r4, #12]
 800e9a6:	6832      	ldr	r2, [r6, #0]
 800e9a8:	f003 0306 	and.w	r3, r3, #6
 800e9ac:	2b04      	cmp	r3, #4
 800e9ae:	bf08      	it	eq
 800e9b0:	1aad      	subeq	r5, r5, r2
 800e9b2:	68a3      	ldr	r3, [r4, #8]
 800e9b4:	6922      	ldr	r2, [r4, #16]
 800e9b6:	bf0c      	ite	eq
 800e9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9bc:	2500      	movne	r5, #0
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	bfc4      	itt	gt
 800e9c2:	1a9b      	subgt	r3, r3, r2
 800e9c4:	18ed      	addgt	r5, r5, r3
 800e9c6:	2600      	movs	r6, #0
 800e9c8:	341a      	adds	r4, #26
 800e9ca:	42b5      	cmp	r5, r6
 800e9cc:	d11a      	bne.n	800ea04 <_printf_common+0xc8>
 800e9ce:	2000      	movs	r0, #0
 800e9d0:	e008      	b.n	800e9e4 <_printf_common+0xa8>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	4652      	mov	r2, sl
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	4638      	mov	r0, r7
 800e9da:	47c0      	blx	r8
 800e9dc:	3001      	adds	r0, #1
 800e9de:	d103      	bne.n	800e9e8 <_printf_common+0xac>
 800e9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e8:	3501      	adds	r5, #1
 800e9ea:	e7c6      	b.n	800e97a <_printf_common+0x3e>
 800e9ec:	18e1      	adds	r1, r4, r3
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	2030      	movs	r0, #48	; 0x30
 800e9f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9f6:	4422      	add	r2, r4
 800e9f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea00:	3302      	adds	r3, #2
 800ea02:	e7c7      	b.n	800e994 <_printf_common+0x58>
 800ea04:	2301      	movs	r3, #1
 800ea06:	4622      	mov	r2, r4
 800ea08:	4649      	mov	r1, r9
 800ea0a:	4638      	mov	r0, r7
 800ea0c:	47c0      	blx	r8
 800ea0e:	3001      	adds	r0, #1
 800ea10:	d0e6      	beq.n	800e9e0 <_printf_common+0xa4>
 800ea12:	3601      	adds	r6, #1
 800ea14:	e7d9      	b.n	800e9ca <_printf_common+0x8e>
	...

0800ea18 <_printf_i>:
 800ea18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	4691      	mov	r9, r2
 800ea20:	7e27      	ldrb	r7, [r4, #24]
 800ea22:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea24:	2f78      	cmp	r7, #120	; 0x78
 800ea26:	4680      	mov	r8, r0
 800ea28:	469a      	mov	sl, r3
 800ea2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea2e:	d807      	bhi.n	800ea40 <_printf_i+0x28>
 800ea30:	2f62      	cmp	r7, #98	; 0x62
 800ea32:	d80a      	bhi.n	800ea4a <_printf_i+0x32>
 800ea34:	2f00      	cmp	r7, #0
 800ea36:	f000 80d8 	beq.w	800ebea <_printf_i+0x1d2>
 800ea3a:	2f58      	cmp	r7, #88	; 0x58
 800ea3c:	f000 80a3 	beq.w	800eb86 <_printf_i+0x16e>
 800ea40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea48:	e03a      	b.n	800eac0 <_printf_i+0xa8>
 800ea4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea4e:	2b15      	cmp	r3, #21
 800ea50:	d8f6      	bhi.n	800ea40 <_printf_i+0x28>
 800ea52:	a001      	add	r0, pc, #4	; (adr r0, 800ea58 <_printf_i+0x40>)
 800ea54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ea58:	0800eab1 	.word	0x0800eab1
 800ea5c:	0800eac5 	.word	0x0800eac5
 800ea60:	0800ea41 	.word	0x0800ea41
 800ea64:	0800ea41 	.word	0x0800ea41
 800ea68:	0800ea41 	.word	0x0800ea41
 800ea6c:	0800ea41 	.word	0x0800ea41
 800ea70:	0800eac5 	.word	0x0800eac5
 800ea74:	0800ea41 	.word	0x0800ea41
 800ea78:	0800ea41 	.word	0x0800ea41
 800ea7c:	0800ea41 	.word	0x0800ea41
 800ea80:	0800ea41 	.word	0x0800ea41
 800ea84:	0800ebd1 	.word	0x0800ebd1
 800ea88:	0800eaf5 	.word	0x0800eaf5
 800ea8c:	0800ebb3 	.word	0x0800ebb3
 800ea90:	0800ea41 	.word	0x0800ea41
 800ea94:	0800ea41 	.word	0x0800ea41
 800ea98:	0800ebf3 	.word	0x0800ebf3
 800ea9c:	0800ea41 	.word	0x0800ea41
 800eaa0:	0800eaf5 	.word	0x0800eaf5
 800eaa4:	0800ea41 	.word	0x0800ea41
 800eaa8:	0800ea41 	.word	0x0800ea41
 800eaac:	0800ebbb 	.word	0x0800ebbb
 800eab0:	680b      	ldr	r3, [r1, #0]
 800eab2:	1d1a      	adds	r2, r3, #4
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	600a      	str	r2, [r1, #0]
 800eab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eabc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eac0:	2301      	movs	r3, #1
 800eac2:	e0a3      	b.n	800ec0c <_printf_i+0x1f4>
 800eac4:	6825      	ldr	r5, [r4, #0]
 800eac6:	6808      	ldr	r0, [r1, #0]
 800eac8:	062e      	lsls	r6, r5, #24
 800eaca:	f100 0304 	add.w	r3, r0, #4
 800eace:	d50a      	bpl.n	800eae6 <_printf_i+0xce>
 800ead0:	6805      	ldr	r5, [r0, #0]
 800ead2:	600b      	str	r3, [r1, #0]
 800ead4:	2d00      	cmp	r5, #0
 800ead6:	da03      	bge.n	800eae0 <_printf_i+0xc8>
 800ead8:	232d      	movs	r3, #45	; 0x2d
 800eada:	426d      	negs	r5, r5
 800eadc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eae0:	485e      	ldr	r0, [pc, #376]	; (800ec5c <_printf_i+0x244>)
 800eae2:	230a      	movs	r3, #10
 800eae4:	e019      	b.n	800eb1a <_printf_i+0x102>
 800eae6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eaea:	6805      	ldr	r5, [r0, #0]
 800eaec:	600b      	str	r3, [r1, #0]
 800eaee:	bf18      	it	ne
 800eaf0:	b22d      	sxthne	r5, r5
 800eaf2:	e7ef      	b.n	800ead4 <_printf_i+0xbc>
 800eaf4:	680b      	ldr	r3, [r1, #0]
 800eaf6:	6825      	ldr	r5, [r4, #0]
 800eaf8:	1d18      	adds	r0, r3, #4
 800eafa:	6008      	str	r0, [r1, #0]
 800eafc:	0628      	lsls	r0, r5, #24
 800eafe:	d501      	bpl.n	800eb04 <_printf_i+0xec>
 800eb00:	681d      	ldr	r5, [r3, #0]
 800eb02:	e002      	b.n	800eb0a <_printf_i+0xf2>
 800eb04:	0669      	lsls	r1, r5, #25
 800eb06:	d5fb      	bpl.n	800eb00 <_printf_i+0xe8>
 800eb08:	881d      	ldrh	r5, [r3, #0]
 800eb0a:	4854      	ldr	r0, [pc, #336]	; (800ec5c <_printf_i+0x244>)
 800eb0c:	2f6f      	cmp	r7, #111	; 0x6f
 800eb0e:	bf0c      	ite	eq
 800eb10:	2308      	moveq	r3, #8
 800eb12:	230a      	movne	r3, #10
 800eb14:	2100      	movs	r1, #0
 800eb16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb1a:	6866      	ldr	r6, [r4, #4]
 800eb1c:	60a6      	str	r6, [r4, #8]
 800eb1e:	2e00      	cmp	r6, #0
 800eb20:	bfa2      	ittt	ge
 800eb22:	6821      	ldrge	r1, [r4, #0]
 800eb24:	f021 0104 	bicge.w	r1, r1, #4
 800eb28:	6021      	strge	r1, [r4, #0]
 800eb2a:	b90d      	cbnz	r5, 800eb30 <_printf_i+0x118>
 800eb2c:	2e00      	cmp	r6, #0
 800eb2e:	d04d      	beq.n	800ebcc <_printf_i+0x1b4>
 800eb30:	4616      	mov	r6, r2
 800eb32:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb36:	fb03 5711 	mls	r7, r3, r1, r5
 800eb3a:	5dc7      	ldrb	r7, [r0, r7]
 800eb3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb40:	462f      	mov	r7, r5
 800eb42:	42bb      	cmp	r3, r7
 800eb44:	460d      	mov	r5, r1
 800eb46:	d9f4      	bls.n	800eb32 <_printf_i+0x11a>
 800eb48:	2b08      	cmp	r3, #8
 800eb4a:	d10b      	bne.n	800eb64 <_printf_i+0x14c>
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	07df      	lsls	r7, r3, #31
 800eb50:	d508      	bpl.n	800eb64 <_printf_i+0x14c>
 800eb52:	6923      	ldr	r3, [r4, #16]
 800eb54:	6861      	ldr	r1, [r4, #4]
 800eb56:	4299      	cmp	r1, r3
 800eb58:	bfde      	ittt	le
 800eb5a:	2330      	movle	r3, #48	; 0x30
 800eb5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb64:	1b92      	subs	r2, r2, r6
 800eb66:	6122      	str	r2, [r4, #16]
 800eb68:	f8cd a000 	str.w	sl, [sp]
 800eb6c:	464b      	mov	r3, r9
 800eb6e:	aa03      	add	r2, sp, #12
 800eb70:	4621      	mov	r1, r4
 800eb72:	4640      	mov	r0, r8
 800eb74:	f7ff fee2 	bl	800e93c <_printf_common>
 800eb78:	3001      	adds	r0, #1
 800eb7a:	d14c      	bne.n	800ec16 <_printf_i+0x1fe>
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	b004      	add	sp, #16
 800eb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb86:	4835      	ldr	r0, [pc, #212]	; (800ec5c <_printf_i+0x244>)
 800eb88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	680e      	ldr	r6, [r1, #0]
 800eb90:	061f      	lsls	r7, r3, #24
 800eb92:	f856 5b04 	ldr.w	r5, [r6], #4
 800eb96:	600e      	str	r6, [r1, #0]
 800eb98:	d514      	bpl.n	800ebc4 <_printf_i+0x1ac>
 800eb9a:	07d9      	lsls	r1, r3, #31
 800eb9c:	bf44      	itt	mi
 800eb9e:	f043 0320 	orrmi.w	r3, r3, #32
 800eba2:	6023      	strmi	r3, [r4, #0]
 800eba4:	b91d      	cbnz	r5, 800ebae <_printf_i+0x196>
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	f023 0320 	bic.w	r3, r3, #32
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	2310      	movs	r3, #16
 800ebb0:	e7b0      	b.n	800eb14 <_printf_i+0xfc>
 800ebb2:	6823      	ldr	r3, [r4, #0]
 800ebb4:	f043 0320 	orr.w	r3, r3, #32
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	2378      	movs	r3, #120	; 0x78
 800ebbc:	4828      	ldr	r0, [pc, #160]	; (800ec60 <_printf_i+0x248>)
 800ebbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebc2:	e7e3      	b.n	800eb8c <_printf_i+0x174>
 800ebc4:	065e      	lsls	r6, r3, #25
 800ebc6:	bf48      	it	mi
 800ebc8:	b2ad      	uxthmi	r5, r5
 800ebca:	e7e6      	b.n	800eb9a <_printf_i+0x182>
 800ebcc:	4616      	mov	r6, r2
 800ebce:	e7bb      	b.n	800eb48 <_printf_i+0x130>
 800ebd0:	680b      	ldr	r3, [r1, #0]
 800ebd2:	6826      	ldr	r6, [r4, #0]
 800ebd4:	6960      	ldr	r0, [r4, #20]
 800ebd6:	1d1d      	adds	r5, r3, #4
 800ebd8:	600d      	str	r5, [r1, #0]
 800ebda:	0635      	lsls	r5, r6, #24
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	d501      	bpl.n	800ebe4 <_printf_i+0x1cc>
 800ebe0:	6018      	str	r0, [r3, #0]
 800ebe2:	e002      	b.n	800ebea <_printf_i+0x1d2>
 800ebe4:	0671      	lsls	r1, r6, #25
 800ebe6:	d5fb      	bpl.n	800ebe0 <_printf_i+0x1c8>
 800ebe8:	8018      	strh	r0, [r3, #0]
 800ebea:	2300      	movs	r3, #0
 800ebec:	6123      	str	r3, [r4, #16]
 800ebee:	4616      	mov	r6, r2
 800ebf0:	e7ba      	b.n	800eb68 <_printf_i+0x150>
 800ebf2:	680b      	ldr	r3, [r1, #0]
 800ebf4:	1d1a      	adds	r2, r3, #4
 800ebf6:	600a      	str	r2, [r1, #0]
 800ebf8:	681e      	ldr	r6, [r3, #0]
 800ebfa:	6862      	ldr	r2, [r4, #4]
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f7f1 fb76 	bl	80002f0 <memchr>
 800ec04:	b108      	cbz	r0, 800ec0a <_printf_i+0x1f2>
 800ec06:	1b80      	subs	r0, r0, r6
 800ec08:	6060      	str	r0, [r4, #4]
 800ec0a:	6863      	ldr	r3, [r4, #4]
 800ec0c:	6123      	str	r3, [r4, #16]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec14:	e7a8      	b.n	800eb68 <_printf_i+0x150>
 800ec16:	6923      	ldr	r3, [r4, #16]
 800ec18:	4632      	mov	r2, r6
 800ec1a:	4649      	mov	r1, r9
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	47d0      	blx	sl
 800ec20:	3001      	adds	r0, #1
 800ec22:	d0ab      	beq.n	800eb7c <_printf_i+0x164>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	079b      	lsls	r3, r3, #30
 800ec28:	d413      	bmi.n	800ec52 <_printf_i+0x23a>
 800ec2a:	68e0      	ldr	r0, [r4, #12]
 800ec2c:	9b03      	ldr	r3, [sp, #12]
 800ec2e:	4298      	cmp	r0, r3
 800ec30:	bfb8      	it	lt
 800ec32:	4618      	movlt	r0, r3
 800ec34:	e7a4      	b.n	800eb80 <_printf_i+0x168>
 800ec36:	2301      	movs	r3, #1
 800ec38:	4632      	mov	r2, r6
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	47d0      	blx	sl
 800ec40:	3001      	adds	r0, #1
 800ec42:	d09b      	beq.n	800eb7c <_printf_i+0x164>
 800ec44:	3501      	adds	r5, #1
 800ec46:	68e3      	ldr	r3, [r4, #12]
 800ec48:	9903      	ldr	r1, [sp, #12]
 800ec4a:	1a5b      	subs	r3, r3, r1
 800ec4c:	42ab      	cmp	r3, r5
 800ec4e:	dcf2      	bgt.n	800ec36 <_printf_i+0x21e>
 800ec50:	e7eb      	b.n	800ec2a <_printf_i+0x212>
 800ec52:	2500      	movs	r5, #0
 800ec54:	f104 0619 	add.w	r6, r4, #25
 800ec58:	e7f5      	b.n	800ec46 <_printf_i+0x22e>
 800ec5a:	bf00      	nop
 800ec5c:	08010fea 	.word	0x08010fea
 800ec60:	08010ffb 	.word	0x08010ffb

0800ec64 <_sbrk_r>:
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	4d06      	ldr	r5, [pc, #24]	; (800ec80 <_sbrk_r+0x1c>)
 800ec68:	2300      	movs	r3, #0
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	4608      	mov	r0, r1
 800ec6e:	602b      	str	r3, [r5, #0]
 800ec70:	f7f2 fd56 	bl	8001720 <_sbrk>
 800ec74:	1c43      	adds	r3, r0, #1
 800ec76:	d102      	bne.n	800ec7e <_sbrk_r+0x1a>
 800ec78:	682b      	ldr	r3, [r5, #0]
 800ec7a:	b103      	cbz	r3, 800ec7e <_sbrk_r+0x1a>
 800ec7c:	6023      	str	r3, [r4, #0]
 800ec7e:	bd38      	pop	{r3, r4, r5, pc}
 800ec80:	240010d8 	.word	0x240010d8

0800ec84 <siprintf>:
 800ec84:	b40e      	push	{r1, r2, r3}
 800ec86:	b500      	push	{lr}
 800ec88:	b09c      	sub	sp, #112	; 0x70
 800ec8a:	ab1d      	add	r3, sp, #116	; 0x74
 800ec8c:	9002      	str	r0, [sp, #8]
 800ec8e:	9006      	str	r0, [sp, #24]
 800ec90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec94:	4809      	ldr	r0, [pc, #36]	; (800ecbc <siprintf+0x38>)
 800ec96:	9107      	str	r1, [sp, #28]
 800ec98:	9104      	str	r1, [sp, #16]
 800ec9a:	4909      	ldr	r1, [pc, #36]	; (800ecc0 <siprintf+0x3c>)
 800ec9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eca0:	9105      	str	r1, [sp, #20]
 800eca2:	6800      	ldr	r0, [r0, #0]
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	a902      	add	r1, sp, #8
 800eca8:	f001 fa22 	bl	80100f0 <_svfiprintf_r>
 800ecac:	9b02      	ldr	r3, [sp, #8]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	701a      	strb	r2, [r3, #0]
 800ecb2:	b01c      	add	sp, #112	; 0x70
 800ecb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecb8:	b003      	add	sp, #12
 800ecba:	4770      	bx	lr
 800ecbc:	24000030 	.word	0x24000030
 800ecc0:	ffff0208 	.word	0xffff0208

0800ecc4 <quorem>:
 800ecc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc8:	6903      	ldr	r3, [r0, #16]
 800ecca:	690c      	ldr	r4, [r1, #16]
 800eccc:	42a3      	cmp	r3, r4
 800ecce:	4607      	mov	r7, r0
 800ecd0:	f2c0 8081 	blt.w	800edd6 <quorem+0x112>
 800ecd4:	3c01      	subs	r4, #1
 800ecd6:	f101 0814 	add.w	r8, r1, #20
 800ecda:	f100 0514 	add.w	r5, r0, #20
 800ecde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ece2:	9301      	str	r3, [sp, #4]
 800ece4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ece8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecec:	3301      	adds	r3, #1
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ecf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ecf8:	fbb2 f6f3 	udiv	r6, r2, r3
 800ecfc:	d331      	bcc.n	800ed62 <quorem+0x9e>
 800ecfe:	f04f 0e00 	mov.w	lr, #0
 800ed02:	4640      	mov	r0, r8
 800ed04:	46ac      	mov	ip, r5
 800ed06:	46f2      	mov	sl, lr
 800ed08:	f850 2b04 	ldr.w	r2, [r0], #4
 800ed0c:	b293      	uxth	r3, r2
 800ed0e:	fb06 e303 	mla	r3, r6, r3, lr
 800ed12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	ebaa 0303 	sub.w	r3, sl, r3
 800ed1c:	0c12      	lsrs	r2, r2, #16
 800ed1e:	f8dc a000 	ldr.w	sl, [ip]
 800ed22:	fb06 e202 	mla	r2, r6, r2, lr
 800ed26:	fa13 f38a 	uxtah	r3, r3, sl
 800ed2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ed2e:	fa1f fa82 	uxth.w	sl, r2
 800ed32:	f8dc 2000 	ldr.w	r2, [ip]
 800ed36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ed3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed44:	4581      	cmp	r9, r0
 800ed46:	f84c 3b04 	str.w	r3, [ip], #4
 800ed4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ed4e:	d2db      	bcs.n	800ed08 <quorem+0x44>
 800ed50:	f855 300b 	ldr.w	r3, [r5, fp]
 800ed54:	b92b      	cbnz	r3, 800ed62 <quorem+0x9e>
 800ed56:	9b01      	ldr	r3, [sp, #4]
 800ed58:	3b04      	subs	r3, #4
 800ed5a:	429d      	cmp	r5, r3
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	d32e      	bcc.n	800edbe <quorem+0xfa>
 800ed60:	613c      	str	r4, [r7, #16]
 800ed62:	4638      	mov	r0, r7
 800ed64:	f001 f85a 	bl	800fe1c <__mcmp>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	db24      	blt.n	800edb6 <quorem+0xf2>
 800ed6c:	3601      	adds	r6, #1
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f04f 0c00 	mov.w	ip, #0
 800ed74:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed78:	f8d0 e000 	ldr.w	lr, [r0]
 800ed7c:	b293      	uxth	r3, r2
 800ed7e:	ebac 0303 	sub.w	r3, ip, r3
 800ed82:	0c12      	lsrs	r2, r2, #16
 800ed84:	fa13 f38e 	uxtah	r3, r3, lr
 800ed88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ed8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed96:	45c1      	cmp	r9, r8
 800ed98:	f840 3b04 	str.w	r3, [r0], #4
 800ed9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eda0:	d2e8      	bcs.n	800ed74 <quorem+0xb0>
 800eda2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eda6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edaa:	b922      	cbnz	r2, 800edb6 <quorem+0xf2>
 800edac:	3b04      	subs	r3, #4
 800edae:	429d      	cmp	r5, r3
 800edb0:	461a      	mov	r2, r3
 800edb2:	d30a      	bcc.n	800edca <quorem+0x106>
 800edb4:	613c      	str	r4, [r7, #16]
 800edb6:	4630      	mov	r0, r6
 800edb8:	b003      	add	sp, #12
 800edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edbe:	6812      	ldr	r2, [r2, #0]
 800edc0:	3b04      	subs	r3, #4
 800edc2:	2a00      	cmp	r2, #0
 800edc4:	d1cc      	bne.n	800ed60 <quorem+0x9c>
 800edc6:	3c01      	subs	r4, #1
 800edc8:	e7c7      	b.n	800ed5a <quorem+0x96>
 800edca:	6812      	ldr	r2, [r2, #0]
 800edcc:	3b04      	subs	r3, #4
 800edce:	2a00      	cmp	r2, #0
 800edd0:	d1f0      	bne.n	800edb4 <quorem+0xf0>
 800edd2:	3c01      	subs	r4, #1
 800edd4:	e7eb      	b.n	800edae <quorem+0xea>
 800edd6:	2000      	movs	r0, #0
 800edd8:	e7ee      	b.n	800edb8 <quorem+0xf4>
 800edda:	0000      	movs	r0, r0
 800eddc:	0000      	movs	r0, r0
	...

0800ede0 <_dtoa_r>:
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	ec59 8b10 	vmov	r8, r9, d0
 800ede8:	b095      	sub	sp, #84	; 0x54
 800edea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800edec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800edee:	9107      	str	r1, [sp, #28]
 800edf0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800edf4:	4606      	mov	r6, r0
 800edf6:	9209      	str	r2, [sp, #36]	; 0x24
 800edf8:	9310      	str	r3, [sp, #64]	; 0x40
 800edfa:	b975      	cbnz	r5, 800ee1a <_dtoa_r+0x3a>
 800edfc:	2010      	movs	r0, #16
 800edfe:	f7ff fa2b 	bl	800e258 <malloc>
 800ee02:	4602      	mov	r2, r0
 800ee04:	6270      	str	r0, [r6, #36]	; 0x24
 800ee06:	b920      	cbnz	r0, 800ee12 <_dtoa_r+0x32>
 800ee08:	4bab      	ldr	r3, [pc, #684]	; (800f0b8 <_dtoa_r+0x2d8>)
 800ee0a:	21ea      	movs	r1, #234	; 0xea
 800ee0c:	48ab      	ldr	r0, [pc, #684]	; (800f0bc <_dtoa_r+0x2dc>)
 800ee0e:	f001 fa6f 	bl	80102f0 <__assert_func>
 800ee12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ee16:	6005      	str	r5, [r0, #0]
 800ee18:	60c5      	str	r5, [r0, #12]
 800ee1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ee1c:	6819      	ldr	r1, [r3, #0]
 800ee1e:	b151      	cbz	r1, 800ee36 <_dtoa_r+0x56>
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	604a      	str	r2, [r1, #4]
 800ee24:	2301      	movs	r3, #1
 800ee26:	4093      	lsls	r3, r2
 800ee28:	608b      	str	r3, [r1, #8]
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	f000 fdb8 	bl	800f9a0 <_Bfree>
 800ee30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ee32:	2200      	movs	r2, #0
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	f1b9 0300 	subs.w	r3, r9, #0
 800ee3a:	bfbb      	ittet	lt
 800ee3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ee40:	9303      	strlt	r3, [sp, #12]
 800ee42:	2300      	movge	r3, #0
 800ee44:	2201      	movlt	r2, #1
 800ee46:	bfac      	ite	ge
 800ee48:	6023      	strge	r3, [r4, #0]
 800ee4a:	6022      	strlt	r2, [r4, #0]
 800ee4c:	4b9c      	ldr	r3, [pc, #624]	; (800f0c0 <_dtoa_r+0x2e0>)
 800ee4e:	9c03      	ldr	r4, [sp, #12]
 800ee50:	43a3      	bics	r3, r4
 800ee52:	d11a      	bne.n	800ee8a <_dtoa_r+0xaa>
 800ee54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee56:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee5a:	6013      	str	r3, [r2, #0]
 800ee5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ee60:	ea53 0308 	orrs.w	r3, r3, r8
 800ee64:	f000 8512 	beq.w	800f88c <_dtoa_r+0xaac>
 800ee68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee6a:	b953      	cbnz	r3, 800ee82 <_dtoa_r+0xa2>
 800ee6c:	4b95      	ldr	r3, [pc, #596]	; (800f0c4 <_dtoa_r+0x2e4>)
 800ee6e:	e01f      	b.n	800eeb0 <_dtoa_r+0xd0>
 800ee70:	4b95      	ldr	r3, [pc, #596]	; (800f0c8 <_dtoa_r+0x2e8>)
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	3308      	adds	r3, #8
 800ee76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ee78:	6013      	str	r3, [r2, #0]
 800ee7a:	9800      	ldr	r0, [sp, #0]
 800ee7c:	b015      	add	sp, #84	; 0x54
 800ee7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee82:	4b90      	ldr	r3, [pc, #576]	; (800f0c4 <_dtoa_r+0x2e4>)
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	3303      	adds	r3, #3
 800ee88:	e7f5      	b.n	800ee76 <_dtoa_r+0x96>
 800ee8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee96:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee9a:	d10b      	bne.n	800eeb4 <_dtoa_r+0xd4>
 800ee9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee9e:	2301      	movs	r3, #1
 800eea0:	6013      	str	r3, [r2, #0]
 800eea2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f000 84ee 	beq.w	800f886 <_dtoa_r+0xaa6>
 800eeaa:	4888      	ldr	r0, [pc, #544]	; (800f0cc <_dtoa_r+0x2ec>)
 800eeac:	6018      	str	r0, [r3, #0]
 800eeae:	1e43      	subs	r3, r0, #1
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	e7e2      	b.n	800ee7a <_dtoa_r+0x9a>
 800eeb4:	a913      	add	r1, sp, #76	; 0x4c
 800eeb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eeba:	aa12      	add	r2, sp, #72	; 0x48
 800eebc:	4630      	mov	r0, r6
 800eebe:	f001 f851 	bl	800ff64 <__d2b>
 800eec2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800eec6:	4605      	mov	r5, r0
 800eec8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800eeca:	2900      	cmp	r1, #0
 800eecc:	d047      	beq.n	800ef5e <_dtoa_r+0x17e>
 800eece:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800eed0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eed8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800eedc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eee0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eee4:	2400      	movs	r4, #0
 800eee6:	ec43 2b16 	vmov	d6, r2, r3
 800eeea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800eeee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800f0a0 <_dtoa_r+0x2c0>
 800eef2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800eef6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f0a8 <_dtoa_r+0x2c8>
 800eefa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eefe:	eeb0 7b46 	vmov.f64	d7, d6
 800ef02:	ee06 1a90 	vmov	s13, r1
 800ef06:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ef0a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f0b0 <_dtoa_r+0x2d0>
 800ef0e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ef12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ef16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ef1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1e:	ee16 ba90 	vmov	fp, s13
 800ef22:	9411      	str	r4, [sp, #68]	; 0x44
 800ef24:	d508      	bpl.n	800ef38 <_dtoa_r+0x158>
 800ef26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ef2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	bf18      	it	ne
 800ef34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ef38:	f1bb 0f16 	cmp.w	fp, #22
 800ef3c:	d832      	bhi.n	800efa4 <_dtoa_r+0x1c4>
 800ef3e:	4b64      	ldr	r3, [pc, #400]	; (800f0d0 <_dtoa_r+0x2f0>)
 800ef40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ef44:	ed93 7b00 	vldr	d7, [r3]
 800ef48:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ef4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef54:	d501      	bpl.n	800ef5a <_dtoa_r+0x17a>
 800ef56:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e023      	b.n	800efa6 <_dtoa_r+0x1c6>
 800ef5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ef60:	4401      	add	r1, r0
 800ef62:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ef66:	2b20      	cmp	r3, #32
 800ef68:	bfc3      	ittte	gt
 800ef6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ef6e:	fa04 f303 	lslgt.w	r3, r4, r3
 800ef72:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ef76:	f1c3 0320 	rsble	r3, r3, #32
 800ef7a:	bfc6      	itte	gt
 800ef7c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ef80:	ea43 0308 	orrgt.w	r3, r3, r8
 800ef84:	fa08 f303 	lslle.w	r3, r8, r3
 800ef88:	ee07 3a90 	vmov	s15, r3
 800ef8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ef90:	3901      	subs	r1, #1
 800ef92:	ed8d 7b00 	vstr	d7, [sp]
 800ef96:	9c01      	ldr	r4, [sp, #4]
 800ef98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef9c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800efa0:	2401      	movs	r4, #1
 800efa2:	e7a0      	b.n	800eee6 <_dtoa_r+0x106>
 800efa4:	2301      	movs	r3, #1
 800efa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800efa8:	1a43      	subs	r3, r0, r1
 800efaa:	1e5a      	subs	r2, r3, #1
 800efac:	bf45      	ittet	mi
 800efae:	f1c3 0301 	rsbmi	r3, r3, #1
 800efb2:	9305      	strmi	r3, [sp, #20]
 800efb4:	2300      	movpl	r3, #0
 800efb6:	2300      	movmi	r3, #0
 800efb8:	9206      	str	r2, [sp, #24]
 800efba:	bf54      	ite	pl
 800efbc:	9305      	strpl	r3, [sp, #20]
 800efbe:	9306      	strmi	r3, [sp, #24]
 800efc0:	f1bb 0f00 	cmp.w	fp, #0
 800efc4:	db18      	blt.n	800eff8 <_dtoa_r+0x218>
 800efc6:	9b06      	ldr	r3, [sp, #24]
 800efc8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800efcc:	445b      	add	r3, fp
 800efce:	9306      	str	r3, [sp, #24]
 800efd0:	2300      	movs	r3, #0
 800efd2:	9a07      	ldr	r2, [sp, #28]
 800efd4:	2a09      	cmp	r2, #9
 800efd6:	d849      	bhi.n	800f06c <_dtoa_r+0x28c>
 800efd8:	2a05      	cmp	r2, #5
 800efda:	bfc4      	itt	gt
 800efdc:	3a04      	subgt	r2, #4
 800efde:	9207      	strgt	r2, [sp, #28]
 800efe0:	9a07      	ldr	r2, [sp, #28]
 800efe2:	f1a2 0202 	sub.w	r2, r2, #2
 800efe6:	bfcc      	ite	gt
 800efe8:	2400      	movgt	r4, #0
 800efea:	2401      	movle	r4, #1
 800efec:	2a03      	cmp	r2, #3
 800efee:	d848      	bhi.n	800f082 <_dtoa_r+0x2a2>
 800eff0:	e8df f002 	tbb	[pc, r2]
 800eff4:	3a2c2e0b 	.word	0x3a2c2e0b
 800eff8:	9b05      	ldr	r3, [sp, #20]
 800effa:	2200      	movs	r2, #0
 800effc:	eba3 030b 	sub.w	r3, r3, fp
 800f000:	9305      	str	r3, [sp, #20]
 800f002:	920e      	str	r2, [sp, #56]	; 0x38
 800f004:	f1cb 0300 	rsb	r3, fp, #0
 800f008:	e7e3      	b.n	800efd2 <_dtoa_r+0x1f2>
 800f00a:	2200      	movs	r2, #0
 800f00c:	9208      	str	r2, [sp, #32]
 800f00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f010:	2a00      	cmp	r2, #0
 800f012:	dc39      	bgt.n	800f088 <_dtoa_r+0x2a8>
 800f014:	f04f 0a01 	mov.w	sl, #1
 800f018:	46d1      	mov	r9, sl
 800f01a:	4652      	mov	r2, sl
 800f01c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f020:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f022:	2100      	movs	r1, #0
 800f024:	6079      	str	r1, [r7, #4]
 800f026:	2004      	movs	r0, #4
 800f028:	f100 0c14 	add.w	ip, r0, #20
 800f02c:	4594      	cmp	ip, r2
 800f02e:	6879      	ldr	r1, [r7, #4]
 800f030:	d92f      	bls.n	800f092 <_dtoa_r+0x2b2>
 800f032:	4630      	mov	r0, r6
 800f034:	930c      	str	r3, [sp, #48]	; 0x30
 800f036:	f000 fc73 	bl	800f920 <_Balloc>
 800f03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f03c:	9000      	str	r0, [sp, #0]
 800f03e:	4602      	mov	r2, r0
 800f040:	2800      	cmp	r0, #0
 800f042:	d149      	bne.n	800f0d8 <_dtoa_r+0x2f8>
 800f044:	4b23      	ldr	r3, [pc, #140]	; (800f0d4 <_dtoa_r+0x2f4>)
 800f046:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f04a:	e6df      	b.n	800ee0c <_dtoa_r+0x2c>
 800f04c:	2201      	movs	r2, #1
 800f04e:	e7dd      	b.n	800f00c <_dtoa_r+0x22c>
 800f050:	2200      	movs	r2, #0
 800f052:	9208      	str	r2, [sp, #32]
 800f054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f056:	eb0b 0a02 	add.w	sl, fp, r2
 800f05a:	f10a 0901 	add.w	r9, sl, #1
 800f05e:	464a      	mov	r2, r9
 800f060:	2a01      	cmp	r2, #1
 800f062:	bfb8      	it	lt
 800f064:	2201      	movlt	r2, #1
 800f066:	e7db      	b.n	800f020 <_dtoa_r+0x240>
 800f068:	2201      	movs	r2, #1
 800f06a:	e7f2      	b.n	800f052 <_dtoa_r+0x272>
 800f06c:	2401      	movs	r4, #1
 800f06e:	2200      	movs	r2, #0
 800f070:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f074:	f04f 3aff 	mov.w	sl, #4294967295
 800f078:	2100      	movs	r1, #0
 800f07a:	46d1      	mov	r9, sl
 800f07c:	2212      	movs	r2, #18
 800f07e:	9109      	str	r1, [sp, #36]	; 0x24
 800f080:	e7ce      	b.n	800f020 <_dtoa_r+0x240>
 800f082:	2201      	movs	r2, #1
 800f084:	9208      	str	r2, [sp, #32]
 800f086:	e7f5      	b.n	800f074 <_dtoa_r+0x294>
 800f088:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f08c:	46d1      	mov	r9, sl
 800f08e:	4652      	mov	r2, sl
 800f090:	e7c6      	b.n	800f020 <_dtoa_r+0x240>
 800f092:	3101      	adds	r1, #1
 800f094:	6079      	str	r1, [r7, #4]
 800f096:	0040      	lsls	r0, r0, #1
 800f098:	e7c6      	b.n	800f028 <_dtoa_r+0x248>
 800f09a:	bf00      	nop
 800f09c:	f3af 8000 	nop.w
 800f0a0:	636f4361 	.word	0x636f4361
 800f0a4:	3fd287a7 	.word	0x3fd287a7
 800f0a8:	8b60c8b3 	.word	0x8b60c8b3
 800f0ac:	3fc68a28 	.word	0x3fc68a28
 800f0b0:	509f79fb 	.word	0x509f79fb
 800f0b4:	3fd34413 	.word	0x3fd34413
 800f0b8:	08011019 	.word	0x08011019
 800f0bc:	08011030 	.word	0x08011030
 800f0c0:	7ff00000 	.word	0x7ff00000
 800f0c4:	08011015 	.word	0x08011015
 800f0c8:	0801100c 	.word	0x0801100c
 800f0cc:	08010fe9 	.word	0x08010fe9
 800f0d0:	08011128 	.word	0x08011128
 800f0d4:	0801108f 	.word	0x0801108f
 800f0d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f0da:	9900      	ldr	r1, [sp, #0]
 800f0dc:	6011      	str	r1, [r2, #0]
 800f0de:	f1b9 0f0e 	cmp.w	r9, #14
 800f0e2:	d872      	bhi.n	800f1ca <_dtoa_r+0x3ea>
 800f0e4:	2c00      	cmp	r4, #0
 800f0e6:	d070      	beq.n	800f1ca <_dtoa_r+0x3ea>
 800f0e8:	f1bb 0f00 	cmp.w	fp, #0
 800f0ec:	f340 80a6 	ble.w	800f23c <_dtoa_r+0x45c>
 800f0f0:	49ca      	ldr	r1, [pc, #808]	; (800f41c <_dtoa_r+0x63c>)
 800f0f2:	f00b 020f 	and.w	r2, fp, #15
 800f0f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f0fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f0fe:	ed92 7b00 	vldr	d7, [r2]
 800f102:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f106:	f000 808d 	beq.w	800f224 <_dtoa_r+0x444>
 800f10a:	4ac5      	ldr	r2, [pc, #788]	; (800f420 <_dtoa_r+0x640>)
 800f10c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f110:	ed92 6b08 	vldr	d6, [r2, #32]
 800f114:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f118:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f11c:	f001 010f 	and.w	r1, r1, #15
 800f120:	2203      	movs	r2, #3
 800f122:	48bf      	ldr	r0, [pc, #764]	; (800f420 <_dtoa_r+0x640>)
 800f124:	2900      	cmp	r1, #0
 800f126:	d17f      	bne.n	800f228 <_dtoa_r+0x448>
 800f128:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f12c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f130:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f134:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f136:	2900      	cmp	r1, #0
 800f138:	f000 80b2 	beq.w	800f2a0 <_dtoa_r+0x4c0>
 800f13c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f140:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f144:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14c:	f140 80a8 	bpl.w	800f2a0 <_dtoa_r+0x4c0>
 800f150:	f1b9 0f00 	cmp.w	r9, #0
 800f154:	f000 80a4 	beq.w	800f2a0 <_dtoa_r+0x4c0>
 800f158:	f1ba 0f00 	cmp.w	sl, #0
 800f15c:	dd31      	ble.n	800f1c2 <_dtoa_r+0x3e2>
 800f15e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f162:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f166:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f16a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f16e:	3201      	adds	r2, #1
 800f170:	4650      	mov	r0, sl
 800f172:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f176:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f17a:	ee07 2a90 	vmov	s15, r2
 800f17e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f182:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f186:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f18a:	9c03      	ldr	r4, [sp, #12]
 800f18c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f190:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f194:	2800      	cmp	r0, #0
 800f196:	f040 8086 	bne.w	800f2a6 <_dtoa_r+0x4c6>
 800f19a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f19e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1a2:	ec42 1b17 	vmov	d7, r1, r2
 800f1a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ae:	f300 8272 	bgt.w	800f696 <_dtoa_r+0x8b6>
 800f1b2:	eeb1 7b47 	vneg.f64	d7, d7
 800f1b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1be:	f100 8267 	bmi.w	800f690 <_dtoa_r+0x8b0>
 800f1c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800f1c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f1ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f1cc:	2a00      	cmp	r2, #0
 800f1ce:	f2c0 8129 	blt.w	800f424 <_dtoa_r+0x644>
 800f1d2:	f1bb 0f0e 	cmp.w	fp, #14
 800f1d6:	f300 8125 	bgt.w	800f424 <_dtoa_r+0x644>
 800f1da:	4b90      	ldr	r3, [pc, #576]	; (800f41c <_dtoa_r+0x63c>)
 800f1dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f1e0:	ed93 6b00 	vldr	d6, [r3]
 800f1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f280 80c3 	bge.w	800f372 <_dtoa_r+0x592>
 800f1ec:	f1b9 0f00 	cmp.w	r9, #0
 800f1f0:	f300 80bf 	bgt.w	800f372 <_dtoa_r+0x592>
 800f1f4:	f040 824c 	bne.w	800f690 <_dtoa_r+0x8b0>
 800f1f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f1fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f200:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20c:	464c      	mov	r4, r9
 800f20e:	464f      	mov	r7, r9
 800f210:	f280 8222 	bge.w	800f658 <_dtoa_r+0x878>
 800f214:	f8dd 8000 	ldr.w	r8, [sp]
 800f218:	2331      	movs	r3, #49	; 0x31
 800f21a:	f808 3b01 	strb.w	r3, [r8], #1
 800f21e:	f10b 0b01 	add.w	fp, fp, #1
 800f222:	e21e      	b.n	800f662 <_dtoa_r+0x882>
 800f224:	2202      	movs	r2, #2
 800f226:	e77c      	b.n	800f122 <_dtoa_r+0x342>
 800f228:	07cc      	lsls	r4, r1, #31
 800f22a:	d504      	bpl.n	800f236 <_dtoa_r+0x456>
 800f22c:	ed90 6b00 	vldr	d6, [r0]
 800f230:	3201      	adds	r2, #1
 800f232:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f236:	1049      	asrs	r1, r1, #1
 800f238:	3008      	adds	r0, #8
 800f23a:	e773      	b.n	800f124 <_dtoa_r+0x344>
 800f23c:	d02e      	beq.n	800f29c <_dtoa_r+0x4bc>
 800f23e:	f1cb 0100 	rsb	r1, fp, #0
 800f242:	4a76      	ldr	r2, [pc, #472]	; (800f41c <_dtoa_r+0x63c>)
 800f244:	f001 000f 	and.w	r0, r1, #15
 800f248:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f24c:	ed92 7b00 	vldr	d7, [r2]
 800f250:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f254:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f258:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f25c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f260:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f264:	486e      	ldr	r0, [pc, #440]	; (800f420 <_dtoa_r+0x640>)
 800f266:	1109      	asrs	r1, r1, #4
 800f268:	2400      	movs	r4, #0
 800f26a:	2202      	movs	r2, #2
 800f26c:	b939      	cbnz	r1, 800f27e <_dtoa_r+0x49e>
 800f26e:	2c00      	cmp	r4, #0
 800f270:	f43f af60 	beq.w	800f134 <_dtoa_r+0x354>
 800f274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f27c:	e75a      	b.n	800f134 <_dtoa_r+0x354>
 800f27e:	07cf      	lsls	r7, r1, #31
 800f280:	d509      	bpl.n	800f296 <_dtoa_r+0x4b6>
 800f282:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f286:	ed90 7b00 	vldr	d7, [r0]
 800f28a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f28e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f292:	3201      	adds	r2, #1
 800f294:	2401      	movs	r4, #1
 800f296:	1049      	asrs	r1, r1, #1
 800f298:	3008      	adds	r0, #8
 800f29a:	e7e7      	b.n	800f26c <_dtoa_r+0x48c>
 800f29c:	2202      	movs	r2, #2
 800f29e:	e749      	b.n	800f134 <_dtoa_r+0x354>
 800f2a0:	465f      	mov	r7, fp
 800f2a2:	4648      	mov	r0, r9
 800f2a4:	e765      	b.n	800f172 <_dtoa_r+0x392>
 800f2a6:	ec42 1b17 	vmov	d7, r1, r2
 800f2aa:	4a5c      	ldr	r2, [pc, #368]	; (800f41c <_dtoa_r+0x63c>)
 800f2ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f2b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f2b4:	9a00      	ldr	r2, [sp, #0]
 800f2b6:	1814      	adds	r4, r2, r0
 800f2b8:	9a08      	ldr	r2, [sp, #32]
 800f2ba:	b352      	cbz	r2, 800f312 <_dtoa_r+0x532>
 800f2bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f2c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f2c4:	f8dd 8000 	ldr.w	r8, [sp]
 800f2c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f2cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f2d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f2d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f2d8:	ee14 2a90 	vmov	r2, s9
 800f2dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f2e0:	3230      	adds	r2, #48	; 0x30
 800f2e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f2e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ee:	f808 2b01 	strb.w	r2, [r8], #1
 800f2f2:	d439      	bmi.n	800f368 <_dtoa_r+0x588>
 800f2f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f2f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f300:	d472      	bmi.n	800f3e8 <_dtoa_r+0x608>
 800f302:	45a0      	cmp	r8, r4
 800f304:	f43f af5d 	beq.w	800f1c2 <_dtoa_r+0x3e2>
 800f308:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f30c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f310:	e7e0      	b.n	800f2d4 <_dtoa_r+0x4f4>
 800f312:	f8dd 8000 	ldr.w	r8, [sp]
 800f316:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f31a:	4621      	mov	r1, r4
 800f31c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f320:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f324:	ee14 2a90 	vmov	r2, s9
 800f328:	3230      	adds	r2, #48	; 0x30
 800f32a:	f808 2b01 	strb.w	r2, [r8], #1
 800f32e:	45a0      	cmp	r8, r4
 800f330:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f334:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f338:	d118      	bne.n	800f36c <_dtoa_r+0x58c>
 800f33a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f33e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f342:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34a:	dc4d      	bgt.n	800f3e8 <_dtoa_r+0x608>
 800f34c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f350:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	f57f af33 	bpl.w	800f1c2 <_dtoa_r+0x3e2>
 800f35c:	4688      	mov	r8, r1
 800f35e:	3901      	subs	r1, #1
 800f360:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f364:	2b30      	cmp	r3, #48	; 0x30
 800f366:	d0f9      	beq.n	800f35c <_dtoa_r+0x57c>
 800f368:	46bb      	mov	fp, r7
 800f36a:	e02a      	b.n	800f3c2 <_dtoa_r+0x5e2>
 800f36c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f370:	e7d6      	b.n	800f320 <_dtoa_r+0x540>
 800f372:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f376:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f37a:	f8dd 8000 	ldr.w	r8, [sp]
 800f37e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f382:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f386:	ee15 3a10 	vmov	r3, s10
 800f38a:	3330      	adds	r3, #48	; 0x30
 800f38c:	f808 3b01 	strb.w	r3, [r8], #1
 800f390:	9b00      	ldr	r3, [sp, #0]
 800f392:	eba8 0303 	sub.w	r3, r8, r3
 800f396:	4599      	cmp	r9, r3
 800f398:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f39c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f3a0:	d133      	bne.n	800f40a <_dtoa_r+0x62a>
 800f3a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f3a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ae:	dc1a      	bgt.n	800f3e6 <_dtoa_r+0x606>
 800f3b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800f3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b8:	d103      	bne.n	800f3c2 <_dtoa_r+0x5e2>
 800f3ba:	ee15 3a10 	vmov	r3, s10
 800f3be:	07d9      	lsls	r1, r3, #31
 800f3c0:	d411      	bmi.n	800f3e6 <_dtoa_r+0x606>
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f000 faeb 	bl	800f9a0 <_Bfree>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f3ce:	f888 3000 	strb.w	r3, [r8]
 800f3d2:	f10b 0301 	add.w	r3, fp, #1
 800f3d6:	6013      	str	r3, [r2, #0]
 800f3d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f43f ad4d 	beq.w	800ee7a <_dtoa_r+0x9a>
 800f3e0:	f8c3 8000 	str.w	r8, [r3]
 800f3e4:	e549      	b.n	800ee7a <_dtoa_r+0x9a>
 800f3e6:	465f      	mov	r7, fp
 800f3e8:	4643      	mov	r3, r8
 800f3ea:	4698      	mov	r8, r3
 800f3ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3f0:	2a39      	cmp	r2, #57	; 0x39
 800f3f2:	d106      	bne.n	800f402 <_dtoa_r+0x622>
 800f3f4:	9a00      	ldr	r2, [sp, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d1f7      	bne.n	800f3ea <_dtoa_r+0x60a>
 800f3fa:	9900      	ldr	r1, [sp, #0]
 800f3fc:	2230      	movs	r2, #48	; 0x30
 800f3fe:	3701      	adds	r7, #1
 800f400:	700a      	strb	r2, [r1, #0]
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	3201      	adds	r2, #1
 800f406:	701a      	strb	r2, [r3, #0]
 800f408:	e7ae      	b.n	800f368 <_dtoa_r+0x588>
 800f40a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f40e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f416:	d1b2      	bne.n	800f37e <_dtoa_r+0x59e>
 800f418:	e7d3      	b.n	800f3c2 <_dtoa_r+0x5e2>
 800f41a:	bf00      	nop
 800f41c:	08011128 	.word	0x08011128
 800f420:	08011100 	.word	0x08011100
 800f424:	9908      	ldr	r1, [sp, #32]
 800f426:	2900      	cmp	r1, #0
 800f428:	f000 80d1 	beq.w	800f5ce <_dtoa_r+0x7ee>
 800f42c:	9907      	ldr	r1, [sp, #28]
 800f42e:	2901      	cmp	r1, #1
 800f430:	f300 80b4 	bgt.w	800f59c <_dtoa_r+0x7bc>
 800f434:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f436:	2900      	cmp	r1, #0
 800f438:	f000 80ac 	beq.w	800f594 <_dtoa_r+0x7b4>
 800f43c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f440:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f444:	461c      	mov	r4, r3
 800f446:	930a      	str	r3, [sp, #40]	; 0x28
 800f448:	9b05      	ldr	r3, [sp, #20]
 800f44a:	4413      	add	r3, r2
 800f44c:	9305      	str	r3, [sp, #20]
 800f44e:	9b06      	ldr	r3, [sp, #24]
 800f450:	2101      	movs	r1, #1
 800f452:	4413      	add	r3, r2
 800f454:	4630      	mov	r0, r6
 800f456:	9306      	str	r3, [sp, #24]
 800f458:	f000 fb5e 	bl	800fb18 <__i2b>
 800f45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f45e:	4607      	mov	r7, r0
 800f460:	f1b8 0f00 	cmp.w	r8, #0
 800f464:	dd0d      	ble.n	800f482 <_dtoa_r+0x6a2>
 800f466:	9a06      	ldr	r2, [sp, #24]
 800f468:	2a00      	cmp	r2, #0
 800f46a:	dd0a      	ble.n	800f482 <_dtoa_r+0x6a2>
 800f46c:	4542      	cmp	r2, r8
 800f46e:	9905      	ldr	r1, [sp, #20]
 800f470:	bfa8      	it	ge
 800f472:	4642      	movge	r2, r8
 800f474:	1a89      	subs	r1, r1, r2
 800f476:	9105      	str	r1, [sp, #20]
 800f478:	9906      	ldr	r1, [sp, #24]
 800f47a:	eba8 0802 	sub.w	r8, r8, r2
 800f47e:	1a8a      	subs	r2, r1, r2
 800f480:	9206      	str	r2, [sp, #24]
 800f482:	b303      	cbz	r3, 800f4c6 <_dtoa_r+0x6e6>
 800f484:	9a08      	ldr	r2, [sp, #32]
 800f486:	2a00      	cmp	r2, #0
 800f488:	f000 80a6 	beq.w	800f5d8 <_dtoa_r+0x7f8>
 800f48c:	2c00      	cmp	r4, #0
 800f48e:	dd13      	ble.n	800f4b8 <_dtoa_r+0x6d8>
 800f490:	4639      	mov	r1, r7
 800f492:	4622      	mov	r2, r4
 800f494:	4630      	mov	r0, r6
 800f496:	930c      	str	r3, [sp, #48]	; 0x30
 800f498:	f000 fbfa 	bl	800fc90 <__pow5mult>
 800f49c:	462a      	mov	r2, r5
 800f49e:	4601      	mov	r1, r0
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f000 fb4e 	bl	800fb44 <__multiply>
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	900a      	str	r0, [sp, #40]	; 0x28
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f000 fa77 	bl	800f9a0 <_Bfree>
 800f4b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4b6:	4615      	mov	r5, r2
 800f4b8:	1b1a      	subs	r2, r3, r4
 800f4ba:	d004      	beq.n	800f4c6 <_dtoa_r+0x6e6>
 800f4bc:	4629      	mov	r1, r5
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f000 fbe6 	bl	800fc90 <__pow5mult>
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f000 fb25 	bl	800fb18 <__i2b>
 800f4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	f340 8082 	ble.w	800f5dc <_dtoa_r+0x7fc>
 800f4d8:	461a      	mov	r2, r3
 800f4da:	4601      	mov	r1, r0
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f000 fbd7 	bl	800fc90 <__pow5mult>
 800f4e2:	9b07      	ldr	r3, [sp, #28]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	dd7b      	ble.n	800f5e2 <_dtoa_r+0x802>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	930a      	str	r3, [sp, #40]	; 0x28
 800f4ee:	6922      	ldr	r2, [r4, #16]
 800f4f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f4f4:	6910      	ldr	r0, [r2, #16]
 800f4f6:	f000 fabf 	bl	800fa78 <__hi0bits>
 800f4fa:	f1c0 0020 	rsb	r0, r0, #32
 800f4fe:	9b06      	ldr	r3, [sp, #24]
 800f500:	4418      	add	r0, r3
 800f502:	f010 001f 	ands.w	r0, r0, #31
 800f506:	f000 808d 	beq.w	800f624 <_dtoa_r+0x844>
 800f50a:	f1c0 0220 	rsb	r2, r0, #32
 800f50e:	2a04      	cmp	r2, #4
 800f510:	f340 8086 	ble.w	800f620 <_dtoa_r+0x840>
 800f514:	f1c0 001c 	rsb	r0, r0, #28
 800f518:	9b05      	ldr	r3, [sp, #20]
 800f51a:	4403      	add	r3, r0
 800f51c:	9305      	str	r3, [sp, #20]
 800f51e:	9b06      	ldr	r3, [sp, #24]
 800f520:	4403      	add	r3, r0
 800f522:	4480      	add	r8, r0
 800f524:	9306      	str	r3, [sp, #24]
 800f526:	9b05      	ldr	r3, [sp, #20]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	dd05      	ble.n	800f538 <_dtoa_r+0x758>
 800f52c:	4629      	mov	r1, r5
 800f52e:	461a      	mov	r2, r3
 800f530:	4630      	mov	r0, r6
 800f532:	f000 fc07 	bl	800fd44 <__lshift>
 800f536:	4605      	mov	r5, r0
 800f538:	9b06      	ldr	r3, [sp, #24]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dd05      	ble.n	800f54a <_dtoa_r+0x76a>
 800f53e:	4621      	mov	r1, r4
 800f540:	461a      	mov	r2, r3
 800f542:	4630      	mov	r0, r6
 800f544:	f000 fbfe 	bl	800fd44 <__lshift>
 800f548:	4604      	mov	r4, r0
 800f54a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d06b      	beq.n	800f628 <_dtoa_r+0x848>
 800f550:	4621      	mov	r1, r4
 800f552:	4628      	mov	r0, r5
 800f554:	f000 fc62 	bl	800fe1c <__mcmp>
 800f558:	2800      	cmp	r0, #0
 800f55a:	da65      	bge.n	800f628 <_dtoa_r+0x848>
 800f55c:	2300      	movs	r3, #0
 800f55e:	4629      	mov	r1, r5
 800f560:	220a      	movs	r2, #10
 800f562:	4630      	mov	r0, r6
 800f564:	f000 fa3e 	bl	800f9e4 <__multadd>
 800f568:	9b08      	ldr	r3, [sp, #32]
 800f56a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f56e:	4605      	mov	r5, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 8192 	beq.w	800f89a <_dtoa_r+0xaba>
 800f576:	4639      	mov	r1, r7
 800f578:	2300      	movs	r3, #0
 800f57a:	220a      	movs	r2, #10
 800f57c:	4630      	mov	r0, r6
 800f57e:	f000 fa31 	bl	800f9e4 <__multadd>
 800f582:	f1ba 0f00 	cmp.w	sl, #0
 800f586:	4607      	mov	r7, r0
 800f588:	f300 808e 	bgt.w	800f6a8 <_dtoa_r+0x8c8>
 800f58c:	9b07      	ldr	r3, [sp, #28]
 800f58e:	2b02      	cmp	r3, #2
 800f590:	dc51      	bgt.n	800f636 <_dtoa_r+0x856>
 800f592:	e089      	b.n	800f6a8 <_dtoa_r+0x8c8>
 800f594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f596:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f59a:	e751      	b.n	800f440 <_dtoa_r+0x660>
 800f59c:	f109 34ff 	add.w	r4, r9, #4294967295
 800f5a0:	42a3      	cmp	r3, r4
 800f5a2:	bfbf      	itttt	lt
 800f5a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f5a6:	1ae3      	sublt	r3, r4, r3
 800f5a8:	18d2      	addlt	r2, r2, r3
 800f5aa:	4613      	movlt	r3, r2
 800f5ac:	bfb7      	itett	lt
 800f5ae:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f5b0:	1b1c      	subge	r4, r3, r4
 800f5b2:	4623      	movlt	r3, r4
 800f5b4:	2400      	movlt	r4, #0
 800f5b6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ba:	bfb5      	itete	lt
 800f5bc:	9a05      	ldrlt	r2, [sp, #20]
 800f5be:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f5c2:	eba2 0809 	sublt.w	r8, r2, r9
 800f5c6:	464a      	movge	r2, r9
 800f5c8:	bfb8      	it	lt
 800f5ca:	2200      	movlt	r2, #0
 800f5cc:	e73b      	b.n	800f446 <_dtoa_r+0x666>
 800f5ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f5d2:	9f08      	ldr	r7, [sp, #32]
 800f5d4:	461c      	mov	r4, r3
 800f5d6:	e743      	b.n	800f460 <_dtoa_r+0x680>
 800f5d8:	461a      	mov	r2, r3
 800f5da:	e76f      	b.n	800f4bc <_dtoa_r+0x6dc>
 800f5dc:	9b07      	ldr	r3, [sp, #28]
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	dc18      	bgt.n	800f614 <_dtoa_r+0x834>
 800f5e2:	9b02      	ldr	r3, [sp, #8]
 800f5e4:	b9b3      	cbnz	r3, 800f614 <_dtoa_r+0x834>
 800f5e6:	9b03      	ldr	r3, [sp, #12]
 800f5e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f5ec:	b9a2      	cbnz	r2, 800f618 <_dtoa_r+0x838>
 800f5ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f5f2:	0d12      	lsrs	r2, r2, #20
 800f5f4:	0512      	lsls	r2, r2, #20
 800f5f6:	b18a      	cbz	r2, 800f61c <_dtoa_r+0x83c>
 800f5f8:	9b05      	ldr	r3, [sp, #20]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	9305      	str	r3, [sp, #20]
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	3301      	adds	r3, #1
 800f602:	9306      	str	r3, [sp, #24]
 800f604:	2301      	movs	r3, #1
 800f606:	930a      	str	r3, [sp, #40]	; 0x28
 800f608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f47f af6f 	bne.w	800f4ee <_dtoa_r+0x70e>
 800f610:	2001      	movs	r0, #1
 800f612:	e774      	b.n	800f4fe <_dtoa_r+0x71e>
 800f614:	2300      	movs	r3, #0
 800f616:	e7f6      	b.n	800f606 <_dtoa_r+0x826>
 800f618:	9b02      	ldr	r3, [sp, #8]
 800f61a:	e7f4      	b.n	800f606 <_dtoa_r+0x826>
 800f61c:	920a      	str	r2, [sp, #40]	; 0x28
 800f61e:	e7f3      	b.n	800f608 <_dtoa_r+0x828>
 800f620:	d081      	beq.n	800f526 <_dtoa_r+0x746>
 800f622:	4610      	mov	r0, r2
 800f624:	301c      	adds	r0, #28
 800f626:	e777      	b.n	800f518 <_dtoa_r+0x738>
 800f628:	f1b9 0f00 	cmp.w	r9, #0
 800f62c:	dc37      	bgt.n	800f69e <_dtoa_r+0x8be>
 800f62e:	9b07      	ldr	r3, [sp, #28]
 800f630:	2b02      	cmp	r3, #2
 800f632:	dd34      	ble.n	800f69e <_dtoa_r+0x8be>
 800f634:	46ca      	mov	sl, r9
 800f636:	f1ba 0f00 	cmp.w	sl, #0
 800f63a:	d10d      	bne.n	800f658 <_dtoa_r+0x878>
 800f63c:	4621      	mov	r1, r4
 800f63e:	4653      	mov	r3, sl
 800f640:	2205      	movs	r2, #5
 800f642:	4630      	mov	r0, r6
 800f644:	f000 f9ce 	bl	800f9e4 <__multadd>
 800f648:	4601      	mov	r1, r0
 800f64a:	4604      	mov	r4, r0
 800f64c:	4628      	mov	r0, r5
 800f64e:	f000 fbe5 	bl	800fe1c <__mcmp>
 800f652:	2800      	cmp	r0, #0
 800f654:	f73f adde 	bgt.w	800f214 <_dtoa_r+0x434>
 800f658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f65a:	f8dd 8000 	ldr.w	r8, [sp]
 800f65e:	ea6f 0b03 	mvn.w	fp, r3
 800f662:	f04f 0900 	mov.w	r9, #0
 800f666:	4621      	mov	r1, r4
 800f668:	4630      	mov	r0, r6
 800f66a:	f000 f999 	bl	800f9a0 <_Bfree>
 800f66e:	2f00      	cmp	r7, #0
 800f670:	f43f aea7 	beq.w	800f3c2 <_dtoa_r+0x5e2>
 800f674:	f1b9 0f00 	cmp.w	r9, #0
 800f678:	d005      	beq.n	800f686 <_dtoa_r+0x8a6>
 800f67a:	45b9      	cmp	r9, r7
 800f67c:	d003      	beq.n	800f686 <_dtoa_r+0x8a6>
 800f67e:	4649      	mov	r1, r9
 800f680:	4630      	mov	r0, r6
 800f682:	f000 f98d 	bl	800f9a0 <_Bfree>
 800f686:	4639      	mov	r1, r7
 800f688:	4630      	mov	r0, r6
 800f68a:	f000 f989 	bl	800f9a0 <_Bfree>
 800f68e:	e698      	b.n	800f3c2 <_dtoa_r+0x5e2>
 800f690:	2400      	movs	r4, #0
 800f692:	4627      	mov	r7, r4
 800f694:	e7e0      	b.n	800f658 <_dtoa_r+0x878>
 800f696:	46bb      	mov	fp, r7
 800f698:	4604      	mov	r4, r0
 800f69a:	4607      	mov	r7, r0
 800f69c:	e5ba      	b.n	800f214 <_dtoa_r+0x434>
 800f69e:	9b08      	ldr	r3, [sp, #32]
 800f6a0:	46ca      	mov	sl, r9
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 8100 	beq.w	800f8a8 <_dtoa_r+0xac8>
 800f6a8:	f1b8 0f00 	cmp.w	r8, #0
 800f6ac:	dd05      	ble.n	800f6ba <_dtoa_r+0x8da>
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	4642      	mov	r2, r8
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f000 fb46 	bl	800fd44 <__lshift>
 800f6b8:	4607      	mov	r7, r0
 800f6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d05d      	beq.n	800f77c <_dtoa_r+0x99c>
 800f6c0:	6879      	ldr	r1, [r7, #4]
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f000 f92c 	bl	800f920 <_Balloc>
 800f6c8:	4680      	mov	r8, r0
 800f6ca:	b928      	cbnz	r0, 800f6d8 <_dtoa_r+0x8f8>
 800f6cc:	4b82      	ldr	r3, [pc, #520]	; (800f8d8 <_dtoa_r+0xaf8>)
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f6d4:	f7ff bb9a 	b.w	800ee0c <_dtoa_r+0x2c>
 800f6d8:	693a      	ldr	r2, [r7, #16]
 800f6da:	3202      	adds	r2, #2
 800f6dc:	0092      	lsls	r2, r2, #2
 800f6de:	f107 010c 	add.w	r1, r7, #12
 800f6e2:	300c      	adds	r0, #12
 800f6e4:	f000 f902 	bl	800f8ec <memcpy>
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	4641      	mov	r1, r8
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f000 fb29 	bl	800fd44 <__lshift>
 800f6f2:	9b00      	ldr	r3, [sp, #0]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	9305      	str	r3, [sp, #20]
 800f6f8:	9b00      	ldr	r3, [sp, #0]
 800f6fa:	4453      	add	r3, sl
 800f6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f6fe:	9b02      	ldr	r3, [sp, #8]
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	46b9      	mov	r9, r7
 800f706:	9308      	str	r3, [sp, #32]
 800f708:	4607      	mov	r7, r0
 800f70a:	9b05      	ldr	r3, [sp, #20]
 800f70c:	4621      	mov	r1, r4
 800f70e:	3b01      	subs	r3, #1
 800f710:	4628      	mov	r0, r5
 800f712:	9302      	str	r3, [sp, #8]
 800f714:	f7ff fad6 	bl	800ecc4 <quorem>
 800f718:	4603      	mov	r3, r0
 800f71a:	3330      	adds	r3, #48	; 0x30
 800f71c:	9006      	str	r0, [sp, #24]
 800f71e:	4649      	mov	r1, r9
 800f720:	4628      	mov	r0, r5
 800f722:	930a      	str	r3, [sp, #40]	; 0x28
 800f724:	f000 fb7a 	bl	800fe1c <__mcmp>
 800f728:	463a      	mov	r2, r7
 800f72a:	4682      	mov	sl, r0
 800f72c:	4621      	mov	r1, r4
 800f72e:	4630      	mov	r0, r6
 800f730:	f000 fb90 	bl	800fe54 <__mdiff>
 800f734:	68c2      	ldr	r2, [r0, #12]
 800f736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f738:	4680      	mov	r8, r0
 800f73a:	bb0a      	cbnz	r2, 800f780 <_dtoa_r+0x9a0>
 800f73c:	4601      	mov	r1, r0
 800f73e:	4628      	mov	r0, r5
 800f740:	f000 fb6c 	bl	800fe1c <__mcmp>
 800f744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f746:	4602      	mov	r2, r0
 800f748:	4641      	mov	r1, r8
 800f74a:	4630      	mov	r0, r6
 800f74c:	920e      	str	r2, [sp, #56]	; 0x38
 800f74e:	930a      	str	r3, [sp, #40]	; 0x28
 800f750:	f000 f926 	bl	800f9a0 <_Bfree>
 800f754:	9b07      	ldr	r3, [sp, #28]
 800f756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f758:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f75c:	ea43 0102 	orr.w	r1, r3, r2
 800f760:	9b08      	ldr	r3, [sp, #32]
 800f762:	430b      	orrs	r3, r1
 800f764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f766:	d10d      	bne.n	800f784 <_dtoa_r+0x9a4>
 800f768:	2b39      	cmp	r3, #57	; 0x39
 800f76a:	d029      	beq.n	800f7c0 <_dtoa_r+0x9e0>
 800f76c:	f1ba 0f00 	cmp.w	sl, #0
 800f770:	dd01      	ble.n	800f776 <_dtoa_r+0x996>
 800f772:	9b06      	ldr	r3, [sp, #24]
 800f774:	3331      	adds	r3, #49	; 0x31
 800f776:	9a02      	ldr	r2, [sp, #8]
 800f778:	7013      	strb	r3, [r2, #0]
 800f77a:	e774      	b.n	800f666 <_dtoa_r+0x886>
 800f77c:	4638      	mov	r0, r7
 800f77e:	e7b8      	b.n	800f6f2 <_dtoa_r+0x912>
 800f780:	2201      	movs	r2, #1
 800f782:	e7e1      	b.n	800f748 <_dtoa_r+0x968>
 800f784:	f1ba 0f00 	cmp.w	sl, #0
 800f788:	db06      	blt.n	800f798 <_dtoa_r+0x9b8>
 800f78a:	9907      	ldr	r1, [sp, #28]
 800f78c:	ea41 0a0a 	orr.w	sl, r1, sl
 800f790:	9908      	ldr	r1, [sp, #32]
 800f792:	ea5a 0101 	orrs.w	r1, sl, r1
 800f796:	d120      	bne.n	800f7da <_dtoa_r+0x9fa>
 800f798:	2a00      	cmp	r2, #0
 800f79a:	ddec      	ble.n	800f776 <_dtoa_r+0x996>
 800f79c:	4629      	mov	r1, r5
 800f79e:	2201      	movs	r2, #1
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	9305      	str	r3, [sp, #20]
 800f7a4:	f000 face 	bl	800fd44 <__lshift>
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	f000 fb36 	bl	800fe1c <__mcmp>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	9b05      	ldr	r3, [sp, #20]
 800f7b4:	dc02      	bgt.n	800f7bc <_dtoa_r+0x9dc>
 800f7b6:	d1de      	bne.n	800f776 <_dtoa_r+0x996>
 800f7b8:	07da      	lsls	r2, r3, #31
 800f7ba:	d5dc      	bpl.n	800f776 <_dtoa_r+0x996>
 800f7bc:	2b39      	cmp	r3, #57	; 0x39
 800f7be:	d1d8      	bne.n	800f772 <_dtoa_r+0x992>
 800f7c0:	9a02      	ldr	r2, [sp, #8]
 800f7c2:	2339      	movs	r3, #57	; 0x39
 800f7c4:	7013      	strb	r3, [r2, #0]
 800f7c6:	4643      	mov	r3, r8
 800f7c8:	4698      	mov	r8, r3
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f7d0:	2a39      	cmp	r2, #57	; 0x39
 800f7d2:	d051      	beq.n	800f878 <_dtoa_r+0xa98>
 800f7d4:	3201      	adds	r2, #1
 800f7d6:	701a      	strb	r2, [r3, #0]
 800f7d8:	e745      	b.n	800f666 <_dtoa_r+0x886>
 800f7da:	2a00      	cmp	r2, #0
 800f7dc:	dd03      	ble.n	800f7e6 <_dtoa_r+0xa06>
 800f7de:	2b39      	cmp	r3, #57	; 0x39
 800f7e0:	d0ee      	beq.n	800f7c0 <_dtoa_r+0x9e0>
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	e7c7      	b.n	800f776 <_dtoa_r+0x996>
 800f7e6:	9a05      	ldr	r2, [sp, #20]
 800f7e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f7ee:	428a      	cmp	r2, r1
 800f7f0:	d02b      	beq.n	800f84a <_dtoa_r+0xa6a>
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	220a      	movs	r2, #10
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f000 f8f3 	bl	800f9e4 <__multadd>
 800f7fe:	45b9      	cmp	r9, r7
 800f800:	4605      	mov	r5, r0
 800f802:	f04f 0300 	mov.w	r3, #0
 800f806:	f04f 020a 	mov.w	r2, #10
 800f80a:	4649      	mov	r1, r9
 800f80c:	4630      	mov	r0, r6
 800f80e:	d107      	bne.n	800f820 <_dtoa_r+0xa40>
 800f810:	f000 f8e8 	bl	800f9e4 <__multadd>
 800f814:	4681      	mov	r9, r0
 800f816:	4607      	mov	r7, r0
 800f818:	9b05      	ldr	r3, [sp, #20]
 800f81a:	3301      	adds	r3, #1
 800f81c:	9305      	str	r3, [sp, #20]
 800f81e:	e774      	b.n	800f70a <_dtoa_r+0x92a>
 800f820:	f000 f8e0 	bl	800f9e4 <__multadd>
 800f824:	4639      	mov	r1, r7
 800f826:	4681      	mov	r9, r0
 800f828:	2300      	movs	r3, #0
 800f82a:	220a      	movs	r2, #10
 800f82c:	4630      	mov	r0, r6
 800f82e:	f000 f8d9 	bl	800f9e4 <__multadd>
 800f832:	4607      	mov	r7, r0
 800f834:	e7f0      	b.n	800f818 <_dtoa_r+0xa38>
 800f836:	f1ba 0f00 	cmp.w	sl, #0
 800f83a:	9a00      	ldr	r2, [sp, #0]
 800f83c:	bfcc      	ite	gt
 800f83e:	46d0      	movgt	r8, sl
 800f840:	f04f 0801 	movle.w	r8, #1
 800f844:	4490      	add	r8, r2
 800f846:	f04f 0900 	mov.w	r9, #0
 800f84a:	4629      	mov	r1, r5
 800f84c:	2201      	movs	r2, #1
 800f84e:	4630      	mov	r0, r6
 800f850:	9302      	str	r3, [sp, #8]
 800f852:	f000 fa77 	bl	800fd44 <__lshift>
 800f856:	4621      	mov	r1, r4
 800f858:	4605      	mov	r5, r0
 800f85a:	f000 fadf 	bl	800fe1c <__mcmp>
 800f85e:	2800      	cmp	r0, #0
 800f860:	dcb1      	bgt.n	800f7c6 <_dtoa_r+0x9e6>
 800f862:	d102      	bne.n	800f86a <_dtoa_r+0xa8a>
 800f864:	9b02      	ldr	r3, [sp, #8]
 800f866:	07db      	lsls	r3, r3, #31
 800f868:	d4ad      	bmi.n	800f7c6 <_dtoa_r+0x9e6>
 800f86a:	4643      	mov	r3, r8
 800f86c:	4698      	mov	r8, r3
 800f86e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f872:	2a30      	cmp	r2, #48	; 0x30
 800f874:	d0fa      	beq.n	800f86c <_dtoa_r+0xa8c>
 800f876:	e6f6      	b.n	800f666 <_dtoa_r+0x886>
 800f878:	9a00      	ldr	r2, [sp, #0]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d1a4      	bne.n	800f7c8 <_dtoa_r+0x9e8>
 800f87e:	f10b 0b01 	add.w	fp, fp, #1
 800f882:	2331      	movs	r3, #49	; 0x31
 800f884:	e778      	b.n	800f778 <_dtoa_r+0x998>
 800f886:	4b15      	ldr	r3, [pc, #84]	; (800f8dc <_dtoa_r+0xafc>)
 800f888:	f7ff bb12 	b.w	800eeb0 <_dtoa_r+0xd0>
 800f88c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f47f aaee 	bne.w	800ee70 <_dtoa_r+0x90>
 800f894:	4b12      	ldr	r3, [pc, #72]	; (800f8e0 <_dtoa_r+0xb00>)
 800f896:	f7ff bb0b 	b.w	800eeb0 <_dtoa_r+0xd0>
 800f89a:	f1ba 0f00 	cmp.w	sl, #0
 800f89e:	dc03      	bgt.n	800f8a8 <_dtoa_r+0xac8>
 800f8a0:	9b07      	ldr	r3, [sp, #28]
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	f73f aec7 	bgt.w	800f636 <_dtoa_r+0x856>
 800f8a8:	f8dd 8000 	ldr.w	r8, [sp]
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f7ff fa08 	bl	800ecc4 <quorem>
 800f8b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f8b8:	f808 3b01 	strb.w	r3, [r8], #1
 800f8bc:	9a00      	ldr	r2, [sp, #0]
 800f8be:	eba8 0202 	sub.w	r2, r8, r2
 800f8c2:	4592      	cmp	sl, r2
 800f8c4:	ddb7      	ble.n	800f836 <_dtoa_r+0xa56>
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	220a      	movs	r2, #10
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f000 f889 	bl	800f9e4 <__multadd>
 800f8d2:	4605      	mov	r5, r0
 800f8d4:	e7ea      	b.n	800f8ac <_dtoa_r+0xacc>
 800f8d6:	bf00      	nop
 800f8d8:	0801108f 	.word	0x0801108f
 800f8dc:	08010fe8 	.word	0x08010fe8
 800f8e0:	0801100c 	.word	0x0801100c

0800f8e4 <_localeconv_r>:
 800f8e4:	4800      	ldr	r0, [pc, #0]	; (800f8e8 <_localeconv_r+0x4>)
 800f8e6:	4770      	bx	lr
 800f8e8:	24000184 	.word	0x24000184

0800f8ec <memcpy>:
 800f8ec:	440a      	add	r2, r1
 800f8ee:	4291      	cmp	r1, r2
 800f8f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8f4:	d100      	bne.n	800f8f8 <memcpy+0xc>
 800f8f6:	4770      	bx	lr
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f902:	4291      	cmp	r1, r2
 800f904:	d1f9      	bne.n	800f8fa <memcpy+0xe>
 800f906:	bd10      	pop	{r4, pc}

0800f908 <__malloc_lock>:
 800f908:	4801      	ldr	r0, [pc, #4]	; (800f910 <__malloc_lock+0x8>)
 800f90a:	f000 bd22 	b.w	8010352 <__retarget_lock_acquire_recursive>
 800f90e:	bf00      	nop
 800f910:	240010e0 	.word	0x240010e0

0800f914 <__malloc_unlock>:
 800f914:	4801      	ldr	r0, [pc, #4]	; (800f91c <__malloc_unlock+0x8>)
 800f916:	f000 bd1d 	b.w	8010354 <__retarget_lock_release_recursive>
 800f91a:	bf00      	nop
 800f91c:	240010e0 	.word	0x240010e0

0800f920 <_Balloc>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f924:	4604      	mov	r4, r0
 800f926:	460d      	mov	r5, r1
 800f928:	b976      	cbnz	r6, 800f948 <_Balloc+0x28>
 800f92a:	2010      	movs	r0, #16
 800f92c:	f7fe fc94 	bl	800e258 <malloc>
 800f930:	4602      	mov	r2, r0
 800f932:	6260      	str	r0, [r4, #36]	; 0x24
 800f934:	b920      	cbnz	r0, 800f940 <_Balloc+0x20>
 800f936:	4b18      	ldr	r3, [pc, #96]	; (800f998 <_Balloc+0x78>)
 800f938:	4818      	ldr	r0, [pc, #96]	; (800f99c <_Balloc+0x7c>)
 800f93a:	2166      	movs	r1, #102	; 0x66
 800f93c:	f000 fcd8 	bl	80102f0 <__assert_func>
 800f940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f944:	6006      	str	r6, [r0, #0]
 800f946:	60c6      	str	r6, [r0, #12]
 800f948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f94a:	68f3      	ldr	r3, [r6, #12]
 800f94c:	b183      	cbz	r3, 800f970 <_Balloc+0x50>
 800f94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f956:	b9b8      	cbnz	r0, 800f988 <_Balloc+0x68>
 800f958:	2101      	movs	r1, #1
 800f95a:	fa01 f605 	lsl.w	r6, r1, r5
 800f95e:	1d72      	adds	r2, r6, #5
 800f960:	0092      	lsls	r2, r2, #2
 800f962:	4620      	mov	r0, r4
 800f964:	f000 fb5a 	bl	801001c <_calloc_r>
 800f968:	b160      	cbz	r0, 800f984 <_Balloc+0x64>
 800f96a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f96e:	e00e      	b.n	800f98e <_Balloc+0x6e>
 800f970:	2221      	movs	r2, #33	; 0x21
 800f972:	2104      	movs	r1, #4
 800f974:	4620      	mov	r0, r4
 800f976:	f000 fb51 	bl	801001c <_calloc_r>
 800f97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f97c:	60f0      	str	r0, [r6, #12]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d1e4      	bne.n	800f94e <_Balloc+0x2e>
 800f984:	2000      	movs	r0, #0
 800f986:	bd70      	pop	{r4, r5, r6, pc}
 800f988:	6802      	ldr	r2, [r0, #0]
 800f98a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f98e:	2300      	movs	r3, #0
 800f990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f994:	e7f7      	b.n	800f986 <_Balloc+0x66>
 800f996:	bf00      	nop
 800f998:	08011019 	.word	0x08011019
 800f99c:	080110a0 	.word	0x080110a0

0800f9a0 <_Bfree>:
 800f9a0:	b570      	push	{r4, r5, r6, lr}
 800f9a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f9a4:	4605      	mov	r5, r0
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	b976      	cbnz	r6, 800f9c8 <_Bfree+0x28>
 800f9aa:	2010      	movs	r0, #16
 800f9ac:	f7fe fc54 	bl	800e258 <malloc>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	6268      	str	r0, [r5, #36]	; 0x24
 800f9b4:	b920      	cbnz	r0, 800f9c0 <_Bfree+0x20>
 800f9b6:	4b09      	ldr	r3, [pc, #36]	; (800f9dc <_Bfree+0x3c>)
 800f9b8:	4809      	ldr	r0, [pc, #36]	; (800f9e0 <_Bfree+0x40>)
 800f9ba:	218a      	movs	r1, #138	; 0x8a
 800f9bc:	f000 fc98 	bl	80102f0 <__assert_func>
 800f9c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9c4:	6006      	str	r6, [r0, #0]
 800f9c6:	60c6      	str	r6, [r0, #12]
 800f9c8:	b13c      	cbz	r4, 800f9da <_Bfree+0x3a>
 800f9ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f9cc:	6862      	ldr	r2, [r4, #4]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f9d4:	6021      	str	r1, [r4, #0]
 800f9d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f9da:	bd70      	pop	{r4, r5, r6, pc}
 800f9dc:	08011019 	.word	0x08011019
 800f9e0:	080110a0 	.word	0x080110a0

0800f9e4 <__multadd>:
 800f9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e8:	690e      	ldr	r6, [r1, #16]
 800f9ea:	4607      	mov	r7, r0
 800f9ec:	4698      	mov	r8, r3
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	f101 0014 	add.w	r0, r1, #20
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	6805      	ldr	r5, [r0, #0]
 800f9f8:	b2a9      	uxth	r1, r5
 800f9fa:	fb02 8101 	mla	r1, r2, r1, r8
 800f9fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fa02:	0c2d      	lsrs	r5, r5, #16
 800fa04:	fb02 c505 	mla	r5, r2, r5, ip
 800fa08:	b289      	uxth	r1, r1
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fa10:	429e      	cmp	r6, r3
 800fa12:	f840 1b04 	str.w	r1, [r0], #4
 800fa16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fa1a:	dcec      	bgt.n	800f9f6 <__multadd+0x12>
 800fa1c:	f1b8 0f00 	cmp.w	r8, #0
 800fa20:	d022      	beq.n	800fa68 <__multadd+0x84>
 800fa22:	68a3      	ldr	r3, [r4, #8]
 800fa24:	42b3      	cmp	r3, r6
 800fa26:	dc19      	bgt.n	800fa5c <__multadd+0x78>
 800fa28:	6861      	ldr	r1, [r4, #4]
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	3101      	adds	r1, #1
 800fa2e:	f7ff ff77 	bl	800f920 <_Balloc>
 800fa32:	4605      	mov	r5, r0
 800fa34:	b928      	cbnz	r0, 800fa42 <__multadd+0x5e>
 800fa36:	4602      	mov	r2, r0
 800fa38:	4b0d      	ldr	r3, [pc, #52]	; (800fa70 <__multadd+0x8c>)
 800fa3a:	480e      	ldr	r0, [pc, #56]	; (800fa74 <__multadd+0x90>)
 800fa3c:	21b5      	movs	r1, #181	; 0xb5
 800fa3e:	f000 fc57 	bl	80102f0 <__assert_func>
 800fa42:	6922      	ldr	r2, [r4, #16]
 800fa44:	3202      	adds	r2, #2
 800fa46:	f104 010c 	add.w	r1, r4, #12
 800fa4a:	0092      	lsls	r2, r2, #2
 800fa4c:	300c      	adds	r0, #12
 800fa4e:	f7ff ff4d 	bl	800f8ec <memcpy>
 800fa52:	4621      	mov	r1, r4
 800fa54:	4638      	mov	r0, r7
 800fa56:	f7ff ffa3 	bl	800f9a0 <_Bfree>
 800fa5a:	462c      	mov	r4, r5
 800fa5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fa60:	3601      	adds	r6, #1
 800fa62:	f8c3 8014 	str.w	r8, [r3, #20]
 800fa66:	6126      	str	r6, [r4, #16]
 800fa68:	4620      	mov	r0, r4
 800fa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa6e:	bf00      	nop
 800fa70:	0801108f 	.word	0x0801108f
 800fa74:	080110a0 	.word	0x080110a0

0800fa78 <__hi0bits>:
 800fa78:	0c03      	lsrs	r3, r0, #16
 800fa7a:	041b      	lsls	r3, r3, #16
 800fa7c:	b9d3      	cbnz	r3, 800fab4 <__hi0bits+0x3c>
 800fa7e:	0400      	lsls	r0, r0, #16
 800fa80:	2310      	movs	r3, #16
 800fa82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fa86:	bf04      	itt	eq
 800fa88:	0200      	lsleq	r0, r0, #8
 800fa8a:	3308      	addeq	r3, #8
 800fa8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa90:	bf04      	itt	eq
 800fa92:	0100      	lsleq	r0, r0, #4
 800fa94:	3304      	addeq	r3, #4
 800fa96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa9a:	bf04      	itt	eq
 800fa9c:	0080      	lsleq	r0, r0, #2
 800fa9e:	3302      	addeq	r3, #2
 800faa0:	2800      	cmp	r0, #0
 800faa2:	db05      	blt.n	800fab0 <__hi0bits+0x38>
 800faa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800faa8:	f103 0301 	add.w	r3, r3, #1
 800faac:	bf08      	it	eq
 800faae:	2320      	moveq	r3, #32
 800fab0:	4618      	mov	r0, r3
 800fab2:	4770      	bx	lr
 800fab4:	2300      	movs	r3, #0
 800fab6:	e7e4      	b.n	800fa82 <__hi0bits+0xa>

0800fab8 <__lo0bits>:
 800fab8:	6803      	ldr	r3, [r0, #0]
 800faba:	f013 0207 	ands.w	r2, r3, #7
 800fabe:	4601      	mov	r1, r0
 800fac0:	d00b      	beq.n	800fada <__lo0bits+0x22>
 800fac2:	07da      	lsls	r2, r3, #31
 800fac4:	d424      	bmi.n	800fb10 <__lo0bits+0x58>
 800fac6:	0798      	lsls	r0, r3, #30
 800fac8:	bf49      	itett	mi
 800faca:	085b      	lsrmi	r3, r3, #1
 800facc:	089b      	lsrpl	r3, r3, #2
 800face:	2001      	movmi	r0, #1
 800fad0:	600b      	strmi	r3, [r1, #0]
 800fad2:	bf5c      	itt	pl
 800fad4:	600b      	strpl	r3, [r1, #0]
 800fad6:	2002      	movpl	r0, #2
 800fad8:	4770      	bx	lr
 800fada:	b298      	uxth	r0, r3
 800fadc:	b9b0      	cbnz	r0, 800fb0c <__lo0bits+0x54>
 800fade:	0c1b      	lsrs	r3, r3, #16
 800fae0:	2010      	movs	r0, #16
 800fae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fae6:	bf04      	itt	eq
 800fae8:	0a1b      	lsreq	r3, r3, #8
 800faea:	3008      	addeq	r0, #8
 800faec:	071a      	lsls	r2, r3, #28
 800faee:	bf04      	itt	eq
 800faf0:	091b      	lsreq	r3, r3, #4
 800faf2:	3004      	addeq	r0, #4
 800faf4:	079a      	lsls	r2, r3, #30
 800faf6:	bf04      	itt	eq
 800faf8:	089b      	lsreq	r3, r3, #2
 800fafa:	3002      	addeq	r0, #2
 800fafc:	07da      	lsls	r2, r3, #31
 800fafe:	d403      	bmi.n	800fb08 <__lo0bits+0x50>
 800fb00:	085b      	lsrs	r3, r3, #1
 800fb02:	f100 0001 	add.w	r0, r0, #1
 800fb06:	d005      	beq.n	800fb14 <__lo0bits+0x5c>
 800fb08:	600b      	str	r3, [r1, #0]
 800fb0a:	4770      	bx	lr
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	e7e8      	b.n	800fae2 <__lo0bits+0x2a>
 800fb10:	2000      	movs	r0, #0
 800fb12:	4770      	bx	lr
 800fb14:	2020      	movs	r0, #32
 800fb16:	4770      	bx	lr

0800fb18 <__i2b>:
 800fb18:	b510      	push	{r4, lr}
 800fb1a:	460c      	mov	r4, r1
 800fb1c:	2101      	movs	r1, #1
 800fb1e:	f7ff feff 	bl	800f920 <_Balloc>
 800fb22:	4602      	mov	r2, r0
 800fb24:	b928      	cbnz	r0, 800fb32 <__i2b+0x1a>
 800fb26:	4b05      	ldr	r3, [pc, #20]	; (800fb3c <__i2b+0x24>)
 800fb28:	4805      	ldr	r0, [pc, #20]	; (800fb40 <__i2b+0x28>)
 800fb2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb2e:	f000 fbdf 	bl	80102f0 <__assert_func>
 800fb32:	2301      	movs	r3, #1
 800fb34:	6144      	str	r4, [r0, #20]
 800fb36:	6103      	str	r3, [r0, #16]
 800fb38:	bd10      	pop	{r4, pc}
 800fb3a:	bf00      	nop
 800fb3c:	0801108f 	.word	0x0801108f
 800fb40:	080110a0 	.word	0x080110a0

0800fb44 <__multiply>:
 800fb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb48:	4614      	mov	r4, r2
 800fb4a:	690a      	ldr	r2, [r1, #16]
 800fb4c:	6923      	ldr	r3, [r4, #16]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	bfb8      	it	lt
 800fb52:	460b      	movlt	r3, r1
 800fb54:	460d      	mov	r5, r1
 800fb56:	bfbc      	itt	lt
 800fb58:	4625      	movlt	r5, r4
 800fb5a:	461c      	movlt	r4, r3
 800fb5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fb60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb64:	68ab      	ldr	r3, [r5, #8]
 800fb66:	6869      	ldr	r1, [r5, #4]
 800fb68:	eb0a 0709 	add.w	r7, sl, r9
 800fb6c:	42bb      	cmp	r3, r7
 800fb6e:	b085      	sub	sp, #20
 800fb70:	bfb8      	it	lt
 800fb72:	3101      	addlt	r1, #1
 800fb74:	f7ff fed4 	bl	800f920 <_Balloc>
 800fb78:	b930      	cbnz	r0, 800fb88 <__multiply+0x44>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	4b42      	ldr	r3, [pc, #264]	; (800fc88 <__multiply+0x144>)
 800fb7e:	4843      	ldr	r0, [pc, #268]	; (800fc8c <__multiply+0x148>)
 800fb80:	f240 115d 	movw	r1, #349	; 0x15d
 800fb84:	f000 fbb4 	bl	80102f0 <__assert_func>
 800fb88:	f100 0614 	add.w	r6, r0, #20
 800fb8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fb90:	4633      	mov	r3, r6
 800fb92:	2200      	movs	r2, #0
 800fb94:	4543      	cmp	r3, r8
 800fb96:	d31e      	bcc.n	800fbd6 <__multiply+0x92>
 800fb98:	f105 0c14 	add.w	ip, r5, #20
 800fb9c:	f104 0314 	add.w	r3, r4, #20
 800fba0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fba4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fba8:	9202      	str	r2, [sp, #8]
 800fbaa:	ebac 0205 	sub.w	r2, ip, r5
 800fbae:	3a15      	subs	r2, #21
 800fbb0:	f022 0203 	bic.w	r2, r2, #3
 800fbb4:	3204      	adds	r2, #4
 800fbb6:	f105 0115 	add.w	r1, r5, #21
 800fbba:	458c      	cmp	ip, r1
 800fbbc:	bf38      	it	cc
 800fbbe:	2204      	movcc	r2, #4
 800fbc0:	9201      	str	r2, [sp, #4]
 800fbc2:	9a02      	ldr	r2, [sp, #8]
 800fbc4:	9303      	str	r3, [sp, #12]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d808      	bhi.n	800fbdc <__multiply+0x98>
 800fbca:	2f00      	cmp	r7, #0
 800fbcc:	dc55      	bgt.n	800fc7a <__multiply+0x136>
 800fbce:	6107      	str	r7, [r0, #16]
 800fbd0:	b005      	add	sp, #20
 800fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd6:	f843 2b04 	str.w	r2, [r3], #4
 800fbda:	e7db      	b.n	800fb94 <__multiply+0x50>
 800fbdc:	f8b3 a000 	ldrh.w	sl, [r3]
 800fbe0:	f1ba 0f00 	cmp.w	sl, #0
 800fbe4:	d020      	beq.n	800fc28 <__multiply+0xe4>
 800fbe6:	f105 0e14 	add.w	lr, r5, #20
 800fbea:	46b1      	mov	r9, r6
 800fbec:	2200      	movs	r2, #0
 800fbee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fbf2:	f8d9 b000 	ldr.w	fp, [r9]
 800fbf6:	b2a1      	uxth	r1, r4
 800fbf8:	fa1f fb8b 	uxth.w	fp, fp
 800fbfc:	fb0a b101 	mla	r1, sl, r1, fp
 800fc00:	4411      	add	r1, r2
 800fc02:	f8d9 2000 	ldr.w	r2, [r9]
 800fc06:	0c24      	lsrs	r4, r4, #16
 800fc08:	0c12      	lsrs	r2, r2, #16
 800fc0a:	fb0a 2404 	mla	r4, sl, r4, r2
 800fc0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fc12:	b289      	uxth	r1, r1
 800fc14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fc18:	45f4      	cmp	ip, lr
 800fc1a:	f849 1b04 	str.w	r1, [r9], #4
 800fc1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fc22:	d8e4      	bhi.n	800fbee <__multiply+0xaa>
 800fc24:	9901      	ldr	r1, [sp, #4]
 800fc26:	5072      	str	r2, [r6, r1]
 800fc28:	9a03      	ldr	r2, [sp, #12]
 800fc2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc2e:	3304      	adds	r3, #4
 800fc30:	f1b9 0f00 	cmp.w	r9, #0
 800fc34:	d01f      	beq.n	800fc76 <__multiply+0x132>
 800fc36:	6834      	ldr	r4, [r6, #0]
 800fc38:	f105 0114 	add.w	r1, r5, #20
 800fc3c:	46b6      	mov	lr, r6
 800fc3e:	f04f 0a00 	mov.w	sl, #0
 800fc42:	880a      	ldrh	r2, [r1, #0]
 800fc44:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fc48:	fb09 b202 	mla	r2, r9, r2, fp
 800fc4c:	4492      	add	sl, r2
 800fc4e:	b2a4      	uxth	r4, r4
 800fc50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fc54:	f84e 4b04 	str.w	r4, [lr], #4
 800fc58:	f851 4b04 	ldr.w	r4, [r1], #4
 800fc5c:	f8be 2000 	ldrh.w	r2, [lr]
 800fc60:	0c24      	lsrs	r4, r4, #16
 800fc62:	fb09 2404 	mla	r4, r9, r4, r2
 800fc66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fc6a:	458c      	cmp	ip, r1
 800fc6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc70:	d8e7      	bhi.n	800fc42 <__multiply+0xfe>
 800fc72:	9a01      	ldr	r2, [sp, #4]
 800fc74:	50b4      	str	r4, [r6, r2]
 800fc76:	3604      	adds	r6, #4
 800fc78:	e7a3      	b.n	800fbc2 <__multiply+0x7e>
 800fc7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1a5      	bne.n	800fbce <__multiply+0x8a>
 800fc82:	3f01      	subs	r7, #1
 800fc84:	e7a1      	b.n	800fbca <__multiply+0x86>
 800fc86:	bf00      	nop
 800fc88:	0801108f 	.word	0x0801108f
 800fc8c:	080110a0 	.word	0x080110a0

0800fc90 <__pow5mult>:
 800fc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc94:	4615      	mov	r5, r2
 800fc96:	f012 0203 	ands.w	r2, r2, #3
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	460f      	mov	r7, r1
 800fc9e:	d007      	beq.n	800fcb0 <__pow5mult+0x20>
 800fca0:	4c25      	ldr	r4, [pc, #148]	; (800fd38 <__pow5mult+0xa8>)
 800fca2:	3a01      	subs	r2, #1
 800fca4:	2300      	movs	r3, #0
 800fca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fcaa:	f7ff fe9b 	bl	800f9e4 <__multadd>
 800fcae:	4607      	mov	r7, r0
 800fcb0:	10ad      	asrs	r5, r5, #2
 800fcb2:	d03d      	beq.n	800fd30 <__pow5mult+0xa0>
 800fcb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fcb6:	b97c      	cbnz	r4, 800fcd8 <__pow5mult+0x48>
 800fcb8:	2010      	movs	r0, #16
 800fcba:	f7fe facd 	bl	800e258 <malloc>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	6270      	str	r0, [r6, #36]	; 0x24
 800fcc2:	b928      	cbnz	r0, 800fcd0 <__pow5mult+0x40>
 800fcc4:	4b1d      	ldr	r3, [pc, #116]	; (800fd3c <__pow5mult+0xac>)
 800fcc6:	481e      	ldr	r0, [pc, #120]	; (800fd40 <__pow5mult+0xb0>)
 800fcc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fccc:	f000 fb10 	bl	80102f0 <__assert_func>
 800fcd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcd4:	6004      	str	r4, [r0, #0]
 800fcd6:	60c4      	str	r4, [r0, #12]
 800fcd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fcdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fce0:	b94c      	cbnz	r4, 800fcf6 <__pow5mult+0x66>
 800fce2:	f240 2171 	movw	r1, #625	; 0x271
 800fce6:	4630      	mov	r0, r6
 800fce8:	f7ff ff16 	bl	800fb18 <__i2b>
 800fcec:	2300      	movs	r3, #0
 800fcee:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	6003      	str	r3, [r0, #0]
 800fcf6:	f04f 0900 	mov.w	r9, #0
 800fcfa:	07eb      	lsls	r3, r5, #31
 800fcfc:	d50a      	bpl.n	800fd14 <__pow5mult+0x84>
 800fcfe:	4639      	mov	r1, r7
 800fd00:	4622      	mov	r2, r4
 800fd02:	4630      	mov	r0, r6
 800fd04:	f7ff ff1e 	bl	800fb44 <__multiply>
 800fd08:	4639      	mov	r1, r7
 800fd0a:	4680      	mov	r8, r0
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	f7ff fe47 	bl	800f9a0 <_Bfree>
 800fd12:	4647      	mov	r7, r8
 800fd14:	106d      	asrs	r5, r5, #1
 800fd16:	d00b      	beq.n	800fd30 <__pow5mult+0xa0>
 800fd18:	6820      	ldr	r0, [r4, #0]
 800fd1a:	b938      	cbnz	r0, 800fd2c <__pow5mult+0x9c>
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	4621      	mov	r1, r4
 800fd20:	4630      	mov	r0, r6
 800fd22:	f7ff ff0f 	bl	800fb44 <__multiply>
 800fd26:	6020      	str	r0, [r4, #0]
 800fd28:	f8c0 9000 	str.w	r9, [r0]
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	e7e4      	b.n	800fcfa <__pow5mult+0x6a>
 800fd30:	4638      	mov	r0, r7
 800fd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd36:	bf00      	nop
 800fd38:	080111f0 	.word	0x080111f0
 800fd3c:	08011019 	.word	0x08011019
 800fd40:	080110a0 	.word	0x080110a0

0800fd44 <__lshift>:
 800fd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd48:	460c      	mov	r4, r1
 800fd4a:	6849      	ldr	r1, [r1, #4]
 800fd4c:	6923      	ldr	r3, [r4, #16]
 800fd4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	4607      	mov	r7, r0
 800fd56:	4691      	mov	r9, r2
 800fd58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd5c:	f108 0601 	add.w	r6, r8, #1
 800fd60:	42b3      	cmp	r3, r6
 800fd62:	db0b      	blt.n	800fd7c <__lshift+0x38>
 800fd64:	4638      	mov	r0, r7
 800fd66:	f7ff fddb 	bl	800f920 <_Balloc>
 800fd6a:	4605      	mov	r5, r0
 800fd6c:	b948      	cbnz	r0, 800fd82 <__lshift+0x3e>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	4b28      	ldr	r3, [pc, #160]	; (800fe14 <__lshift+0xd0>)
 800fd72:	4829      	ldr	r0, [pc, #164]	; (800fe18 <__lshift+0xd4>)
 800fd74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd78:	f000 faba 	bl	80102f0 <__assert_func>
 800fd7c:	3101      	adds	r1, #1
 800fd7e:	005b      	lsls	r3, r3, #1
 800fd80:	e7ee      	b.n	800fd60 <__lshift+0x1c>
 800fd82:	2300      	movs	r3, #0
 800fd84:	f100 0114 	add.w	r1, r0, #20
 800fd88:	f100 0210 	add.w	r2, r0, #16
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	4553      	cmp	r3, sl
 800fd90:	db33      	blt.n	800fdfa <__lshift+0xb6>
 800fd92:	6920      	ldr	r0, [r4, #16]
 800fd94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd98:	f104 0314 	add.w	r3, r4, #20
 800fd9c:	f019 091f 	ands.w	r9, r9, #31
 800fda0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fda4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fda8:	d02b      	beq.n	800fe02 <__lshift+0xbe>
 800fdaa:	f1c9 0e20 	rsb	lr, r9, #32
 800fdae:	468a      	mov	sl, r1
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	6818      	ldr	r0, [r3, #0]
 800fdb4:	fa00 f009 	lsl.w	r0, r0, r9
 800fdb8:	4302      	orrs	r2, r0
 800fdba:	f84a 2b04 	str.w	r2, [sl], #4
 800fdbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdc2:	459c      	cmp	ip, r3
 800fdc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdc8:	d8f3      	bhi.n	800fdb2 <__lshift+0x6e>
 800fdca:	ebac 0304 	sub.w	r3, ip, r4
 800fdce:	3b15      	subs	r3, #21
 800fdd0:	f023 0303 	bic.w	r3, r3, #3
 800fdd4:	3304      	adds	r3, #4
 800fdd6:	f104 0015 	add.w	r0, r4, #21
 800fdda:	4584      	cmp	ip, r0
 800fddc:	bf38      	it	cc
 800fdde:	2304      	movcc	r3, #4
 800fde0:	50ca      	str	r2, [r1, r3]
 800fde2:	b10a      	cbz	r2, 800fde8 <__lshift+0xa4>
 800fde4:	f108 0602 	add.w	r6, r8, #2
 800fde8:	3e01      	subs	r6, #1
 800fdea:	4638      	mov	r0, r7
 800fdec:	612e      	str	r6, [r5, #16]
 800fdee:	4621      	mov	r1, r4
 800fdf0:	f7ff fdd6 	bl	800f9a0 <_Bfree>
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdfe:	3301      	adds	r3, #1
 800fe00:	e7c5      	b.n	800fd8e <__lshift+0x4a>
 800fe02:	3904      	subs	r1, #4
 800fe04:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe08:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe0c:	459c      	cmp	ip, r3
 800fe0e:	d8f9      	bhi.n	800fe04 <__lshift+0xc0>
 800fe10:	e7ea      	b.n	800fde8 <__lshift+0xa4>
 800fe12:	bf00      	nop
 800fe14:	0801108f 	.word	0x0801108f
 800fe18:	080110a0 	.word	0x080110a0

0800fe1c <__mcmp>:
 800fe1c:	b530      	push	{r4, r5, lr}
 800fe1e:	6902      	ldr	r2, [r0, #16]
 800fe20:	690c      	ldr	r4, [r1, #16]
 800fe22:	1b12      	subs	r2, r2, r4
 800fe24:	d10e      	bne.n	800fe44 <__mcmp+0x28>
 800fe26:	f100 0314 	add.w	r3, r0, #20
 800fe2a:	3114      	adds	r1, #20
 800fe2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fe30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fe34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fe38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe3c:	42a5      	cmp	r5, r4
 800fe3e:	d003      	beq.n	800fe48 <__mcmp+0x2c>
 800fe40:	d305      	bcc.n	800fe4e <__mcmp+0x32>
 800fe42:	2201      	movs	r2, #1
 800fe44:	4610      	mov	r0, r2
 800fe46:	bd30      	pop	{r4, r5, pc}
 800fe48:	4283      	cmp	r3, r0
 800fe4a:	d3f3      	bcc.n	800fe34 <__mcmp+0x18>
 800fe4c:	e7fa      	b.n	800fe44 <__mcmp+0x28>
 800fe4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe52:	e7f7      	b.n	800fe44 <__mcmp+0x28>

0800fe54 <__mdiff>:
 800fe54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe58:	460c      	mov	r4, r1
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	4611      	mov	r1, r2
 800fe5e:	4620      	mov	r0, r4
 800fe60:	4617      	mov	r7, r2
 800fe62:	f7ff ffdb 	bl	800fe1c <__mcmp>
 800fe66:	1e05      	subs	r5, r0, #0
 800fe68:	d110      	bne.n	800fe8c <__mdiff+0x38>
 800fe6a:	4629      	mov	r1, r5
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f7ff fd57 	bl	800f920 <_Balloc>
 800fe72:	b930      	cbnz	r0, 800fe82 <__mdiff+0x2e>
 800fe74:	4b39      	ldr	r3, [pc, #228]	; (800ff5c <__mdiff+0x108>)
 800fe76:	4602      	mov	r2, r0
 800fe78:	f240 2132 	movw	r1, #562	; 0x232
 800fe7c:	4838      	ldr	r0, [pc, #224]	; (800ff60 <__mdiff+0x10c>)
 800fe7e:	f000 fa37 	bl	80102f0 <__assert_func>
 800fe82:	2301      	movs	r3, #1
 800fe84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8c:	bfa4      	itt	ge
 800fe8e:	463b      	movge	r3, r7
 800fe90:	4627      	movge	r7, r4
 800fe92:	4630      	mov	r0, r6
 800fe94:	6879      	ldr	r1, [r7, #4]
 800fe96:	bfa6      	itte	ge
 800fe98:	461c      	movge	r4, r3
 800fe9a:	2500      	movge	r5, #0
 800fe9c:	2501      	movlt	r5, #1
 800fe9e:	f7ff fd3f 	bl	800f920 <_Balloc>
 800fea2:	b920      	cbnz	r0, 800feae <__mdiff+0x5a>
 800fea4:	4b2d      	ldr	r3, [pc, #180]	; (800ff5c <__mdiff+0x108>)
 800fea6:	4602      	mov	r2, r0
 800fea8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800feac:	e7e6      	b.n	800fe7c <__mdiff+0x28>
 800feae:	693e      	ldr	r6, [r7, #16]
 800feb0:	60c5      	str	r5, [r0, #12]
 800feb2:	6925      	ldr	r5, [r4, #16]
 800feb4:	f107 0114 	add.w	r1, r7, #20
 800feb8:	f104 0914 	add.w	r9, r4, #20
 800febc:	f100 0e14 	add.w	lr, r0, #20
 800fec0:	f107 0210 	add.w	r2, r7, #16
 800fec4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fec8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fecc:	46f2      	mov	sl, lr
 800fece:	2700      	movs	r7, #0
 800fed0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fed8:	fa1f f883 	uxth.w	r8, r3
 800fedc:	fa17 f78b 	uxtah	r7, r7, fp
 800fee0:	0c1b      	lsrs	r3, r3, #16
 800fee2:	eba7 0808 	sub.w	r8, r7, r8
 800fee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800feea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800feee:	fa1f f888 	uxth.w	r8, r8
 800fef2:	141f      	asrs	r7, r3, #16
 800fef4:	454d      	cmp	r5, r9
 800fef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fefa:	f84a 3b04 	str.w	r3, [sl], #4
 800fefe:	d8e7      	bhi.n	800fed0 <__mdiff+0x7c>
 800ff00:	1b2b      	subs	r3, r5, r4
 800ff02:	3b15      	subs	r3, #21
 800ff04:	f023 0303 	bic.w	r3, r3, #3
 800ff08:	3304      	adds	r3, #4
 800ff0a:	3415      	adds	r4, #21
 800ff0c:	42a5      	cmp	r5, r4
 800ff0e:	bf38      	it	cc
 800ff10:	2304      	movcc	r3, #4
 800ff12:	4419      	add	r1, r3
 800ff14:	4473      	add	r3, lr
 800ff16:	469e      	mov	lr, r3
 800ff18:	460d      	mov	r5, r1
 800ff1a:	4565      	cmp	r5, ip
 800ff1c:	d30e      	bcc.n	800ff3c <__mdiff+0xe8>
 800ff1e:	f10c 0203 	add.w	r2, ip, #3
 800ff22:	1a52      	subs	r2, r2, r1
 800ff24:	f022 0203 	bic.w	r2, r2, #3
 800ff28:	3903      	subs	r1, #3
 800ff2a:	458c      	cmp	ip, r1
 800ff2c:	bf38      	it	cc
 800ff2e:	2200      	movcc	r2, #0
 800ff30:	441a      	add	r2, r3
 800ff32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ff36:	b17b      	cbz	r3, 800ff58 <__mdiff+0x104>
 800ff38:	6106      	str	r6, [r0, #16]
 800ff3a:	e7a5      	b.n	800fe88 <__mdiff+0x34>
 800ff3c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ff40:	fa17 f488 	uxtah	r4, r7, r8
 800ff44:	1422      	asrs	r2, r4, #16
 800ff46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ff4a:	b2a4      	uxth	r4, r4
 800ff4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ff50:	f84e 4b04 	str.w	r4, [lr], #4
 800ff54:	1417      	asrs	r7, r2, #16
 800ff56:	e7e0      	b.n	800ff1a <__mdiff+0xc6>
 800ff58:	3e01      	subs	r6, #1
 800ff5a:	e7ea      	b.n	800ff32 <__mdiff+0xde>
 800ff5c:	0801108f 	.word	0x0801108f
 800ff60:	080110a0 	.word	0x080110a0

0800ff64 <__d2b>:
 800ff64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff68:	4689      	mov	r9, r1
 800ff6a:	2101      	movs	r1, #1
 800ff6c:	ec57 6b10 	vmov	r6, r7, d0
 800ff70:	4690      	mov	r8, r2
 800ff72:	f7ff fcd5 	bl	800f920 <_Balloc>
 800ff76:	4604      	mov	r4, r0
 800ff78:	b930      	cbnz	r0, 800ff88 <__d2b+0x24>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	4b25      	ldr	r3, [pc, #148]	; (8010014 <__d2b+0xb0>)
 800ff7e:	4826      	ldr	r0, [pc, #152]	; (8010018 <__d2b+0xb4>)
 800ff80:	f240 310a 	movw	r1, #778	; 0x30a
 800ff84:	f000 f9b4 	bl	80102f0 <__assert_func>
 800ff88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff90:	bb35      	cbnz	r5, 800ffe0 <__d2b+0x7c>
 800ff92:	2e00      	cmp	r6, #0
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	d028      	beq.n	800ffea <__d2b+0x86>
 800ff98:	4668      	mov	r0, sp
 800ff9a:	9600      	str	r6, [sp, #0]
 800ff9c:	f7ff fd8c 	bl	800fab8 <__lo0bits>
 800ffa0:	9900      	ldr	r1, [sp, #0]
 800ffa2:	b300      	cbz	r0, 800ffe6 <__d2b+0x82>
 800ffa4:	9a01      	ldr	r2, [sp, #4]
 800ffa6:	f1c0 0320 	rsb	r3, r0, #32
 800ffaa:	fa02 f303 	lsl.w	r3, r2, r3
 800ffae:	430b      	orrs	r3, r1
 800ffb0:	40c2      	lsrs	r2, r0
 800ffb2:	6163      	str	r3, [r4, #20]
 800ffb4:	9201      	str	r2, [sp, #4]
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	61a3      	str	r3, [r4, #24]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	bf14      	ite	ne
 800ffbe:	2202      	movne	r2, #2
 800ffc0:	2201      	moveq	r2, #1
 800ffc2:	6122      	str	r2, [r4, #16]
 800ffc4:	b1d5      	cbz	r5, 800fffc <__d2b+0x98>
 800ffc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ffca:	4405      	add	r5, r0
 800ffcc:	f8c9 5000 	str.w	r5, [r9]
 800ffd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ffd4:	f8c8 0000 	str.w	r0, [r8]
 800ffd8:	4620      	mov	r0, r4
 800ffda:	b003      	add	sp, #12
 800ffdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffe4:	e7d5      	b.n	800ff92 <__d2b+0x2e>
 800ffe6:	6161      	str	r1, [r4, #20]
 800ffe8:	e7e5      	b.n	800ffb6 <__d2b+0x52>
 800ffea:	a801      	add	r0, sp, #4
 800ffec:	f7ff fd64 	bl	800fab8 <__lo0bits>
 800fff0:	9b01      	ldr	r3, [sp, #4]
 800fff2:	6163      	str	r3, [r4, #20]
 800fff4:	2201      	movs	r2, #1
 800fff6:	6122      	str	r2, [r4, #16]
 800fff8:	3020      	adds	r0, #32
 800fffa:	e7e3      	b.n	800ffc4 <__d2b+0x60>
 800fffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010004:	f8c9 0000 	str.w	r0, [r9]
 8010008:	6918      	ldr	r0, [r3, #16]
 801000a:	f7ff fd35 	bl	800fa78 <__hi0bits>
 801000e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010012:	e7df      	b.n	800ffd4 <__d2b+0x70>
 8010014:	0801108f 	.word	0x0801108f
 8010018:	080110a0 	.word	0x080110a0

0801001c <_calloc_r>:
 801001c:	b513      	push	{r0, r1, r4, lr}
 801001e:	434a      	muls	r2, r1
 8010020:	4611      	mov	r1, r2
 8010022:	9201      	str	r2, [sp, #4]
 8010024:	f7fe f980 	bl	800e328 <_malloc_r>
 8010028:	4604      	mov	r4, r0
 801002a:	b118      	cbz	r0, 8010034 <_calloc_r+0x18>
 801002c:	9a01      	ldr	r2, [sp, #4]
 801002e:	2100      	movs	r1, #0
 8010030:	f7fe f922 	bl	800e278 <memset>
 8010034:	4620      	mov	r0, r4
 8010036:	b002      	add	sp, #8
 8010038:	bd10      	pop	{r4, pc}

0801003a <__ssputs_r>:
 801003a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801003e:	688e      	ldr	r6, [r1, #8]
 8010040:	429e      	cmp	r6, r3
 8010042:	4682      	mov	sl, r0
 8010044:	460c      	mov	r4, r1
 8010046:	4690      	mov	r8, r2
 8010048:	461f      	mov	r7, r3
 801004a:	d838      	bhi.n	80100be <__ssputs_r+0x84>
 801004c:	898a      	ldrh	r2, [r1, #12]
 801004e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010052:	d032      	beq.n	80100ba <__ssputs_r+0x80>
 8010054:	6825      	ldr	r5, [r4, #0]
 8010056:	6909      	ldr	r1, [r1, #16]
 8010058:	eba5 0901 	sub.w	r9, r5, r1
 801005c:	6965      	ldr	r5, [r4, #20]
 801005e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010062:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010066:	3301      	adds	r3, #1
 8010068:	444b      	add	r3, r9
 801006a:	106d      	asrs	r5, r5, #1
 801006c:	429d      	cmp	r5, r3
 801006e:	bf38      	it	cc
 8010070:	461d      	movcc	r5, r3
 8010072:	0553      	lsls	r3, r2, #21
 8010074:	d531      	bpl.n	80100da <__ssputs_r+0xa0>
 8010076:	4629      	mov	r1, r5
 8010078:	f7fe f956 	bl	800e328 <_malloc_r>
 801007c:	4606      	mov	r6, r0
 801007e:	b950      	cbnz	r0, 8010096 <__ssputs_r+0x5c>
 8010080:	230c      	movs	r3, #12
 8010082:	f8ca 3000 	str.w	r3, [sl]
 8010086:	89a3      	ldrh	r3, [r4, #12]
 8010088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801008c:	81a3      	strh	r3, [r4, #12]
 801008e:	f04f 30ff 	mov.w	r0, #4294967295
 8010092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010096:	6921      	ldr	r1, [r4, #16]
 8010098:	464a      	mov	r2, r9
 801009a:	f7ff fc27 	bl	800f8ec <memcpy>
 801009e:	89a3      	ldrh	r3, [r4, #12]
 80100a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100a8:	81a3      	strh	r3, [r4, #12]
 80100aa:	6126      	str	r6, [r4, #16]
 80100ac:	6165      	str	r5, [r4, #20]
 80100ae:	444e      	add	r6, r9
 80100b0:	eba5 0509 	sub.w	r5, r5, r9
 80100b4:	6026      	str	r6, [r4, #0]
 80100b6:	60a5      	str	r5, [r4, #8]
 80100b8:	463e      	mov	r6, r7
 80100ba:	42be      	cmp	r6, r7
 80100bc:	d900      	bls.n	80100c0 <__ssputs_r+0x86>
 80100be:	463e      	mov	r6, r7
 80100c0:	4632      	mov	r2, r6
 80100c2:	6820      	ldr	r0, [r4, #0]
 80100c4:	4641      	mov	r1, r8
 80100c6:	f000 f958 	bl	801037a <memmove>
 80100ca:	68a3      	ldr	r3, [r4, #8]
 80100cc:	6822      	ldr	r2, [r4, #0]
 80100ce:	1b9b      	subs	r3, r3, r6
 80100d0:	4432      	add	r2, r6
 80100d2:	60a3      	str	r3, [r4, #8]
 80100d4:	6022      	str	r2, [r4, #0]
 80100d6:	2000      	movs	r0, #0
 80100d8:	e7db      	b.n	8010092 <__ssputs_r+0x58>
 80100da:	462a      	mov	r2, r5
 80100dc:	f000 f967 	bl	80103ae <_realloc_r>
 80100e0:	4606      	mov	r6, r0
 80100e2:	2800      	cmp	r0, #0
 80100e4:	d1e1      	bne.n	80100aa <__ssputs_r+0x70>
 80100e6:	6921      	ldr	r1, [r4, #16]
 80100e8:	4650      	mov	r0, sl
 80100ea:	f7fe f8cd 	bl	800e288 <_free_r>
 80100ee:	e7c7      	b.n	8010080 <__ssputs_r+0x46>

080100f0 <_svfiprintf_r>:
 80100f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f4:	4698      	mov	r8, r3
 80100f6:	898b      	ldrh	r3, [r1, #12]
 80100f8:	061b      	lsls	r3, r3, #24
 80100fa:	b09d      	sub	sp, #116	; 0x74
 80100fc:	4607      	mov	r7, r0
 80100fe:	460d      	mov	r5, r1
 8010100:	4614      	mov	r4, r2
 8010102:	d50e      	bpl.n	8010122 <_svfiprintf_r+0x32>
 8010104:	690b      	ldr	r3, [r1, #16]
 8010106:	b963      	cbnz	r3, 8010122 <_svfiprintf_r+0x32>
 8010108:	2140      	movs	r1, #64	; 0x40
 801010a:	f7fe f90d 	bl	800e328 <_malloc_r>
 801010e:	6028      	str	r0, [r5, #0]
 8010110:	6128      	str	r0, [r5, #16]
 8010112:	b920      	cbnz	r0, 801011e <_svfiprintf_r+0x2e>
 8010114:	230c      	movs	r3, #12
 8010116:	603b      	str	r3, [r7, #0]
 8010118:	f04f 30ff 	mov.w	r0, #4294967295
 801011c:	e0d1      	b.n	80102c2 <_svfiprintf_r+0x1d2>
 801011e:	2340      	movs	r3, #64	; 0x40
 8010120:	616b      	str	r3, [r5, #20]
 8010122:	2300      	movs	r3, #0
 8010124:	9309      	str	r3, [sp, #36]	; 0x24
 8010126:	2320      	movs	r3, #32
 8010128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801012c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010130:	2330      	movs	r3, #48	; 0x30
 8010132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102dc <_svfiprintf_r+0x1ec>
 8010136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801013a:	f04f 0901 	mov.w	r9, #1
 801013e:	4623      	mov	r3, r4
 8010140:	469a      	mov	sl, r3
 8010142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010146:	b10a      	cbz	r2, 801014c <_svfiprintf_r+0x5c>
 8010148:	2a25      	cmp	r2, #37	; 0x25
 801014a:	d1f9      	bne.n	8010140 <_svfiprintf_r+0x50>
 801014c:	ebba 0b04 	subs.w	fp, sl, r4
 8010150:	d00b      	beq.n	801016a <_svfiprintf_r+0x7a>
 8010152:	465b      	mov	r3, fp
 8010154:	4622      	mov	r2, r4
 8010156:	4629      	mov	r1, r5
 8010158:	4638      	mov	r0, r7
 801015a:	f7ff ff6e 	bl	801003a <__ssputs_r>
 801015e:	3001      	adds	r0, #1
 8010160:	f000 80aa 	beq.w	80102b8 <_svfiprintf_r+0x1c8>
 8010164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010166:	445a      	add	r2, fp
 8010168:	9209      	str	r2, [sp, #36]	; 0x24
 801016a:	f89a 3000 	ldrb.w	r3, [sl]
 801016e:	2b00      	cmp	r3, #0
 8010170:	f000 80a2 	beq.w	80102b8 <_svfiprintf_r+0x1c8>
 8010174:	2300      	movs	r3, #0
 8010176:	f04f 32ff 	mov.w	r2, #4294967295
 801017a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801017e:	f10a 0a01 	add.w	sl, sl, #1
 8010182:	9304      	str	r3, [sp, #16]
 8010184:	9307      	str	r3, [sp, #28]
 8010186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801018a:	931a      	str	r3, [sp, #104]	; 0x68
 801018c:	4654      	mov	r4, sl
 801018e:	2205      	movs	r2, #5
 8010190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010194:	4851      	ldr	r0, [pc, #324]	; (80102dc <_svfiprintf_r+0x1ec>)
 8010196:	f7f0 f8ab 	bl	80002f0 <memchr>
 801019a:	9a04      	ldr	r2, [sp, #16]
 801019c:	b9d8      	cbnz	r0, 80101d6 <_svfiprintf_r+0xe6>
 801019e:	06d0      	lsls	r0, r2, #27
 80101a0:	bf44      	itt	mi
 80101a2:	2320      	movmi	r3, #32
 80101a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101a8:	0711      	lsls	r1, r2, #28
 80101aa:	bf44      	itt	mi
 80101ac:	232b      	movmi	r3, #43	; 0x2b
 80101ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101b2:	f89a 3000 	ldrb.w	r3, [sl]
 80101b6:	2b2a      	cmp	r3, #42	; 0x2a
 80101b8:	d015      	beq.n	80101e6 <_svfiprintf_r+0xf6>
 80101ba:	9a07      	ldr	r2, [sp, #28]
 80101bc:	4654      	mov	r4, sl
 80101be:	2000      	movs	r0, #0
 80101c0:	f04f 0c0a 	mov.w	ip, #10
 80101c4:	4621      	mov	r1, r4
 80101c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ca:	3b30      	subs	r3, #48	; 0x30
 80101cc:	2b09      	cmp	r3, #9
 80101ce:	d94e      	bls.n	801026e <_svfiprintf_r+0x17e>
 80101d0:	b1b0      	cbz	r0, 8010200 <_svfiprintf_r+0x110>
 80101d2:	9207      	str	r2, [sp, #28]
 80101d4:	e014      	b.n	8010200 <_svfiprintf_r+0x110>
 80101d6:	eba0 0308 	sub.w	r3, r0, r8
 80101da:	fa09 f303 	lsl.w	r3, r9, r3
 80101de:	4313      	orrs	r3, r2
 80101e0:	9304      	str	r3, [sp, #16]
 80101e2:	46a2      	mov	sl, r4
 80101e4:	e7d2      	b.n	801018c <_svfiprintf_r+0x9c>
 80101e6:	9b03      	ldr	r3, [sp, #12]
 80101e8:	1d19      	adds	r1, r3, #4
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	9103      	str	r1, [sp, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bfbb      	ittet	lt
 80101f2:	425b      	neglt	r3, r3
 80101f4:	f042 0202 	orrlt.w	r2, r2, #2
 80101f8:	9307      	strge	r3, [sp, #28]
 80101fa:	9307      	strlt	r3, [sp, #28]
 80101fc:	bfb8      	it	lt
 80101fe:	9204      	strlt	r2, [sp, #16]
 8010200:	7823      	ldrb	r3, [r4, #0]
 8010202:	2b2e      	cmp	r3, #46	; 0x2e
 8010204:	d10c      	bne.n	8010220 <_svfiprintf_r+0x130>
 8010206:	7863      	ldrb	r3, [r4, #1]
 8010208:	2b2a      	cmp	r3, #42	; 0x2a
 801020a:	d135      	bne.n	8010278 <_svfiprintf_r+0x188>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	1d1a      	adds	r2, r3, #4
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	9203      	str	r2, [sp, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	bfb8      	it	lt
 8010218:	f04f 33ff 	movlt.w	r3, #4294967295
 801021c:	3402      	adds	r4, #2
 801021e:	9305      	str	r3, [sp, #20]
 8010220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102ec <_svfiprintf_r+0x1fc>
 8010224:	7821      	ldrb	r1, [r4, #0]
 8010226:	2203      	movs	r2, #3
 8010228:	4650      	mov	r0, sl
 801022a:	f7f0 f861 	bl	80002f0 <memchr>
 801022e:	b140      	cbz	r0, 8010242 <_svfiprintf_r+0x152>
 8010230:	2340      	movs	r3, #64	; 0x40
 8010232:	eba0 000a 	sub.w	r0, r0, sl
 8010236:	fa03 f000 	lsl.w	r0, r3, r0
 801023a:	9b04      	ldr	r3, [sp, #16]
 801023c:	4303      	orrs	r3, r0
 801023e:	3401      	adds	r4, #1
 8010240:	9304      	str	r3, [sp, #16]
 8010242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010246:	4826      	ldr	r0, [pc, #152]	; (80102e0 <_svfiprintf_r+0x1f0>)
 8010248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801024c:	2206      	movs	r2, #6
 801024e:	f7f0 f84f 	bl	80002f0 <memchr>
 8010252:	2800      	cmp	r0, #0
 8010254:	d038      	beq.n	80102c8 <_svfiprintf_r+0x1d8>
 8010256:	4b23      	ldr	r3, [pc, #140]	; (80102e4 <_svfiprintf_r+0x1f4>)
 8010258:	bb1b      	cbnz	r3, 80102a2 <_svfiprintf_r+0x1b2>
 801025a:	9b03      	ldr	r3, [sp, #12]
 801025c:	3307      	adds	r3, #7
 801025e:	f023 0307 	bic.w	r3, r3, #7
 8010262:	3308      	adds	r3, #8
 8010264:	9303      	str	r3, [sp, #12]
 8010266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010268:	4433      	add	r3, r6
 801026a:	9309      	str	r3, [sp, #36]	; 0x24
 801026c:	e767      	b.n	801013e <_svfiprintf_r+0x4e>
 801026e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010272:	460c      	mov	r4, r1
 8010274:	2001      	movs	r0, #1
 8010276:	e7a5      	b.n	80101c4 <_svfiprintf_r+0xd4>
 8010278:	2300      	movs	r3, #0
 801027a:	3401      	adds	r4, #1
 801027c:	9305      	str	r3, [sp, #20]
 801027e:	4619      	mov	r1, r3
 8010280:	f04f 0c0a 	mov.w	ip, #10
 8010284:	4620      	mov	r0, r4
 8010286:	f810 2b01 	ldrb.w	r2, [r0], #1
 801028a:	3a30      	subs	r2, #48	; 0x30
 801028c:	2a09      	cmp	r2, #9
 801028e:	d903      	bls.n	8010298 <_svfiprintf_r+0x1a8>
 8010290:	2b00      	cmp	r3, #0
 8010292:	d0c5      	beq.n	8010220 <_svfiprintf_r+0x130>
 8010294:	9105      	str	r1, [sp, #20]
 8010296:	e7c3      	b.n	8010220 <_svfiprintf_r+0x130>
 8010298:	fb0c 2101 	mla	r1, ip, r1, r2
 801029c:	4604      	mov	r4, r0
 801029e:	2301      	movs	r3, #1
 80102a0:	e7f0      	b.n	8010284 <_svfiprintf_r+0x194>
 80102a2:	ab03      	add	r3, sp, #12
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	462a      	mov	r2, r5
 80102a8:	4b0f      	ldr	r3, [pc, #60]	; (80102e8 <_svfiprintf_r+0x1f8>)
 80102aa:	a904      	add	r1, sp, #16
 80102ac:	4638      	mov	r0, r7
 80102ae:	f7fe f927 	bl	800e500 <_printf_float>
 80102b2:	1c42      	adds	r2, r0, #1
 80102b4:	4606      	mov	r6, r0
 80102b6:	d1d6      	bne.n	8010266 <_svfiprintf_r+0x176>
 80102b8:	89ab      	ldrh	r3, [r5, #12]
 80102ba:	065b      	lsls	r3, r3, #25
 80102bc:	f53f af2c 	bmi.w	8010118 <_svfiprintf_r+0x28>
 80102c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102c2:	b01d      	add	sp, #116	; 0x74
 80102c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c8:	ab03      	add	r3, sp, #12
 80102ca:	9300      	str	r3, [sp, #0]
 80102cc:	462a      	mov	r2, r5
 80102ce:	4b06      	ldr	r3, [pc, #24]	; (80102e8 <_svfiprintf_r+0x1f8>)
 80102d0:	a904      	add	r1, sp, #16
 80102d2:	4638      	mov	r0, r7
 80102d4:	f7fe fba0 	bl	800ea18 <_printf_i>
 80102d8:	e7eb      	b.n	80102b2 <_svfiprintf_r+0x1c2>
 80102da:	bf00      	nop
 80102dc:	080111fc 	.word	0x080111fc
 80102e0:	08011206 	.word	0x08011206
 80102e4:	0800e501 	.word	0x0800e501
 80102e8:	0801003b 	.word	0x0801003b
 80102ec:	08011202 	.word	0x08011202

080102f0 <__assert_func>:
 80102f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102f2:	4614      	mov	r4, r2
 80102f4:	461a      	mov	r2, r3
 80102f6:	4b09      	ldr	r3, [pc, #36]	; (801031c <__assert_func+0x2c>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4605      	mov	r5, r0
 80102fc:	68d8      	ldr	r0, [r3, #12]
 80102fe:	b14c      	cbz	r4, 8010314 <__assert_func+0x24>
 8010300:	4b07      	ldr	r3, [pc, #28]	; (8010320 <__assert_func+0x30>)
 8010302:	9100      	str	r1, [sp, #0]
 8010304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010308:	4906      	ldr	r1, [pc, #24]	; (8010324 <__assert_func+0x34>)
 801030a:	462b      	mov	r3, r5
 801030c:	f000 f80e 	bl	801032c <fiprintf>
 8010310:	f000 fa9a 	bl	8010848 <abort>
 8010314:	4b04      	ldr	r3, [pc, #16]	; (8010328 <__assert_func+0x38>)
 8010316:	461c      	mov	r4, r3
 8010318:	e7f3      	b.n	8010302 <__assert_func+0x12>
 801031a:	bf00      	nop
 801031c:	24000030 	.word	0x24000030
 8010320:	0801120d 	.word	0x0801120d
 8010324:	0801121a 	.word	0x0801121a
 8010328:	08011248 	.word	0x08011248

0801032c <fiprintf>:
 801032c:	b40e      	push	{r1, r2, r3}
 801032e:	b503      	push	{r0, r1, lr}
 8010330:	4601      	mov	r1, r0
 8010332:	ab03      	add	r3, sp, #12
 8010334:	4805      	ldr	r0, [pc, #20]	; (801034c <fiprintf+0x20>)
 8010336:	f853 2b04 	ldr.w	r2, [r3], #4
 801033a:	6800      	ldr	r0, [r0, #0]
 801033c:	9301      	str	r3, [sp, #4]
 801033e:	f000 f885 	bl	801044c <_vfiprintf_r>
 8010342:	b002      	add	sp, #8
 8010344:	f85d eb04 	ldr.w	lr, [sp], #4
 8010348:	b003      	add	sp, #12
 801034a:	4770      	bx	lr
 801034c:	24000030 	.word	0x24000030

08010350 <__retarget_lock_init_recursive>:
 8010350:	4770      	bx	lr

08010352 <__retarget_lock_acquire_recursive>:
 8010352:	4770      	bx	lr

08010354 <__retarget_lock_release_recursive>:
 8010354:	4770      	bx	lr

08010356 <__ascii_mbtowc>:
 8010356:	b082      	sub	sp, #8
 8010358:	b901      	cbnz	r1, 801035c <__ascii_mbtowc+0x6>
 801035a:	a901      	add	r1, sp, #4
 801035c:	b142      	cbz	r2, 8010370 <__ascii_mbtowc+0x1a>
 801035e:	b14b      	cbz	r3, 8010374 <__ascii_mbtowc+0x1e>
 8010360:	7813      	ldrb	r3, [r2, #0]
 8010362:	600b      	str	r3, [r1, #0]
 8010364:	7812      	ldrb	r2, [r2, #0]
 8010366:	1e10      	subs	r0, r2, #0
 8010368:	bf18      	it	ne
 801036a:	2001      	movne	r0, #1
 801036c:	b002      	add	sp, #8
 801036e:	4770      	bx	lr
 8010370:	4610      	mov	r0, r2
 8010372:	e7fb      	b.n	801036c <__ascii_mbtowc+0x16>
 8010374:	f06f 0001 	mvn.w	r0, #1
 8010378:	e7f8      	b.n	801036c <__ascii_mbtowc+0x16>

0801037a <memmove>:
 801037a:	4288      	cmp	r0, r1
 801037c:	b510      	push	{r4, lr}
 801037e:	eb01 0402 	add.w	r4, r1, r2
 8010382:	d902      	bls.n	801038a <memmove+0x10>
 8010384:	4284      	cmp	r4, r0
 8010386:	4623      	mov	r3, r4
 8010388:	d807      	bhi.n	801039a <memmove+0x20>
 801038a:	1e43      	subs	r3, r0, #1
 801038c:	42a1      	cmp	r1, r4
 801038e:	d008      	beq.n	80103a2 <memmove+0x28>
 8010390:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010394:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010398:	e7f8      	b.n	801038c <memmove+0x12>
 801039a:	4402      	add	r2, r0
 801039c:	4601      	mov	r1, r0
 801039e:	428a      	cmp	r2, r1
 80103a0:	d100      	bne.n	80103a4 <memmove+0x2a>
 80103a2:	bd10      	pop	{r4, pc}
 80103a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103ac:	e7f7      	b.n	801039e <memmove+0x24>

080103ae <_realloc_r>:
 80103ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b0:	4607      	mov	r7, r0
 80103b2:	4614      	mov	r4, r2
 80103b4:	460e      	mov	r6, r1
 80103b6:	b921      	cbnz	r1, 80103c2 <_realloc_r+0x14>
 80103b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80103bc:	4611      	mov	r1, r2
 80103be:	f7fd bfb3 	b.w	800e328 <_malloc_r>
 80103c2:	b922      	cbnz	r2, 80103ce <_realloc_r+0x20>
 80103c4:	f7fd ff60 	bl	800e288 <_free_r>
 80103c8:	4625      	mov	r5, r4
 80103ca:	4628      	mov	r0, r5
 80103cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ce:	f000 fc5f 	bl	8010c90 <_malloc_usable_size_r>
 80103d2:	42a0      	cmp	r0, r4
 80103d4:	d20f      	bcs.n	80103f6 <_realloc_r+0x48>
 80103d6:	4621      	mov	r1, r4
 80103d8:	4638      	mov	r0, r7
 80103da:	f7fd ffa5 	bl	800e328 <_malloc_r>
 80103de:	4605      	mov	r5, r0
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d0f2      	beq.n	80103ca <_realloc_r+0x1c>
 80103e4:	4631      	mov	r1, r6
 80103e6:	4622      	mov	r2, r4
 80103e8:	f7ff fa80 	bl	800f8ec <memcpy>
 80103ec:	4631      	mov	r1, r6
 80103ee:	4638      	mov	r0, r7
 80103f0:	f7fd ff4a 	bl	800e288 <_free_r>
 80103f4:	e7e9      	b.n	80103ca <_realloc_r+0x1c>
 80103f6:	4635      	mov	r5, r6
 80103f8:	e7e7      	b.n	80103ca <_realloc_r+0x1c>

080103fa <__sfputc_r>:
 80103fa:	6893      	ldr	r3, [r2, #8]
 80103fc:	3b01      	subs	r3, #1
 80103fe:	2b00      	cmp	r3, #0
 8010400:	b410      	push	{r4}
 8010402:	6093      	str	r3, [r2, #8]
 8010404:	da08      	bge.n	8010418 <__sfputc_r+0x1e>
 8010406:	6994      	ldr	r4, [r2, #24]
 8010408:	42a3      	cmp	r3, r4
 801040a:	db01      	blt.n	8010410 <__sfputc_r+0x16>
 801040c:	290a      	cmp	r1, #10
 801040e:	d103      	bne.n	8010418 <__sfputc_r+0x1e>
 8010410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010414:	f000 b94a 	b.w	80106ac <__swbuf_r>
 8010418:	6813      	ldr	r3, [r2, #0]
 801041a:	1c58      	adds	r0, r3, #1
 801041c:	6010      	str	r0, [r2, #0]
 801041e:	7019      	strb	r1, [r3, #0]
 8010420:	4608      	mov	r0, r1
 8010422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010426:	4770      	bx	lr

08010428 <__sfputs_r>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	4614      	mov	r4, r2
 8010430:	18d5      	adds	r5, r2, r3
 8010432:	42ac      	cmp	r4, r5
 8010434:	d101      	bne.n	801043a <__sfputs_r+0x12>
 8010436:	2000      	movs	r0, #0
 8010438:	e007      	b.n	801044a <__sfputs_r+0x22>
 801043a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801043e:	463a      	mov	r2, r7
 8010440:	4630      	mov	r0, r6
 8010442:	f7ff ffda 	bl	80103fa <__sfputc_r>
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	d1f3      	bne.n	8010432 <__sfputs_r+0xa>
 801044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801044c <_vfiprintf_r>:
 801044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010450:	460d      	mov	r5, r1
 8010452:	b09d      	sub	sp, #116	; 0x74
 8010454:	4614      	mov	r4, r2
 8010456:	4698      	mov	r8, r3
 8010458:	4606      	mov	r6, r0
 801045a:	b118      	cbz	r0, 8010464 <_vfiprintf_r+0x18>
 801045c:	6983      	ldr	r3, [r0, #24]
 801045e:	b90b      	cbnz	r3, 8010464 <_vfiprintf_r+0x18>
 8010460:	f000 fb14 	bl	8010a8c <__sinit>
 8010464:	4b89      	ldr	r3, [pc, #548]	; (801068c <_vfiprintf_r+0x240>)
 8010466:	429d      	cmp	r5, r3
 8010468:	d11b      	bne.n	80104a2 <_vfiprintf_r+0x56>
 801046a:	6875      	ldr	r5, [r6, #4]
 801046c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801046e:	07d9      	lsls	r1, r3, #31
 8010470:	d405      	bmi.n	801047e <_vfiprintf_r+0x32>
 8010472:	89ab      	ldrh	r3, [r5, #12]
 8010474:	059a      	lsls	r2, r3, #22
 8010476:	d402      	bmi.n	801047e <_vfiprintf_r+0x32>
 8010478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801047a:	f7ff ff6a 	bl	8010352 <__retarget_lock_acquire_recursive>
 801047e:	89ab      	ldrh	r3, [r5, #12]
 8010480:	071b      	lsls	r3, r3, #28
 8010482:	d501      	bpl.n	8010488 <_vfiprintf_r+0x3c>
 8010484:	692b      	ldr	r3, [r5, #16]
 8010486:	b9eb      	cbnz	r3, 80104c4 <_vfiprintf_r+0x78>
 8010488:	4629      	mov	r1, r5
 801048a:	4630      	mov	r0, r6
 801048c:	f000 f96e 	bl	801076c <__swsetup_r>
 8010490:	b1c0      	cbz	r0, 80104c4 <_vfiprintf_r+0x78>
 8010492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010494:	07dc      	lsls	r4, r3, #31
 8010496:	d50e      	bpl.n	80104b6 <_vfiprintf_r+0x6a>
 8010498:	f04f 30ff 	mov.w	r0, #4294967295
 801049c:	b01d      	add	sp, #116	; 0x74
 801049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a2:	4b7b      	ldr	r3, [pc, #492]	; (8010690 <_vfiprintf_r+0x244>)
 80104a4:	429d      	cmp	r5, r3
 80104a6:	d101      	bne.n	80104ac <_vfiprintf_r+0x60>
 80104a8:	68b5      	ldr	r5, [r6, #8]
 80104aa:	e7df      	b.n	801046c <_vfiprintf_r+0x20>
 80104ac:	4b79      	ldr	r3, [pc, #484]	; (8010694 <_vfiprintf_r+0x248>)
 80104ae:	429d      	cmp	r5, r3
 80104b0:	bf08      	it	eq
 80104b2:	68f5      	ldreq	r5, [r6, #12]
 80104b4:	e7da      	b.n	801046c <_vfiprintf_r+0x20>
 80104b6:	89ab      	ldrh	r3, [r5, #12]
 80104b8:	0598      	lsls	r0, r3, #22
 80104ba:	d4ed      	bmi.n	8010498 <_vfiprintf_r+0x4c>
 80104bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104be:	f7ff ff49 	bl	8010354 <__retarget_lock_release_recursive>
 80104c2:	e7e9      	b.n	8010498 <_vfiprintf_r+0x4c>
 80104c4:	2300      	movs	r3, #0
 80104c6:	9309      	str	r3, [sp, #36]	; 0x24
 80104c8:	2320      	movs	r3, #32
 80104ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80104d2:	2330      	movs	r3, #48	; 0x30
 80104d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010698 <_vfiprintf_r+0x24c>
 80104d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104dc:	f04f 0901 	mov.w	r9, #1
 80104e0:	4623      	mov	r3, r4
 80104e2:	469a      	mov	sl, r3
 80104e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104e8:	b10a      	cbz	r2, 80104ee <_vfiprintf_r+0xa2>
 80104ea:	2a25      	cmp	r2, #37	; 0x25
 80104ec:	d1f9      	bne.n	80104e2 <_vfiprintf_r+0x96>
 80104ee:	ebba 0b04 	subs.w	fp, sl, r4
 80104f2:	d00b      	beq.n	801050c <_vfiprintf_r+0xc0>
 80104f4:	465b      	mov	r3, fp
 80104f6:	4622      	mov	r2, r4
 80104f8:	4629      	mov	r1, r5
 80104fa:	4630      	mov	r0, r6
 80104fc:	f7ff ff94 	bl	8010428 <__sfputs_r>
 8010500:	3001      	adds	r0, #1
 8010502:	f000 80aa 	beq.w	801065a <_vfiprintf_r+0x20e>
 8010506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010508:	445a      	add	r2, fp
 801050a:	9209      	str	r2, [sp, #36]	; 0x24
 801050c:	f89a 3000 	ldrb.w	r3, [sl]
 8010510:	2b00      	cmp	r3, #0
 8010512:	f000 80a2 	beq.w	801065a <_vfiprintf_r+0x20e>
 8010516:	2300      	movs	r3, #0
 8010518:	f04f 32ff 	mov.w	r2, #4294967295
 801051c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010520:	f10a 0a01 	add.w	sl, sl, #1
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	9307      	str	r3, [sp, #28]
 8010528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801052c:	931a      	str	r3, [sp, #104]	; 0x68
 801052e:	4654      	mov	r4, sl
 8010530:	2205      	movs	r2, #5
 8010532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010536:	4858      	ldr	r0, [pc, #352]	; (8010698 <_vfiprintf_r+0x24c>)
 8010538:	f7ef feda 	bl	80002f0 <memchr>
 801053c:	9a04      	ldr	r2, [sp, #16]
 801053e:	b9d8      	cbnz	r0, 8010578 <_vfiprintf_r+0x12c>
 8010540:	06d1      	lsls	r1, r2, #27
 8010542:	bf44      	itt	mi
 8010544:	2320      	movmi	r3, #32
 8010546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801054a:	0713      	lsls	r3, r2, #28
 801054c:	bf44      	itt	mi
 801054e:	232b      	movmi	r3, #43	; 0x2b
 8010550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010554:	f89a 3000 	ldrb.w	r3, [sl]
 8010558:	2b2a      	cmp	r3, #42	; 0x2a
 801055a:	d015      	beq.n	8010588 <_vfiprintf_r+0x13c>
 801055c:	9a07      	ldr	r2, [sp, #28]
 801055e:	4654      	mov	r4, sl
 8010560:	2000      	movs	r0, #0
 8010562:	f04f 0c0a 	mov.w	ip, #10
 8010566:	4621      	mov	r1, r4
 8010568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801056c:	3b30      	subs	r3, #48	; 0x30
 801056e:	2b09      	cmp	r3, #9
 8010570:	d94e      	bls.n	8010610 <_vfiprintf_r+0x1c4>
 8010572:	b1b0      	cbz	r0, 80105a2 <_vfiprintf_r+0x156>
 8010574:	9207      	str	r2, [sp, #28]
 8010576:	e014      	b.n	80105a2 <_vfiprintf_r+0x156>
 8010578:	eba0 0308 	sub.w	r3, r0, r8
 801057c:	fa09 f303 	lsl.w	r3, r9, r3
 8010580:	4313      	orrs	r3, r2
 8010582:	9304      	str	r3, [sp, #16]
 8010584:	46a2      	mov	sl, r4
 8010586:	e7d2      	b.n	801052e <_vfiprintf_r+0xe2>
 8010588:	9b03      	ldr	r3, [sp, #12]
 801058a:	1d19      	adds	r1, r3, #4
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	9103      	str	r1, [sp, #12]
 8010590:	2b00      	cmp	r3, #0
 8010592:	bfbb      	ittet	lt
 8010594:	425b      	neglt	r3, r3
 8010596:	f042 0202 	orrlt.w	r2, r2, #2
 801059a:	9307      	strge	r3, [sp, #28]
 801059c:	9307      	strlt	r3, [sp, #28]
 801059e:	bfb8      	it	lt
 80105a0:	9204      	strlt	r2, [sp, #16]
 80105a2:	7823      	ldrb	r3, [r4, #0]
 80105a4:	2b2e      	cmp	r3, #46	; 0x2e
 80105a6:	d10c      	bne.n	80105c2 <_vfiprintf_r+0x176>
 80105a8:	7863      	ldrb	r3, [r4, #1]
 80105aa:	2b2a      	cmp	r3, #42	; 0x2a
 80105ac:	d135      	bne.n	801061a <_vfiprintf_r+0x1ce>
 80105ae:	9b03      	ldr	r3, [sp, #12]
 80105b0:	1d1a      	adds	r2, r3, #4
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	9203      	str	r2, [sp, #12]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	bfb8      	it	lt
 80105ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80105be:	3402      	adds	r4, #2
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106a8 <_vfiprintf_r+0x25c>
 80105c6:	7821      	ldrb	r1, [r4, #0]
 80105c8:	2203      	movs	r2, #3
 80105ca:	4650      	mov	r0, sl
 80105cc:	f7ef fe90 	bl	80002f0 <memchr>
 80105d0:	b140      	cbz	r0, 80105e4 <_vfiprintf_r+0x198>
 80105d2:	2340      	movs	r3, #64	; 0x40
 80105d4:	eba0 000a 	sub.w	r0, r0, sl
 80105d8:	fa03 f000 	lsl.w	r0, r3, r0
 80105dc:	9b04      	ldr	r3, [sp, #16]
 80105de:	4303      	orrs	r3, r0
 80105e0:	3401      	adds	r4, #1
 80105e2:	9304      	str	r3, [sp, #16]
 80105e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e8:	482c      	ldr	r0, [pc, #176]	; (801069c <_vfiprintf_r+0x250>)
 80105ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105ee:	2206      	movs	r2, #6
 80105f0:	f7ef fe7e 	bl	80002f0 <memchr>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d03f      	beq.n	8010678 <_vfiprintf_r+0x22c>
 80105f8:	4b29      	ldr	r3, [pc, #164]	; (80106a0 <_vfiprintf_r+0x254>)
 80105fa:	bb1b      	cbnz	r3, 8010644 <_vfiprintf_r+0x1f8>
 80105fc:	9b03      	ldr	r3, [sp, #12]
 80105fe:	3307      	adds	r3, #7
 8010600:	f023 0307 	bic.w	r3, r3, #7
 8010604:	3308      	adds	r3, #8
 8010606:	9303      	str	r3, [sp, #12]
 8010608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801060a:	443b      	add	r3, r7
 801060c:	9309      	str	r3, [sp, #36]	; 0x24
 801060e:	e767      	b.n	80104e0 <_vfiprintf_r+0x94>
 8010610:	fb0c 3202 	mla	r2, ip, r2, r3
 8010614:	460c      	mov	r4, r1
 8010616:	2001      	movs	r0, #1
 8010618:	e7a5      	b.n	8010566 <_vfiprintf_r+0x11a>
 801061a:	2300      	movs	r3, #0
 801061c:	3401      	adds	r4, #1
 801061e:	9305      	str	r3, [sp, #20]
 8010620:	4619      	mov	r1, r3
 8010622:	f04f 0c0a 	mov.w	ip, #10
 8010626:	4620      	mov	r0, r4
 8010628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801062c:	3a30      	subs	r2, #48	; 0x30
 801062e:	2a09      	cmp	r2, #9
 8010630:	d903      	bls.n	801063a <_vfiprintf_r+0x1ee>
 8010632:	2b00      	cmp	r3, #0
 8010634:	d0c5      	beq.n	80105c2 <_vfiprintf_r+0x176>
 8010636:	9105      	str	r1, [sp, #20]
 8010638:	e7c3      	b.n	80105c2 <_vfiprintf_r+0x176>
 801063a:	fb0c 2101 	mla	r1, ip, r1, r2
 801063e:	4604      	mov	r4, r0
 8010640:	2301      	movs	r3, #1
 8010642:	e7f0      	b.n	8010626 <_vfiprintf_r+0x1da>
 8010644:	ab03      	add	r3, sp, #12
 8010646:	9300      	str	r3, [sp, #0]
 8010648:	462a      	mov	r2, r5
 801064a:	4b16      	ldr	r3, [pc, #88]	; (80106a4 <_vfiprintf_r+0x258>)
 801064c:	a904      	add	r1, sp, #16
 801064e:	4630      	mov	r0, r6
 8010650:	f7fd ff56 	bl	800e500 <_printf_float>
 8010654:	4607      	mov	r7, r0
 8010656:	1c78      	adds	r0, r7, #1
 8010658:	d1d6      	bne.n	8010608 <_vfiprintf_r+0x1bc>
 801065a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801065c:	07d9      	lsls	r1, r3, #31
 801065e:	d405      	bmi.n	801066c <_vfiprintf_r+0x220>
 8010660:	89ab      	ldrh	r3, [r5, #12]
 8010662:	059a      	lsls	r2, r3, #22
 8010664:	d402      	bmi.n	801066c <_vfiprintf_r+0x220>
 8010666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010668:	f7ff fe74 	bl	8010354 <__retarget_lock_release_recursive>
 801066c:	89ab      	ldrh	r3, [r5, #12]
 801066e:	065b      	lsls	r3, r3, #25
 8010670:	f53f af12 	bmi.w	8010498 <_vfiprintf_r+0x4c>
 8010674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010676:	e711      	b.n	801049c <_vfiprintf_r+0x50>
 8010678:	ab03      	add	r3, sp, #12
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	462a      	mov	r2, r5
 801067e:	4b09      	ldr	r3, [pc, #36]	; (80106a4 <_vfiprintf_r+0x258>)
 8010680:	a904      	add	r1, sp, #16
 8010682:	4630      	mov	r0, r6
 8010684:	f7fe f9c8 	bl	800ea18 <_printf_i>
 8010688:	e7e4      	b.n	8010654 <_vfiprintf_r+0x208>
 801068a:	bf00      	nop
 801068c:	08011374 	.word	0x08011374
 8010690:	08011394 	.word	0x08011394
 8010694:	08011354 	.word	0x08011354
 8010698:	080111fc 	.word	0x080111fc
 801069c:	08011206 	.word	0x08011206
 80106a0:	0800e501 	.word	0x0800e501
 80106a4:	08010429 	.word	0x08010429
 80106a8:	08011202 	.word	0x08011202

080106ac <__swbuf_r>:
 80106ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ae:	460e      	mov	r6, r1
 80106b0:	4614      	mov	r4, r2
 80106b2:	4605      	mov	r5, r0
 80106b4:	b118      	cbz	r0, 80106be <__swbuf_r+0x12>
 80106b6:	6983      	ldr	r3, [r0, #24]
 80106b8:	b90b      	cbnz	r3, 80106be <__swbuf_r+0x12>
 80106ba:	f000 f9e7 	bl	8010a8c <__sinit>
 80106be:	4b21      	ldr	r3, [pc, #132]	; (8010744 <__swbuf_r+0x98>)
 80106c0:	429c      	cmp	r4, r3
 80106c2:	d12b      	bne.n	801071c <__swbuf_r+0x70>
 80106c4:	686c      	ldr	r4, [r5, #4]
 80106c6:	69a3      	ldr	r3, [r4, #24]
 80106c8:	60a3      	str	r3, [r4, #8]
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	071a      	lsls	r2, r3, #28
 80106ce:	d52f      	bpl.n	8010730 <__swbuf_r+0x84>
 80106d0:	6923      	ldr	r3, [r4, #16]
 80106d2:	b36b      	cbz	r3, 8010730 <__swbuf_r+0x84>
 80106d4:	6923      	ldr	r3, [r4, #16]
 80106d6:	6820      	ldr	r0, [r4, #0]
 80106d8:	1ac0      	subs	r0, r0, r3
 80106da:	6963      	ldr	r3, [r4, #20]
 80106dc:	b2f6      	uxtb	r6, r6
 80106de:	4283      	cmp	r3, r0
 80106e0:	4637      	mov	r7, r6
 80106e2:	dc04      	bgt.n	80106ee <__swbuf_r+0x42>
 80106e4:	4621      	mov	r1, r4
 80106e6:	4628      	mov	r0, r5
 80106e8:	f000 f93c 	bl	8010964 <_fflush_r>
 80106ec:	bb30      	cbnz	r0, 801073c <__swbuf_r+0x90>
 80106ee:	68a3      	ldr	r3, [r4, #8]
 80106f0:	3b01      	subs	r3, #1
 80106f2:	60a3      	str	r3, [r4, #8]
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	1c5a      	adds	r2, r3, #1
 80106f8:	6022      	str	r2, [r4, #0]
 80106fa:	701e      	strb	r6, [r3, #0]
 80106fc:	6963      	ldr	r3, [r4, #20]
 80106fe:	3001      	adds	r0, #1
 8010700:	4283      	cmp	r3, r0
 8010702:	d004      	beq.n	801070e <__swbuf_r+0x62>
 8010704:	89a3      	ldrh	r3, [r4, #12]
 8010706:	07db      	lsls	r3, r3, #31
 8010708:	d506      	bpl.n	8010718 <__swbuf_r+0x6c>
 801070a:	2e0a      	cmp	r6, #10
 801070c:	d104      	bne.n	8010718 <__swbuf_r+0x6c>
 801070e:	4621      	mov	r1, r4
 8010710:	4628      	mov	r0, r5
 8010712:	f000 f927 	bl	8010964 <_fflush_r>
 8010716:	b988      	cbnz	r0, 801073c <__swbuf_r+0x90>
 8010718:	4638      	mov	r0, r7
 801071a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801071c:	4b0a      	ldr	r3, [pc, #40]	; (8010748 <__swbuf_r+0x9c>)
 801071e:	429c      	cmp	r4, r3
 8010720:	d101      	bne.n	8010726 <__swbuf_r+0x7a>
 8010722:	68ac      	ldr	r4, [r5, #8]
 8010724:	e7cf      	b.n	80106c6 <__swbuf_r+0x1a>
 8010726:	4b09      	ldr	r3, [pc, #36]	; (801074c <__swbuf_r+0xa0>)
 8010728:	429c      	cmp	r4, r3
 801072a:	bf08      	it	eq
 801072c:	68ec      	ldreq	r4, [r5, #12]
 801072e:	e7ca      	b.n	80106c6 <__swbuf_r+0x1a>
 8010730:	4621      	mov	r1, r4
 8010732:	4628      	mov	r0, r5
 8010734:	f000 f81a 	bl	801076c <__swsetup_r>
 8010738:	2800      	cmp	r0, #0
 801073a:	d0cb      	beq.n	80106d4 <__swbuf_r+0x28>
 801073c:	f04f 37ff 	mov.w	r7, #4294967295
 8010740:	e7ea      	b.n	8010718 <__swbuf_r+0x6c>
 8010742:	bf00      	nop
 8010744:	08011374 	.word	0x08011374
 8010748:	08011394 	.word	0x08011394
 801074c:	08011354 	.word	0x08011354

08010750 <__ascii_wctomb>:
 8010750:	b149      	cbz	r1, 8010766 <__ascii_wctomb+0x16>
 8010752:	2aff      	cmp	r2, #255	; 0xff
 8010754:	bf85      	ittet	hi
 8010756:	238a      	movhi	r3, #138	; 0x8a
 8010758:	6003      	strhi	r3, [r0, #0]
 801075a:	700a      	strbls	r2, [r1, #0]
 801075c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010760:	bf98      	it	ls
 8010762:	2001      	movls	r0, #1
 8010764:	4770      	bx	lr
 8010766:	4608      	mov	r0, r1
 8010768:	4770      	bx	lr
	...

0801076c <__swsetup_r>:
 801076c:	4b32      	ldr	r3, [pc, #200]	; (8010838 <__swsetup_r+0xcc>)
 801076e:	b570      	push	{r4, r5, r6, lr}
 8010770:	681d      	ldr	r5, [r3, #0]
 8010772:	4606      	mov	r6, r0
 8010774:	460c      	mov	r4, r1
 8010776:	b125      	cbz	r5, 8010782 <__swsetup_r+0x16>
 8010778:	69ab      	ldr	r3, [r5, #24]
 801077a:	b913      	cbnz	r3, 8010782 <__swsetup_r+0x16>
 801077c:	4628      	mov	r0, r5
 801077e:	f000 f985 	bl	8010a8c <__sinit>
 8010782:	4b2e      	ldr	r3, [pc, #184]	; (801083c <__swsetup_r+0xd0>)
 8010784:	429c      	cmp	r4, r3
 8010786:	d10f      	bne.n	80107a8 <__swsetup_r+0x3c>
 8010788:	686c      	ldr	r4, [r5, #4]
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010790:	0719      	lsls	r1, r3, #28
 8010792:	d42c      	bmi.n	80107ee <__swsetup_r+0x82>
 8010794:	06dd      	lsls	r5, r3, #27
 8010796:	d411      	bmi.n	80107bc <__swsetup_r+0x50>
 8010798:	2309      	movs	r3, #9
 801079a:	6033      	str	r3, [r6, #0]
 801079c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107a0:	81a3      	strh	r3, [r4, #12]
 80107a2:	f04f 30ff 	mov.w	r0, #4294967295
 80107a6:	e03e      	b.n	8010826 <__swsetup_r+0xba>
 80107a8:	4b25      	ldr	r3, [pc, #148]	; (8010840 <__swsetup_r+0xd4>)
 80107aa:	429c      	cmp	r4, r3
 80107ac:	d101      	bne.n	80107b2 <__swsetup_r+0x46>
 80107ae:	68ac      	ldr	r4, [r5, #8]
 80107b0:	e7eb      	b.n	801078a <__swsetup_r+0x1e>
 80107b2:	4b24      	ldr	r3, [pc, #144]	; (8010844 <__swsetup_r+0xd8>)
 80107b4:	429c      	cmp	r4, r3
 80107b6:	bf08      	it	eq
 80107b8:	68ec      	ldreq	r4, [r5, #12]
 80107ba:	e7e6      	b.n	801078a <__swsetup_r+0x1e>
 80107bc:	0758      	lsls	r0, r3, #29
 80107be:	d512      	bpl.n	80107e6 <__swsetup_r+0x7a>
 80107c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107c2:	b141      	cbz	r1, 80107d6 <__swsetup_r+0x6a>
 80107c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107c8:	4299      	cmp	r1, r3
 80107ca:	d002      	beq.n	80107d2 <__swsetup_r+0x66>
 80107cc:	4630      	mov	r0, r6
 80107ce:	f7fd fd5b 	bl	800e288 <_free_r>
 80107d2:	2300      	movs	r3, #0
 80107d4:	6363      	str	r3, [r4, #52]	; 0x34
 80107d6:	89a3      	ldrh	r3, [r4, #12]
 80107d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107dc:	81a3      	strh	r3, [r4, #12]
 80107de:	2300      	movs	r3, #0
 80107e0:	6063      	str	r3, [r4, #4]
 80107e2:	6923      	ldr	r3, [r4, #16]
 80107e4:	6023      	str	r3, [r4, #0]
 80107e6:	89a3      	ldrh	r3, [r4, #12]
 80107e8:	f043 0308 	orr.w	r3, r3, #8
 80107ec:	81a3      	strh	r3, [r4, #12]
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	b94b      	cbnz	r3, 8010806 <__swsetup_r+0x9a>
 80107f2:	89a3      	ldrh	r3, [r4, #12]
 80107f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107fc:	d003      	beq.n	8010806 <__swsetup_r+0x9a>
 80107fe:	4621      	mov	r1, r4
 8010800:	4630      	mov	r0, r6
 8010802:	f000 fa05 	bl	8010c10 <__smakebuf_r>
 8010806:	89a0      	ldrh	r0, [r4, #12]
 8010808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801080c:	f010 0301 	ands.w	r3, r0, #1
 8010810:	d00a      	beq.n	8010828 <__swsetup_r+0xbc>
 8010812:	2300      	movs	r3, #0
 8010814:	60a3      	str	r3, [r4, #8]
 8010816:	6963      	ldr	r3, [r4, #20]
 8010818:	425b      	negs	r3, r3
 801081a:	61a3      	str	r3, [r4, #24]
 801081c:	6923      	ldr	r3, [r4, #16]
 801081e:	b943      	cbnz	r3, 8010832 <__swsetup_r+0xc6>
 8010820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010824:	d1ba      	bne.n	801079c <__swsetup_r+0x30>
 8010826:	bd70      	pop	{r4, r5, r6, pc}
 8010828:	0781      	lsls	r1, r0, #30
 801082a:	bf58      	it	pl
 801082c:	6963      	ldrpl	r3, [r4, #20]
 801082e:	60a3      	str	r3, [r4, #8]
 8010830:	e7f4      	b.n	801081c <__swsetup_r+0xb0>
 8010832:	2000      	movs	r0, #0
 8010834:	e7f7      	b.n	8010826 <__swsetup_r+0xba>
 8010836:	bf00      	nop
 8010838:	24000030 	.word	0x24000030
 801083c:	08011374 	.word	0x08011374
 8010840:	08011394 	.word	0x08011394
 8010844:	08011354 	.word	0x08011354

08010848 <abort>:
 8010848:	b508      	push	{r3, lr}
 801084a:	2006      	movs	r0, #6
 801084c:	f000 fa50 	bl	8010cf0 <raise>
 8010850:	2001      	movs	r0, #1
 8010852:	f7f0 feed 	bl	8001630 <_exit>
	...

08010858 <__sflush_r>:
 8010858:	898a      	ldrh	r2, [r1, #12]
 801085a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085e:	4605      	mov	r5, r0
 8010860:	0710      	lsls	r0, r2, #28
 8010862:	460c      	mov	r4, r1
 8010864:	d458      	bmi.n	8010918 <__sflush_r+0xc0>
 8010866:	684b      	ldr	r3, [r1, #4]
 8010868:	2b00      	cmp	r3, #0
 801086a:	dc05      	bgt.n	8010878 <__sflush_r+0x20>
 801086c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801086e:	2b00      	cmp	r3, #0
 8010870:	dc02      	bgt.n	8010878 <__sflush_r+0x20>
 8010872:	2000      	movs	r0, #0
 8010874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801087a:	2e00      	cmp	r6, #0
 801087c:	d0f9      	beq.n	8010872 <__sflush_r+0x1a>
 801087e:	2300      	movs	r3, #0
 8010880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010884:	682f      	ldr	r7, [r5, #0]
 8010886:	602b      	str	r3, [r5, #0]
 8010888:	d032      	beq.n	80108f0 <__sflush_r+0x98>
 801088a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	075a      	lsls	r2, r3, #29
 8010890:	d505      	bpl.n	801089e <__sflush_r+0x46>
 8010892:	6863      	ldr	r3, [r4, #4]
 8010894:	1ac0      	subs	r0, r0, r3
 8010896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010898:	b10b      	cbz	r3, 801089e <__sflush_r+0x46>
 801089a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801089c:	1ac0      	subs	r0, r0, r3
 801089e:	2300      	movs	r3, #0
 80108a0:	4602      	mov	r2, r0
 80108a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108a4:	6a21      	ldr	r1, [r4, #32]
 80108a6:	4628      	mov	r0, r5
 80108a8:	47b0      	blx	r6
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	d106      	bne.n	80108be <__sflush_r+0x66>
 80108b0:	6829      	ldr	r1, [r5, #0]
 80108b2:	291d      	cmp	r1, #29
 80108b4:	d82c      	bhi.n	8010910 <__sflush_r+0xb8>
 80108b6:	4a2a      	ldr	r2, [pc, #168]	; (8010960 <__sflush_r+0x108>)
 80108b8:	40ca      	lsrs	r2, r1
 80108ba:	07d6      	lsls	r6, r2, #31
 80108bc:	d528      	bpl.n	8010910 <__sflush_r+0xb8>
 80108be:	2200      	movs	r2, #0
 80108c0:	6062      	str	r2, [r4, #4]
 80108c2:	04d9      	lsls	r1, r3, #19
 80108c4:	6922      	ldr	r2, [r4, #16]
 80108c6:	6022      	str	r2, [r4, #0]
 80108c8:	d504      	bpl.n	80108d4 <__sflush_r+0x7c>
 80108ca:	1c42      	adds	r2, r0, #1
 80108cc:	d101      	bne.n	80108d2 <__sflush_r+0x7a>
 80108ce:	682b      	ldr	r3, [r5, #0]
 80108d0:	b903      	cbnz	r3, 80108d4 <__sflush_r+0x7c>
 80108d2:	6560      	str	r0, [r4, #84]	; 0x54
 80108d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108d6:	602f      	str	r7, [r5, #0]
 80108d8:	2900      	cmp	r1, #0
 80108da:	d0ca      	beq.n	8010872 <__sflush_r+0x1a>
 80108dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108e0:	4299      	cmp	r1, r3
 80108e2:	d002      	beq.n	80108ea <__sflush_r+0x92>
 80108e4:	4628      	mov	r0, r5
 80108e6:	f7fd fccf 	bl	800e288 <_free_r>
 80108ea:	2000      	movs	r0, #0
 80108ec:	6360      	str	r0, [r4, #52]	; 0x34
 80108ee:	e7c1      	b.n	8010874 <__sflush_r+0x1c>
 80108f0:	6a21      	ldr	r1, [r4, #32]
 80108f2:	2301      	movs	r3, #1
 80108f4:	4628      	mov	r0, r5
 80108f6:	47b0      	blx	r6
 80108f8:	1c41      	adds	r1, r0, #1
 80108fa:	d1c7      	bne.n	801088c <__sflush_r+0x34>
 80108fc:	682b      	ldr	r3, [r5, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d0c4      	beq.n	801088c <__sflush_r+0x34>
 8010902:	2b1d      	cmp	r3, #29
 8010904:	d001      	beq.n	801090a <__sflush_r+0xb2>
 8010906:	2b16      	cmp	r3, #22
 8010908:	d101      	bne.n	801090e <__sflush_r+0xb6>
 801090a:	602f      	str	r7, [r5, #0]
 801090c:	e7b1      	b.n	8010872 <__sflush_r+0x1a>
 801090e:	89a3      	ldrh	r3, [r4, #12]
 8010910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010914:	81a3      	strh	r3, [r4, #12]
 8010916:	e7ad      	b.n	8010874 <__sflush_r+0x1c>
 8010918:	690f      	ldr	r7, [r1, #16]
 801091a:	2f00      	cmp	r7, #0
 801091c:	d0a9      	beq.n	8010872 <__sflush_r+0x1a>
 801091e:	0793      	lsls	r3, r2, #30
 8010920:	680e      	ldr	r6, [r1, #0]
 8010922:	bf08      	it	eq
 8010924:	694b      	ldreq	r3, [r1, #20]
 8010926:	600f      	str	r7, [r1, #0]
 8010928:	bf18      	it	ne
 801092a:	2300      	movne	r3, #0
 801092c:	eba6 0807 	sub.w	r8, r6, r7
 8010930:	608b      	str	r3, [r1, #8]
 8010932:	f1b8 0f00 	cmp.w	r8, #0
 8010936:	dd9c      	ble.n	8010872 <__sflush_r+0x1a>
 8010938:	6a21      	ldr	r1, [r4, #32]
 801093a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801093c:	4643      	mov	r3, r8
 801093e:	463a      	mov	r2, r7
 8010940:	4628      	mov	r0, r5
 8010942:	47b0      	blx	r6
 8010944:	2800      	cmp	r0, #0
 8010946:	dc06      	bgt.n	8010956 <__sflush_r+0xfe>
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801094e:	81a3      	strh	r3, [r4, #12]
 8010950:	f04f 30ff 	mov.w	r0, #4294967295
 8010954:	e78e      	b.n	8010874 <__sflush_r+0x1c>
 8010956:	4407      	add	r7, r0
 8010958:	eba8 0800 	sub.w	r8, r8, r0
 801095c:	e7e9      	b.n	8010932 <__sflush_r+0xda>
 801095e:	bf00      	nop
 8010960:	20400001 	.word	0x20400001

08010964 <_fflush_r>:
 8010964:	b538      	push	{r3, r4, r5, lr}
 8010966:	690b      	ldr	r3, [r1, #16]
 8010968:	4605      	mov	r5, r0
 801096a:	460c      	mov	r4, r1
 801096c:	b913      	cbnz	r3, 8010974 <_fflush_r+0x10>
 801096e:	2500      	movs	r5, #0
 8010970:	4628      	mov	r0, r5
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	b118      	cbz	r0, 801097e <_fflush_r+0x1a>
 8010976:	6983      	ldr	r3, [r0, #24]
 8010978:	b90b      	cbnz	r3, 801097e <_fflush_r+0x1a>
 801097a:	f000 f887 	bl	8010a8c <__sinit>
 801097e:	4b14      	ldr	r3, [pc, #80]	; (80109d0 <_fflush_r+0x6c>)
 8010980:	429c      	cmp	r4, r3
 8010982:	d11b      	bne.n	80109bc <_fflush_r+0x58>
 8010984:	686c      	ldr	r4, [r5, #4]
 8010986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d0ef      	beq.n	801096e <_fflush_r+0xa>
 801098e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010990:	07d0      	lsls	r0, r2, #31
 8010992:	d404      	bmi.n	801099e <_fflush_r+0x3a>
 8010994:	0599      	lsls	r1, r3, #22
 8010996:	d402      	bmi.n	801099e <_fflush_r+0x3a>
 8010998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801099a:	f7ff fcda 	bl	8010352 <__retarget_lock_acquire_recursive>
 801099e:	4628      	mov	r0, r5
 80109a0:	4621      	mov	r1, r4
 80109a2:	f7ff ff59 	bl	8010858 <__sflush_r>
 80109a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109a8:	07da      	lsls	r2, r3, #31
 80109aa:	4605      	mov	r5, r0
 80109ac:	d4e0      	bmi.n	8010970 <_fflush_r+0xc>
 80109ae:	89a3      	ldrh	r3, [r4, #12]
 80109b0:	059b      	lsls	r3, r3, #22
 80109b2:	d4dd      	bmi.n	8010970 <_fflush_r+0xc>
 80109b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109b6:	f7ff fccd 	bl	8010354 <__retarget_lock_release_recursive>
 80109ba:	e7d9      	b.n	8010970 <_fflush_r+0xc>
 80109bc:	4b05      	ldr	r3, [pc, #20]	; (80109d4 <_fflush_r+0x70>)
 80109be:	429c      	cmp	r4, r3
 80109c0:	d101      	bne.n	80109c6 <_fflush_r+0x62>
 80109c2:	68ac      	ldr	r4, [r5, #8]
 80109c4:	e7df      	b.n	8010986 <_fflush_r+0x22>
 80109c6:	4b04      	ldr	r3, [pc, #16]	; (80109d8 <_fflush_r+0x74>)
 80109c8:	429c      	cmp	r4, r3
 80109ca:	bf08      	it	eq
 80109cc:	68ec      	ldreq	r4, [r5, #12]
 80109ce:	e7da      	b.n	8010986 <_fflush_r+0x22>
 80109d0:	08011374 	.word	0x08011374
 80109d4:	08011394 	.word	0x08011394
 80109d8:	08011354 	.word	0x08011354

080109dc <std>:
 80109dc:	2300      	movs	r3, #0
 80109de:	b510      	push	{r4, lr}
 80109e0:	4604      	mov	r4, r0
 80109e2:	e9c0 3300 	strd	r3, r3, [r0]
 80109e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109ea:	6083      	str	r3, [r0, #8]
 80109ec:	8181      	strh	r1, [r0, #12]
 80109ee:	6643      	str	r3, [r0, #100]	; 0x64
 80109f0:	81c2      	strh	r2, [r0, #14]
 80109f2:	6183      	str	r3, [r0, #24]
 80109f4:	4619      	mov	r1, r3
 80109f6:	2208      	movs	r2, #8
 80109f8:	305c      	adds	r0, #92	; 0x5c
 80109fa:	f7fd fc3d 	bl	800e278 <memset>
 80109fe:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <std+0x38>)
 8010a00:	6263      	str	r3, [r4, #36]	; 0x24
 8010a02:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <std+0x3c>)
 8010a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a06:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <std+0x40>)
 8010a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a0a:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <std+0x44>)
 8010a0c:	6224      	str	r4, [r4, #32]
 8010a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a10:	bd10      	pop	{r4, pc}
 8010a12:	bf00      	nop
 8010a14:	08010d29 	.word	0x08010d29
 8010a18:	08010d4b 	.word	0x08010d4b
 8010a1c:	08010d83 	.word	0x08010d83
 8010a20:	08010da7 	.word	0x08010da7

08010a24 <_cleanup_r>:
 8010a24:	4901      	ldr	r1, [pc, #4]	; (8010a2c <_cleanup_r+0x8>)
 8010a26:	f000 b8af 	b.w	8010b88 <_fwalk_reent>
 8010a2a:	bf00      	nop
 8010a2c:	08010965 	.word	0x08010965

08010a30 <__sfmoreglue>:
 8010a30:	b570      	push	{r4, r5, r6, lr}
 8010a32:	1e4a      	subs	r2, r1, #1
 8010a34:	2568      	movs	r5, #104	; 0x68
 8010a36:	4355      	muls	r5, r2
 8010a38:	460e      	mov	r6, r1
 8010a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a3e:	f7fd fc73 	bl	800e328 <_malloc_r>
 8010a42:	4604      	mov	r4, r0
 8010a44:	b140      	cbz	r0, 8010a58 <__sfmoreglue+0x28>
 8010a46:	2100      	movs	r1, #0
 8010a48:	e9c0 1600 	strd	r1, r6, [r0]
 8010a4c:	300c      	adds	r0, #12
 8010a4e:	60a0      	str	r0, [r4, #8]
 8010a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a54:	f7fd fc10 	bl	800e278 <memset>
 8010a58:	4620      	mov	r0, r4
 8010a5a:	bd70      	pop	{r4, r5, r6, pc}

08010a5c <__sfp_lock_acquire>:
 8010a5c:	4801      	ldr	r0, [pc, #4]	; (8010a64 <__sfp_lock_acquire+0x8>)
 8010a5e:	f7ff bc78 	b.w	8010352 <__retarget_lock_acquire_recursive>
 8010a62:	bf00      	nop
 8010a64:	240010e4 	.word	0x240010e4

08010a68 <__sfp_lock_release>:
 8010a68:	4801      	ldr	r0, [pc, #4]	; (8010a70 <__sfp_lock_release+0x8>)
 8010a6a:	f7ff bc73 	b.w	8010354 <__retarget_lock_release_recursive>
 8010a6e:	bf00      	nop
 8010a70:	240010e4 	.word	0x240010e4

08010a74 <__sinit_lock_acquire>:
 8010a74:	4801      	ldr	r0, [pc, #4]	; (8010a7c <__sinit_lock_acquire+0x8>)
 8010a76:	f7ff bc6c 	b.w	8010352 <__retarget_lock_acquire_recursive>
 8010a7a:	bf00      	nop
 8010a7c:	240010df 	.word	0x240010df

08010a80 <__sinit_lock_release>:
 8010a80:	4801      	ldr	r0, [pc, #4]	; (8010a88 <__sinit_lock_release+0x8>)
 8010a82:	f7ff bc67 	b.w	8010354 <__retarget_lock_release_recursive>
 8010a86:	bf00      	nop
 8010a88:	240010df 	.word	0x240010df

08010a8c <__sinit>:
 8010a8c:	b510      	push	{r4, lr}
 8010a8e:	4604      	mov	r4, r0
 8010a90:	f7ff fff0 	bl	8010a74 <__sinit_lock_acquire>
 8010a94:	69a3      	ldr	r3, [r4, #24]
 8010a96:	b11b      	cbz	r3, 8010aa0 <__sinit+0x14>
 8010a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a9c:	f7ff bff0 	b.w	8010a80 <__sinit_lock_release>
 8010aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8010aa6:	4b13      	ldr	r3, [pc, #76]	; (8010af4 <__sinit+0x68>)
 8010aa8:	4a13      	ldr	r2, [pc, #76]	; (8010af8 <__sinit+0x6c>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8010aae:	42a3      	cmp	r3, r4
 8010ab0:	bf04      	itt	eq
 8010ab2:	2301      	moveq	r3, #1
 8010ab4:	61a3      	streq	r3, [r4, #24]
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f000 f820 	bl	8010afc <__sfp>
 8010abc:	6060      	str	r0, [r4, #4]
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f000 f81c 	bl	8010afc <__sfp>
 8010ac4:	60a0      	str	r0, [r4, #8]
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 f818 	bl	8010afc <__sfp>
 8010acc:	2200      	movs	r2, #0
 8010ace:	60e0      	str	r0, [r4, #12]
 8010ad0:	2104      	movs	r1, #4
 8010ad2:	6860      	ldr	r0, [r4, #4]
 8010ad4:	f7ff ff82 	bl	80109dc <std>
 8010ad8:	68a0      	ldr	r0, [r4, #8]
 8010ada:	2201      	movs	r2, #1
 8010adc:	2109      	movs	r1, #9
 8010ade:	f7ff ff7d 	bl	80109dc <std>
 8010ae2:	68e0      	ldr	r0, [r4, #12]
 8010ae4:	2202      	movs	r2, #2
 8010ae6:	2112      	movs	r1, #18
 8010ae8:	f7ff ff78 	bl	80109dc <std>
 8010aec:	2301      	movs	r3, #1
 8010aee:	61a3      	str	r3, [r4, #24]
 8010af0:	e7d2      	b.n	8010a98 <__sinit+0xc>
 8010af2:	bf00      	nop
 8010af4:	08010fd4 	.word	0x08010fd4
 8010af8:	08010a25 	.word	0x08010a25

08010afc <__sfp>:
 8010afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afe:	4607      	mov	r7, r0
 8010b00:	f7ff ffac 	bl	8010a5c <__sfp_lock_acquire>
 8010b04:	4b1e      	ldr	r3, [pc, #120]	; (8010b80 <__sfp+0x84>)
 8010b06:	681e      	ldr	r6, [r3, #0]
 8010b08:	69b3      	ldr	r3, [r6, #24]
 8010b0a:	b913      	cbnz	r3, 8010b12 <__sfp+0x16>
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	f7ff ffbd 	bl	8010a8c <__sinit>
 8010b12:	3648      	adds	r6, #72	; 0x48
 8010b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	d503      	bpl.n	8010b24 <__sfp+0x28>
 8010b1c:	6833      	ldr	r3, [r6, #0]
 8010b1e:	b30b      	cbz	r3, 8010b64 <__sfp+0x68>
 8010b20:	6836      	ldr	r6, [r6, #0]
 8010b22:	e7f7      	b.n	8010b14 <__sfp+0x18>
 8010b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b28:	b9d5      	cbnz	r5, 8010b60 <__sfp+0x64>
 8010b2a:	4b16      	ldr	r3, [pc, #88]	; (8010b84 <__sfp+0x88>)
 8010b2c:	60e3      	str	r3, [r4, #12]
 8010b2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b32:	6665      	str	r5, [r4, #100]	; 0x64
 8010b34:	f7ff fc0c 	bl	8010350 <__retarget_lock_init_recursive>
 8010b38:	f7ff ff96 	bl	8010a68 <__sfp_lock_release>
 8010b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b44:	6025      	str	r5, [r4, #0]
 8010b46:	61a5      	str	r5, [r4, #24]
 8010b48:	2208      	movs	r2, #8
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b50:	f7fd fb92 	bl	800e278 <memset>
 8010b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b60:	3468      	adds	r4, #104	; 0x68
 8010b62:	e7d9      	b.n	8010b18 <__sfp+0x1c>
 8010b64:	2104      	movs	r1, #4
 8010b66:	4638      	mov	r0, r7
 8010b68:	f7ff ff62 	bl	8010a30 <__sfmoreglue>
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	6030      	str	r0, [r6, #0]
 8010b70:	2800      	cmp	r0, #0
 8010b72:	d1d5      	bne.n	8010b20 <__sfp+0x24>
 8010b74:	f7ff ff78 	bl	8010a68 <__sfp_lock_release>
 8010b78:	230c      	movs	r3, #12
 8010b7a:	603b      	str	r3, [r7, #0]
 8010b7c:	e7ee      	b.n	8010b5c <__sfp+0x60>
 8010b7e:	bf00      	nop
 8010b80:	08010fd4 	.word	0x08010fd4
 8010b84:	ffff0001 	.word	0xffff0001

08010b88 <_fwalk_reent>:
 8010b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	4688      	mov	r8, r1
 8010b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b94:	2700      	movs	r7, #0
 8010b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8010b9e:	d505      	bpl.n	8010bac <_fwalk_reent+0x24>
 8010ba0:	6824      	ldr	r4, [r4, #0]
 8010ba2:	2c00      	cmp	r4, #0
 8010ba4:	d1f7      	bne.n	8010b96 <_fwalk_reent+0xe>
 8010ba6:	4638      	mov	r0, r7
 8010ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bac:	89ab      	ldrh	r3, [r5, #12]
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d907      	bls.n	8010bc2 <_fwalk_reent+0x3a>
 8010bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	d003      	beq.n	8010bc2 <_fwalk_reent+0x3a>
 8010bba:	4629      	mov	r1, r5
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	47c0      	blx	r8
 8010bc0:	4307      	orrs	r7, r0
 8010bc2:	3568      	adds	r5, #104	; 0x68
 8010bc4:	e7e9      	b.n	8010b9a <_fwalk_reent+0x12>

08010bc6 <__swhatbuf_r>:
 8010bc6:	b570      	push	{r4, r5, r6, lr}
 8010bc8:	460e      	mov	r6, r1
 8010bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bce:	2900      	cmp	r1, #0
 8010bd0:	b096      	sub	sp, #88	; 0x58
 8010bd2:	4614      	mov	r4, r2
 8010bd4:	461d      	mov	r5, r3
 8010bd6:	da07      	bge.n	8010be8 <__swhatbuf_r+0x22>
 8010bd8:	2300      	movs	r3, #0
 8010bda:	602b      	str	r3, [r5, #0]
 8010bdc:	89b3      	ldrh	r3, [r6, #12]
 8010bde:	061a      	lsls	r2, r3, #24
 8010be0:	d410      	bmi.n	8010c04 <__swhatbuf_r+0x3e>
 8010be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010be6:	e00e      	b.n	8010c06 <__swhatbuf_r+0x40>
 8010be8:	466a      	mov	r2, sp
 8010bea:	f000 f903 	bl	8010df4 <_fstat_r>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	dbf2      	blt.n	8010bd8 <__swhatbuf_r+0x12>
 8010bf2:	9a01      	ldr	r2, [sp, #4]
 8010bf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010bf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010bfc:	425a      	negs	r2, r3
 8010bfe:	415a      	adcs	r2, r3
 8010c00:	602a      	str	r2, [r5, #0]
 8010c02:	e7ee      	b.n	8010be2 <__swhatbuf_r+0x1c>
 8010c04:	2340      	movs	r3, #64	; 0x40
 8010c06:	2000      	movs	r0, #0
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	b016      	add	sp, #88	; 0x58
 8010c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c10 <__smakebuf_r>:
 8010c10:	898b      	ldrh	r3, [r1, #12]
 8010c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c14:	079d      	lsls	r5, r3, #30
 8010c16:	4606      	mov	r6, r0
 8010c18:	460c      	mov	r4, r1
 8010c1a:	d507      	bpl.n	8010c2c <__smakebuf_r+0x1c>
 8010c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	6123      	str	r3, [r4, #16]
 8010c24:	2301      	movs	r3, #1
 8010c26:	6163      	str	r3, [r4, #20]
 8010c28:	b002      	add	sp, #8
 8010c2a:	bd70      	pop	{r4, r5, r6, pc}
 8010c2c:	ab01      	add	r3, sp, #4
 8010c2e:	466a      	mov	r2, sp
 8010c30:	f7ff ffc9 	bl	8010bc6 <__swhatbuf_r>
 8010c34:	9900      	ldr	r1, [sp, #0]
 8010c36:	4605      	mov	r5, r0
 8010c38:	4630      	mov	r0, r6
 8010c3a:	f7fd fb75 	bl	800e328 <_malloc_r>
 8010c3e:	b948      	cbnz	r0, 8010c54 <__smakebuf_r+0x44>
 8010c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c44:	059a      	lsls	r2, r3, #22
 8010c46:	d4ef      	bmi.n	8010c28 <__smakebuf_r+0x18>
 8010c48:	f023 0303 	bic.w	r3, r3, #3
 8010c4c:	f043 0302 	orr.w	r3, r3, #2
 8010c50:	81a3      	strh	r3, [r4, #12]
 8010c52:	e7e3      	b.n	8010c1c <__smakebuf_r+0xc>
 8010c54:	4b0d      	ldr	r3, [pc, #52]	; (8010c8c <__smakebuf_r+0x7c>)
 8010c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c58:	89a3      	ldrh	r3, [r4, #12]
 8010c5a:	6020      	str	r0, [r4, #0]
 8010c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c60:	81a3      	strh	r3, [r4, #12]
 8010c62:	9b00      	ldr	r3, [sp, #0]
 8010c64:	6163      	str	r3, [r4, #20]
 8010c66:	9b01      	ldr	r3, [sp, #4]
 8010c68:	6120      	str	r0, [r4, #16]
 8010c6a:	b15b      	cbz	r3, 8010c84 <__smakebuf_r+0x74>
 8010c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c70:	4630      	mov	r0, r6
 8010c72:	f000 f8d1 	bl	8010e18 <_isatty_r>
 8010c76:	b128      	cbz	r0, 8010c84 <__smakebuf_r+0x74>
 8010c78:	89a3      	ldrh	r3, [r4, #12]
 8010c7a:	f023 0303 	bic.w	r3, r3, #3
 8010c7e:	f043 0301 	orr.w	r3, r3, #1
 8010c82:	81a3      	strh	r3, [r4, #12]
 8010c84:	89a0      	ldrh	r0, [r4, #12]
 8010c86:	4305      	orrs	r5, r0
 8010c88:	81a5      	strh	r5, [r4, #12]
 8010c8a:	e7cd      	b.n	8010c28 <__smakebuf_r+0x18>
 8010c8c:	08010a25 	.word	0x08010a25

08010c90 <_malloc_usable_size_r>:
 8010c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c94:	1f18      	subs	r0, r3, #4
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	bfbc      	itt	lt
 8010c9a:	580b      	ldrlt	r3, [r1, r0]
 8010c9c:	18c0      	addlt	r0, r0, r3
 8010c9e:	4770      	bx	lr

08010ca0 <_raise_r>:
 8010ca0:	291f      	cmp	r1, #31
 8010ca2:	b538      	push	{r3, r4, r5, lr}
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	460d      	mov	r5, r1
 8010ca8:	d904      	bls.n	8010cb4 <_raise_r+0x14>
 8010caa:	2316      	movs	r3, #22
 8010cac:	6003      	str	r3, [r0, #0]
 8010cae:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb2:	bd38      	pop	{r3, r4, r5, pc}
 8010cb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010cb6:	b112      	cbz	r2, 8010cbe <_raise_r+0x1e>
 8010cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010cbc:	b94b      	cbnz	r3, 8010cd2 <_raise_r+0x32>
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	f000 f830 	bl	8010d24 <_getpid_r>
 8010cc4:	462a      	mov	r2, r5
 8010cc6:	4601      	mov	r1, r0
 8010cc8:	4620      	mov	r0, r4
 8010cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cce:	f000 b817 	b.w	8010d00 <_kill_r>
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d00a      	beq.n	8010cec <_raise_r+0x4c>
 8010cd6:	1c59      	adds	r1, r3, #1
 8010cd8:	d103      	bne.n	8010ce2 <_raise_r+0x42>
 8010cda:	2316      	movs	r3, #22
 8010cdc:	6003      	str	r3, [r0, #0]
 8010cde:	2001      	movs	r0, #1
 8010ce0:	e7e7      	b.n	8010cb2 <_raise_r+0x12>
 8010ce2:	2400      	movs	r4, #0
 8010ce4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ce8:	4628      	mov	r0, r5
 8010cea:	4798      	blx	r3
 8010cec:	2000      	movs	r0, #0
 8010cee:	e7e0      	b.n	8010cb2 <_raise_r+0x12>

08010cf0 <raise>:
 8010cf0:	4b02      	ldr	r3, [pc, #8]	; (8010cfc <raise+0xc>)
 8010cf2:	4601      	mov	r1, r0
 8010cf4:	6818      	ldr	r0, [r3, #0]
 8010cf6:	f7ff bfd3 	b.w	8010ca0 <_raise_r>
 8010cfa:	bf00      	nop
 8010cfc:	24000030 	.word	0x24000030

08010d00 <_kill_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	4d07      	ldr	r5, [pc, #28]	; (8010d20 <_kill_r+0x20>)
 8010d04:	2300      	movs	r3, #0
 8010d06:	4604      	mov	r4, r0
 8010d08:	4608      	mov	r0, r1
 8010d0a:	4611      	mov	r1, r2
 8010d0c:	602b      	str	r3, [r5, #0]
 8010d0e:	f7f0 fc7f 	bl	8001610 <_kill>
 8010d12:	1c43      	adds	r3, r0, #1
 8010d14:	d102      	bne.n	8010d1c <_kill_r+0x1c>
 8010d16:	682b      	ldr	r3, [r5, #0]
 8010d18:	b103      	cbz	r3, 8010d1c <_kill_r+0x1c>
 8010d1a:	6023      	str	r3, [r4, #0]
 8010d1c:	bd38      	pop	{r3, r4, r5, pc}
 8010d1e:	bf00      	nop
 8010d20:	240010d8 	.word	0x240010d8

08010d24 <_getpid_r>:
 8010d24:	f7f0 bc6c 	b.w	8001600 <_getpid>

08010d28 <__sread>:
 8010d28:	b510      	push	{r4, lr}
 8010d2a:	460c      	mov	r4, r1
 8010d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d30:	f000 f894 	bl	8010e5c <_read_r>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	bfab      	itete	ge
 8010d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8010d3c:	181b      	addge	r3, r3, r0
 8010d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d42:	bfac      	ite	ge
 8010d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d46:	81a3      	strhlt	r3, [r4, #12]
 8010d48:	bd10      	pop	{r4, pc}

08010d4a <__swrite>:
 8010d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4e:	461f      	mov	r7, r3
 8010d50:	898b      	ldrh	r3, [r1, #12]
 8010d52:	05db      	lsls	r3, r3, #23
 8010d54:	4605      	mov	r5, r0
 8010d56:	460c      	mov	r4, r1
 8010d58:	4616      	mov	r6, r2
 8010d5a:	d505      	bpl.n	8010d68 <__swrite+0x1e>
 8010d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d60:	2302      	movs	r3, #2
 8010d62:	2200      	movs	r2, #0
 8010d64:	f000 f868 	bl	8010e38 <_lseek_r>
 8010d68:	89a3      	ldrh	r3, [r4, #12]
 8010d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d72:	81a3      	strh	r3, [r4, #12]
 8010d74:	4632      	mov	r2, r6
 8010d76:	463b      	mov	r3, r7
 8010d78:	4628      	mov	r0, r5
 8010d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7e:	f000 b817 	b.w	8010db0 <_write_r>

08010d82 <__sseek>:
 8010d82:	b510      	push	{r4, lr}
 8010d84:	460c      	mov	r4, r1
 8010d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d8a:	f000 f855 	bl	8010e38 <_lseek_r>
 8010d8e:	1c43      	adds	r3, r0, #1
 8010d90:	89a3      	ldrh	r3, [r4, #12]
 8010d92:	bf15      	itete	ne
 8010d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d9e:	81a3      	strheq	r3, [r4, #12]
 8010da0:	bf18      	it	ne
 8010da2:	81a3      	strhne	r3, [r4, #12]
 8010da4:	bd10      	pop	{r4, pc}

08010da6 <__sclose>:
 8010da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010daa:	f000 b813 	b.w	8010dd4 <_close_r>
	...

08010db0 <_write_r>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	4d07      	ldr	r5, [pc, #28]	; (8010dd0 <_write_r+0x20>)
 8010db4:	4604      	mov	r4, r0
 8010db6:	4608      	mov	r0, r1
 8010db8:	4611      	mov	r1, r2
 8010dba:	2200      	movs	r2, #0
 8010dbc:	602a      	str	r2, [r5, #0]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	f7f0 fc5d 	bl	800167e <_write>
 8010dc4:	1c43      	adds	r3, r0, #1
 8010dc6:	d102      	bne.n	8010dce <_write_r+0x1e>
 8010dc8:	682b      	ldr	r3, [r5, #0]
 8010dca:	b103      	cbz	r3, 8010dce <_write_r+0x1e>
 8010dcc:	6023      	str	r3, [r4, #0]
 8010dce:	bd38      	pop	{r3, r4, r5, pc}
 8010dd0:	240010d8 	.word	0x240010d8

08010dd4 <_close_r>:
 8010dd4:	b538      	push	{r3, r4, r5, lr}
 8010dd6:	4d06      	ldr	r5, [pc, #24]	; (8010df0 <_close_r+0x1c>)
 8010dd8:	2300      	movs	r3, #0
 8010dda:	4604      	mov	r4, r0
 8010ddc:	4608      	mov	r0, r1
 8010dde:	602b      	str	r3, [r5, #0]
 8010de0:	f7f0 fc69 	bl	80016b6 <_close>
 8010de4:	1c43      	adds	r3, r0, #1
 8010de6:	d102      	bne.n	8010dee <_close_r+0x1a>
 8010de8:	682b      	ldr	r3, [r5, #0]
 8010dea:	b103      	cbz	r3, 8010dee <_close_r+0x1a>
 8010dec:	6023      	str	r3, [r4, #0]
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	240010d8 	.word	0x240010d8

08010df4 <_fstat_r>:
 8010df4:	b538      	push	{r3, r4, r5, lr}
 8010df6:	4d07      	ldr	r5, [pc, #28]	; (8010e14 <_fstat_r+0x20>)
 8010df8:	2300      	movs	r3, #0
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	4608      	mov	r0, r1
 8010dfe:	4611      	mov	r1, r2
 8010e00:	602b      	str	r3, [r5, #0]
 8010e02:	f7f0 fc64 	bl	80016ce <_fstat>
 8010e06:	1c43      	adds	r3, r0, #1
 8010e08:	d102      	bne.n	8010e10 <_fstat_r+0x1c>
 8010e0a:	682b      	ldr	r3, [r5, #0]
 8010e0c:	b103      	cbz	r3, 8010e10 <_fstat_r+0x1c>
 8010e0e:	6023      	str	r3, [r4, #0]
 8010e10:	bd38      	pop	{r3, r4, r5, pc}
 8010e12:	bf00      	nop
 8010e14:	240010d8 	.word	0x240010d8

08010e18 <_isatty_r>:
 8010e18:	b538      	push	{r3, r4, r5, lr}
 8010e1a:	4d06      	ldr	r5, [pc, #24]	; (8010e34 <_isatty_r+0x1c>)
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	4604      	mov	r4, r0
 8010e20:	4608      	mov	r0, r1
 8010e22:	602b      	str	r3, [r5, #0]
 8010e24:	f7f0 fc63 	bl	80016ee <_isatty>
 8010e28:	1c43      	adds	r3, r0, #1
 8010e2a:	d102      	bne.n	8010e32 <_isatty_r+0x1a>
 8010e2c:	682b      	ldr	r3, [r5, #0]
 8010e2e:	b103      	cbz	r3, 8010e32 <_isatty_r+0x1a>
 8010e30:	6023      	str	r3, [r4, #0]
 8010e32:	bd38      	pop	{r3, r4, r5, pc}
 8010e34:	240010d8 	.word	0x240010d8

08010e38 <_lseek_r>:
 8010e38:	b538      	push	{r3, r4, r5, lr}
 8010e3a:	4d07      	ldr	r5, [pc, #28]	; (8010e58 <_lseek_r+0x20>)
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	4608      	mov	r0, r1
 8010e40:	4611      	mov	r1, r2
 8010e42:	2200      	movs	r2, #0
 8010e44:	602a      	str	r2, [r5, #0]
 8010e46:	461a      	mov	r2, r3
 8010e48:	f7f0 fc5c 	bl	8001704 <_lseek>
 8010e4c:	1c43      	adds	r3, r0, #1
 8010e4e:	d102      	bne.n	8010e56 <_lseek_r+0x1e>
 8010e50:	682b      	ldr	r3, [r5, #0]
 8010e52:	b103      	cbz	r3, 8010e56 <_lseek_r+0x1e>
 8010e54:	6023      	str	r3, [r4, #0]
 8010e56:	bd38      	pop	{r3, r4, r5, pc}
 8010e58:	240010d8 	.word	0x240010d8

08010e5c <_read_r>:
 8010e5c:	b538      	push	{r3, r4, r5, lr}
 8010e5e:	4d07      	ldr	r5, [pc, #28]	; (8010e7c <_read_r+0x20>)
 8010e60:	4604      	mov	r4, r0
 8010e62:	4608      	mov	r0, r1
 8010e64:	4611      	mov	r1, r2
 8010e66:	2200      	movs	r2, #0
 8010e68:	602a      	str	r2, [r5, #0]
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	f7f0 fbea 	bl	8001644 <_read>
 8010e70:	1c43      	adds	r3, r0, #1
 8010e72:	d102      	bne.n	8010e7a <_read_r+0x1e>
 8010e74:	682b      	ldr	r3, [r5, #0]
 8010e76:	b103      	cbz	r3, 8010e7a <_read_r+0x1e>
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	bd38      	pop	{r3, r4, r5, pc}
 8010e7c:	240010d8 	.word	0x240010d8

08010e80 <_init>:
 8010e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e82:	bf00      	nop
 8010e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e86:	bc08      	pop	{r3}
 8010e88:	469e      	mov	lr, r3
 8010e8a:	4770      	bx	lr

08010e8c <_fini>:
 8010e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8e:	bf00      	nop
 8010e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e92:	bc08      	pop	{r3}
 8010e94:	469e      	mov	lr, r3
 8010e96:	4770      	bx	lr
