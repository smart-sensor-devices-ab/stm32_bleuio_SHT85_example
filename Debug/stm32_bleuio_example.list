
stm32_bleuio_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800cca8  0800cca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce28  0800ce28  0001ce28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce30  0800ce30  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  0800ce38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000094  0800cecc  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f4  0800cf2c  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  24000154  0800cf8c  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000ed4  0800cf8c  00020ed4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fe09  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b5e  00000000  00000000  0004ff8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00054af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00055e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a157  00000000  00000000  00056fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6be  00000000  00000000  0009110f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00161498  00000000  00000000  000ab7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020cc65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  0020ccb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cc90 	.word	0x0800cc90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	0800cc90 	.word	0x0800cc90

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fde4 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f85c 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f972 	bl	800097c <MX_GPIO_Init>
  MX_ETH_Init();
 8000698:	f000 f8d8 	bl	800084c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f922 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 80006a0:	f00b faf4 	bl	800bc8c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  isBleuIOReady = false;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <main+0xa0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
  uartStatus = UART_RX_NONE;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <main+0xa4>)
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	701a      	strb	r2, [r3, #0]

  // Starts uart recieve interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 80006b0:	2201      	movs	r2, #1
 80006b2:	491f      	ldr	r1, [pc, #124]	; (8000730 <main+0xa8>)
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <main+0xac>)
 80006b6:	f006 fc89 	bl	8006fcc <HAL_UART_Receive_IT>

  // Turns on all LEDs on start up
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2101      	movs	r1, #1
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <main+0xb0>)
 80006c0:	f002 fad8 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2102      	movs	r1, #2
 80006c8:	481c      	ldr	r0, [pc, #112]	; (800073c <main+0xb4>)
 80006ca:	f002 fad3 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d4:	4818      	ldr	r0, [pc, #96]	; (8000738 <main+0xb0>)
 80006d6:	f002 facd 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006de:	f000 fe4d 	bl	800137c <HAL_Delay>

  // Turns off all LEDs except Red
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2101      	movs	r1, #1
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <main+0xb0>)
 80006e8:	f002 fac4 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2102      	movs	r1, #2
 80006f0:	4812      	ldr	r0, [pc, #72]	; (800073c <main+0xb4>)
 80006f2:	f002 fabf 	bl	8002c74 <HAL_GPIO_WritePin>

  // Sends welcome message to uart
  uart_buf_len = sprintf(uart_tx_buf, "\r\nWelcome to STM32 BleuIO Example!\r\nPress 0 to run the ATI command\r\nPress 1 to start advertising\r\nPress 2 to stop advertising\r\n");
 80006f6:	4912      	ldr	r1, [pc, #72]	; (8000740 <main+0xb8>)
 80006f8:	4812      	ldr	r0, [pc, #72]	; (8000744 <main+0xbc>)
 80006fa:	f00b ff55 	bl	800c5a8 <siprintf>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a11      	ldr	r2, [pc, #68]	; (8000748 <main+0xc0>)
 8000702:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <main+0xc0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	b29a      	uxth	r2, r3
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <main+0xbc>)
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <main+0xac>)
 8000712:	f006 fbc5 	bl	8006ea0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000716:	f00b fadf 	bl	800bcd8 <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */
    // Our own handler for uart input
    handleUartInput(uartStatus);
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <main+0xa4>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fa44 	bl	8000bac <handleUartInput>
    MX_USB_HOST_Process();
 8000724:	e7f7      	b.n	8000716 <main+0x8e>
 8000726:	bf00      	nop
 8000728:	24000324 	.word	0x24000324
 800072c:	2400026a 	.word	0x2400026a
 8000730:	2400026c 	.word	0x2400026c
 8000734:	24000290 	.word	0x24000290
 8000738:	58020400 	.word	0x58020400
 800073c:	58021000 	.word	0x58021000
 8000740:	0800cca8 	.word	0x0800cca8
 8000744:	24000170 	.word	0x24000170
 8000748:	24000320 	.word	0x24000320

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b09c      	sub	sp, #112	; 0x70
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	224c      	movs	r2, #76	; 0x4c
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00b fe62 	bl	800c424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f00b fe5c 	bl	800c424 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800076c:	2002      	movs	r0, #2
 800076e:	f003 ffff 	bl	8004770 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b33      	ldr	r3, [pc, #204]	; (8000844 <SystemClock_Config+0xf8>)
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	4a32      	ldr	r2, [pc, #200]	; (8000844 <SystemClock_Config+0xf8>)
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <SystemClock_Config+0xf8>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <SystemClock_Config+0xfc>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000794:	4a2c      	ldr	r2, [pc, #176]	; (8000848 <SystemClock_Config+0xfc>)
 8000796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <SystemClock_Config+0xfc>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a8:	bf00      	nop
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <SystemClock_Config+0xfc>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b6:	d1f8      	bne.n	80007aa <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007b8:	2303      	movs	r3, #3
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c6:	2340      	movs	r3, #64	; 0x40
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007d6:	2318      	movs	r3, #24
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e6:	230c      	movs	r3, #12
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 f804 	bl	8004804 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000802:	f000 fa8f 	bl	8000d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	233f      	movs	r3, #63	; 0x3f
 8000808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fbfa 	bl	8005024 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000836:	f000 fa75 	bl	8000d24 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3770      	adds	r7, #112	; 0x70
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58000400 	.word	0x58000400
 8000848:	58024800 	.word	0x58024800

0800084c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ETH_Init+0x80>)
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <MX_ETH_Init+0x84>)
 8000854:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_ETH_Init+0x88>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_ETH_Init+0x88>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_ETH_Init+0x88>)
 8000864:	22e1      	movs	r2, #225	; 0xe1
 8000866:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_ETH_Init+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_ETH_Init+0x88>)
 8000870:	2200      	movs	r2, #0
 8000872:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_ETH_Init+0x88>)
 8000876:	2200      	movs	r2, #0
 8000878:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ETH_Init+0x80>)
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_ETH_Init+0x88>)
 800087e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_ETH_Init+0x80>)
 8000882:	2201      	movs	r2, #1
 8000884:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_ETH_Init+0x80>)
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_ETH_Init+0x8c>)
 800088a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ETH_Init+0x80>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_ETH_Init+0x90>)
 8000890:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_ETH_Init+0x80>)
 8000894:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000898:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ETH_Init+0x80>)
 800089c:	f001 fc24 	bl	80020e8 <HAL_ETH_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008a6:	f000 fa3d 	bl	8000d24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008aa:	2234      	movs	r2, #52	; 0x34
 80008ac:	2100      	movs	r1, #0
 80008ae:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_ETH_Init+0x94>)
 80008b0:	f00b fdb8 	bl	800c424 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_ETH_Init+0x94>)
 80008b6:	2221      	movs	r2, #33	; 0x21
 80008b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_ETH_Init+0x94>)
 80008bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_ETH_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000328 	.word	0x24000328
 80008d0:	40028000 	.word	0x40028000
 80008d4:	24000274 	.word	0x24000274
 80008d8:	240000f4 	.word	0x240000f4
 80008dc:	24000094 	.word	0x24000094
 80008e0:	240003b0 	.word	0x240003b0

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_USART3_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_USART3_UART_Init+0x90>)
 800092e:	f006 fa67 	bl	8006e00 <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f9f4 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000940:	f008 f985 	bl	8008c4e <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f9eb 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000952:	f008 f9ba 	bl	8008cca <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f9e2 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_USART3_UART_Init+0x90>)
 8000962:	f008 f93b 	bl	8008bdc <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f9da 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000290 	.word	0x24000290
 8000978:	40004800 	.word	0x40004800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b61      	ldr	r3, [pc, #388]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a5f      	ldr	r2, [pc, #380]	; (8000b18 <MX_GPIO_Init+0x19c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b5d      	ldr	r3, [pc, #372]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b0:	4b59      	ldr	r3, [pc, #356]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a58      	ldr	r2, [pc, #352]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b55      	ldr	r3, [pc, #340]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b52      	ldr	r3, [pc, #328]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a50      	ldr	r2, [pc, #320]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b4e      	ldr	r3, [pc, #312]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a49      	ldr	r2, [pc, #292]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <MX_GPIO_Init+0x19c>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a41      	ldr	r2, [pc, #260]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a28:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	4a3a      	ldr	r2, [pc, #232]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a38:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_GPIO_Init+0x19c>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a6a:	482c      	ldr	r0, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x1a0>)
 8000a6c:	f002 f902 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	482a      	ldr	r0, [pc, #168]	; (8000b20 <MX_GPIO_Init+0x1a4>)
 8000a78:	f002 f8fc 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4828      	ldr	r0, [pc, #160]	; (8000b24 <MX_GPIO_Init+0x1a8>)
 8000a82:	f002 f8f7 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4823      	ldr	r0, [pc, #140]	; (8000b28 <MX_GPIO_Init+0x1ac>)
 8000a9c:	f001 ff3a 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x1a0>)
 8000aba:	f001 ff2b 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <MX_GPIO_Init+0x1a4>)
 8000ad8:	f001 ff1c 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_GPIO_Init+0x1b0>)
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_GPIO_Init+0x1b4>)
 8000af0:	f001 ff10 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_GPIO_Init+0x1a8>)
 8000b0c:	f001 ff02 	bl	8002914 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020400 	.word	0x58020400
 8000b20:	58020c00 	.word	0x58020c00
 8000b24:	58021000 	.word	0x58021000
 8000b28:	58020800 	.word	0x58020800
 8000b2c:	11110000 	.word	0x11110000
 8000b30:	58021800 	.word	0x58021800

08000b34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if(UartHandle == &huart3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_UART_RxCpltCallback+0x68>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d127      	bne.n	8000b94 <HAL_UART_RxCpltCallback+0x60>
	{
		RX_value = (int)aRxBuffer[0];
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b4c:	601a      	str	r2, [r3, #0]
		uartStatus = UART_RX_NONE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	701a      	strb	r2, [r3, #0]

		switch(RX_value)
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_UART_RxCpltCallback+0x70>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b32      	cmp	r3, #50	; 0x32
 8000b5a:	d00e      	beq.n	8000b7a <HAL_UART_RxCpltCallback+0x46>
 8000b5c:	2b32      	cmp	r3, #50	; 0x32
 8000b5e:	dc10      	bgt.n	8000b82 <HAL_UART_RxCpltCallback+0x4e>
 8000b60:	2b30      	cmp	r3, #48	; 0x30
 8000b62:	d002      	beq.n	8000b6a <HAL_UART_RxCpltCallback+0x36>
 8000b64:	2b31      	cmp	r3, #49	; 0x31
 8000b66:	d004      	beq.n	8000b72 <HAL_UART_RxCpltCallback+0x3e>
 8000b68:	e00b      	b.n	8000b82 <HAL_UART_RxCpltCallback+0x4e>
		{
			case UART_RX_0:
			{
				uartStatus = UART_RX_0;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b6c:	2230      	movs	r2, #48	; 0x30
 8000b6e:	701a      	strb	r2, [r3, #0]
				break;
 8000b70:	e00b      	b.n	8000b8a <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_1:
			{
				uartStatus = UART_RX_1;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b74:	2231      	movs	r2, #49	; 0x31
 8000b76:	701a      	strb	r2, [r3, #0]
				break;
 8000b78:	e007      	b.n	8000b8a <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_2:
			{
				uartStatus = UART_RX_2;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b7c:	2232      	movs	r2, #50	; 0x32
 8000b7e:	701a      	strb	r2, [r3, #0]
				break;
 8000b80:	e003      	b.n	8000b8a <HAL_UART_RxCpltCallback+0x56>
			}
			default:
			{
				uartStatus = UART_RX_NONE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_UART_RxCpltCallback+0x74>)
 8000b84:	22ff      	movs	r2, #255	; 0xff
 8000b86:	701a      	strb	r2, [r3, #0]
				break;
 8000b88:	bf00      	nop
			}
		}
		// Resets uart recieve interrupt mode
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4904      	ldr	r1, [pc, #16]	; (8000ba0 <HAL_UART_RxCpltCallback+0x6c>)
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <HAL_UART_RxCpltCallback+0x68>)
 8000b90:	f006 fa1c 	bl	8006fcc <HAL_UART_Receive_IT>
	}
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000290 	.word	0x24000290
 8000ba0:	2400026c 	.word	0x2400026c
 8000ba4:	24000270 	.word	0x24000270
 8000ba8:	2400026a 	.word	0x2400026a

08000bac <handleUartInput>:
/**
  * @brief Simple uart input handler
  * @retval None
  */
void handleUartInput(UARTCommandTypeDef cmd)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	switch(cmd)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2bff      	cmp	r3, #255	; 0xff
 8000bba:	f000 8095 	beq.w	8000ce8 <handleUartInput+0x13c>
 8000bbe:	2bff      	cmp	r3, #255	; 0xff
 8000bc0:	f300 808e 	bgt.w	8000ce0 <handleUartInput+0x134>
 8000bc4:	2b32      	cmp	r3, #50	; 0x32
 8000bc6:	d05f      	beq.n	8000c88 <handleUartInput+0xdc>
 8000bc8:	2b32      	cmp	r3, #50	; 0x32
 8000bca:	f300 8089 	bgt.w	8000ce0 <handleUartInput+0x134>
 8000bce:	2b30      	cmp	r3, #48	; 0x30
 8000bd0:	d002      	beq.n	8000bd8 <handleUartInput+0x2c>
 8000bd2:	2b31      	cmp	r3, #49	; 0x31
 8000bd4:	d02c      	beq.n	8000c30 <handleUartInput+0x84>
 8000bd6:	e083      	b.n	8000ce0 <handleUartInput+0x134>
	{
		case UART_RX_0:
		{
			// 0
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(0 pressed)\r\n");
 8000bd8:	4946      	ldr	r1, [pc, #280]	; (8000cf4 <handleUartInput+0x148>)
 8000bda:	4847      	ldr	r0, [pc, #284]	; (8000cf8 <handleUartInput+0x14c>)
 8000bdc:	f00b fce4 	bl	800c5a8 <siprintf>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a46      	ldr	r2, [pc, #280]	; (8000cfc <handleUartInput+0x150>)
 8000be4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000be6:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <handleUartInput+0x150>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	4941      	ldr	r1, [pc, #260]	; (8000cf8 <handleUartInput+0x14c>)
 8000bf2:	4843      	ldr	r0, [pc, #268]	; (8000d00 <handleUartInput+0x154>)
 8000bf4:	f006 f954 	bl	8006ea0 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000bf8:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <handleUartInput+0x158>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <handleUartInput+0x5c>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_ATI);
 8000c00:	4841      	ldr	r0, [pc, #260]	; (8000d08 <handleUartInput+0x15c>)
 8000c02:	f00b f82f 	bl	800bc64 <writeToDongle>
 8000c06:	e00f      	b.n	8000c28 <handleUartInput+0x7c>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000c08:	4940      	ldr	r1, [pc, #256]	; (8000d0c <handleUartInput+0x160>)
 8000c0a:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <handleUartInput+0x14c>)
 8000c0c:	f00b fccc 	bl	800c5a8 <siprintf>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a3a      	ldr	r2, [pc, #232]	; (8000cfc <handleUartInput+0x150>)
 8000c14:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000c16:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <handleUartInput+0x150>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	4935      	ldr	r1, [pc, #212]	; (8000cf8 <handleUartInput+0x14c>)
 8000c22:	4837      	ldr	r0, [pc, #220]	; (8000d00 <handleUartInput+0x154>)
 8000c24:	f006 f93c 	bl	8006ea0 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000c28:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <handleUartInput+0x164>)
 8000c2a:	22ff      	movs	r2, #255	; 0xff
 8000c2c:	701a      	strb	r2, [r3, #0]
			break;
 8000c2e:	e05c      	b.n	8000cea <handleUartInput+0x13e>
		}
		case UART_RX_1:
		{
			// 1
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(1 pressed)\r\n");
 8000c30:	4938      	ldr	r1, [pc, #224]	; (8000d14 <handleUartInput+0x168>)
 8000c32:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <handleUartInput+0x14c>)
 8000c34:	f00b fcb8 	bl	800c5a8 <siprintf>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4a30      	ldr	r2, [pc, #192]	; (8000cfc <handleUartInput+0x150>)
 8000c3c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <handleUartInput+0x150>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	492b      	ldr	r1, [pc, #172]	; (8000cf8 <handleUartInput+0x14c>)
 8000c4a:	482d      	ldr	r0, [pc, #180]	; (8000d00 <handleUartInput+0x154>)
 8000c4c:	f006 f928 	bl	8006ea0 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <handleUartInput+0x158>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <handleUartInput+0xb4>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 8000c58:	482f      	ldr	r0, [pc, #188]	; (8000d18 <handleUartInput+0x16c>)
 8000c5a:	f00b f803 	bl	800bc64 <writeToDongle>
 8000c5e:	e00f      	b.n	8000c80 <handleUartInput+0xd4>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000c60:	492a      	ldr	r1, [pc, #168]	; (8000d0c <handleUartInput+0x160>)
 8000c62:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <handleUartInput+0x14c>)
 8000c64:	f00b fca0 	bl	800c5a8 <siprintf>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <handleUartInput+0x150>)
 8000c6c:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <handleUartInput+0x150>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	491f      	ldr	r1, [pc, #124]	; (8000cf8 <handleUartInput+0x14c>)
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <handleUartInput+0x154>)
 8000c7c:	f006 f910 	bl	8006ea0 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <handleUartInput+0x164>)
 8000c82:	22ff      	movs	r2, #255	; 0xff
 8000c84:	701a      	strb	r2, [r3, #0]
			break;
 8000c86:	e030      	b.n	8000cea <handleUartInput+0x13e>
		}
		case UART_RX_2:
		{
			// 2
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(2 pressed)\r\n");
 8000c88:	4924      	ldr	r1, [pc, #144]	; (8000d1c <handleUartInput+0x170>)
 8000c8a:	481b      	ldr	r0, [pc, #108]	; (8000cf8 <handleUartInput+0x14c>)
 8000c8c:	f00b fc8c 	bl	800c5a8 <siprintf>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <handleUartInput+0x150>)
 8000c94:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <handleUartInput+0x150>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	4915      	ldr	r1, [pc, #84]	; (8000cf8 <handleUartInput+0x14c>)
 8000ca2:	4817      	ldr	r0, [pc, #92]	; (8000d00 <handleUartInput+0x154>)
 8000ca4:	f006 f8fc 	bl	8006ea0 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <handleUartInput+0x158>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <handleUartInput+0x10c>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTOP);
 8000cb0:	481b      	ldr	r0, [pc, #108]	; (8000d20 <handleUartInput+0x174>)
 8000cb2:	f00a ffd7 	bl	800bc64 <writeToDongle>
 8000cb6:	e00f      	b.n	8000cd8 <handleUartInput+0x12c>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000cb8:	4914      	ldr	r1, [pc, #80]	; (8000d0c <handleUartInput+0x160>)
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <handleUartInput+0x14c>)
 8000cbc:	f00b fc74 	bl	800c5a8 <siprintf>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <handleUartInput+0x150>)
 8000cc4:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <handleUartInput+0x150>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	4909      	ldr	r1, [pc, #36]	; (8000cf8 <handleUartInput+0x14c>)
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <handleUartInput+0x154>)
 8000cd4:	f006 f8e4 	bl	8006ea0 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <handleUartInput+0x164>)
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	701a      	strb	r2, [r3, #0]
			break;
 8000cde:	e004      	b.n	8000cea <handleUartInput+0x13e>
		{
			break;
		}
		default:
		{
			uartStatus = UART_RX_NONE;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <handleUartInput+0x164>)
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	701a      	strb	r2, [r3, #0]
			break;
 8000ce6:	e000      	b.n	8000cea <handleUartInput+0x13e>
			break;
 8000ce8:	bf00      	nop
		}
	}
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800cd28 	.word	0x0800cd28
 8000cf8:	24000170 	.word	0x24000170
 8000cfc:	24000320 	.word	0x24000320
 8000d00:	24000290 	.word	0x24000290
 8000d04:	24000324 	.word	0x24000324
 8000d08:	0800cd38 	.word	0x0800cd38
 8000d0c:	0800cd40 	.word	0x0800cd40
 8000d10:	2400026a 	.word	0x2400026a
 8000d14:	0800cd5c 	.word	0x0800cd5c
 8000d18:	0800cd6c 	.word	0x0800cd6c
 8000d1c:	0800cd7c 	.word	0x0800cd7c
 8000d20:	0800cd8c 	.word	0x0800cd8c

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x30>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x30>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	58024400 	.word	0x58024400

08000d64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a59      	ldr	r2, [pc, #356]	; (8000ee8 <HAL_ETH_MspInit+0x184>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	f040 80ab 	bne.w	8000ede <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d88:	4b58      	ldr	r3, [pc, #352]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8e:	4a57      	ldr	r2, [pc, #348]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d98:	4b54      	ldr	r3, [pc, #336]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da2:	623b      	str	r3, [r7, #32]
 8000da4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000da6:	4b51      	ldr	r3, [pc, #324]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dac:	4a4f      	ldr	r2, [pc, #316]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000db6:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dc4:	4b49      	ldr	r3, [pc, #292]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dca:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd4:	4b45      	ldr	r3, [pc, #276]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b42      	ldr	r3, [pc, #264]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	4a40      	ldr	r2, [pc, #256]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df2:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	4a39      	ldr	r2, [pc, #228]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e10:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a2a      	ldr	r2, [pc, #168]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <HAL_ETH_MspInit+0x188>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e5a:	2332      	movs	r3, #50	; 0x32
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <HAL_ETH_MspInit+0x18c>)
 8000e76:	f001 fd4d 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e7a:	2386      	movs	r3, #134	; 0x86
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8a:	230b      	movs	r3, #11
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <HAL_ETH_MspInit+0x190>)
 8000e96:	f001 fd3d 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eac:	230b      	movs	r3, #11
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <HAL_ETH_MspInit+0x194>)
 8000eb8:	f001 fd2c 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ebc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ece:	230b      	movs	r3, #11
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <HAL_ETH_MspInit+0x198>)
 8000eda:	f001 fd1b 	bl	8002914 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3738      	adds	r7, #56	; 0x38
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40028000 	.word	0x40028000
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58020800 	.word	0x58020800
 8000ef4:	58020000 	.word	0x58020000
 8000ef8:	58020400 	.word	0x58020400
 8000efc:	58021800 	.word	0x58021800

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0b8      	sub	sp, #224	; 0xe0
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	22bc      	movs	r2, #188	; 0xbc
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00b fa7f 	bl	800c424 <memset>
  if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d14a      	bne.n	8000fc6 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fbfc 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f4a:	f7ff feeb 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <HAL_UART_MspInit+0xd4>)
 8000f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <HAL_UART_MspInit+0xd4>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_UART_MspInit+0xd4>)
 8000f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0xd4>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0xd4>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_UART_MspInit+0xd4>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000faa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <HAL_UART_MspInit+0xd8>)
 8000fb2:	f001 fcaf 	bl	8002914 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2027      	movs	r0, #39	; 0x27
 8000fbc:	f000 fafd 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fc0:	2027      	movs	r0, #39	; 0x27
 8000fc2:	f000 fb14 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	37e0      	adds	r7, #224	; 0xe0
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40004800 	.word	0x40004800
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020c00 	.word	0x58020c00

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f988 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <USART3_IRQHandler+0x10>)
 8001036:	f006 f80f 	bl	8007058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	24000290 	.word	0x24000290

08001044 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800104a:	f002 f897 	bl	800317c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000bc0 	.word	0x24000bc0

08001058 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 800105e:	f002 f88d 	bl	800317c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	24000bc0 	.word	0x24000bc0

0800106c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <OTG_FS_IRQHandler+0x10>)
 8001072:	f002 f883 	bl	800317c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	24000bc0 	.word	0x24000bc0

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f00b f97e 	bl	800c3b0 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	24080000 	.word	0x24080000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	2400027c 	.word	0x2400027c
 80010e8:	24000ed8 	.word	0x24000ed8

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <SystemInit+0xec>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <SystemInit+0xec>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <SystemInit+0xf0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	2b06      	cmp	r3, #6
 800110a:	d807      	bhi.n	800111c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <SystemInit+0xf0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 030f 	bic.w	r3, r3, #15
 8001114:	4a31      	ldr	r2, [pc, #196]	; (80011dc <SystemInit+0xf0>)
 8001116:	f043 0307 	orr.w	r3, r3, #7
 800111a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <SystemInit+0xf4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <SystemInit+0xf4>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <SystemInit+0xf4>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112e:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <SystemInit+0xf4>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	492b      	ldr	r1, [pc, #172]	; (80011e0 <SystemInit+0xf4>)
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <SystemInit+0xf8>)
 8001136:	4013      	ands	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <SystemInit+0xf0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemInit+0xf0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 030f 	bic.w	r3, r3, #15
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <SystemInit+0xf0>)
 8001150:	f043 0307 	orr.w	r3, r3, #7
 8001154:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <SystemInit+0xf4>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <SystemInit+0xf4>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <SystemInit+0xf4>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <SystemInit+0xf4>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <SystemInit+0xfc>)
 800116c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <SystemInit+0xf4>)
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <SystemInit+0x100>)
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <SystemInit+0xf4>)
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <SystemInit+0x104>)
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <SystemInit+0xf4>)
 800117c:	2200      	movs	r2, #0
 800117e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <SystemInit+0xf4>)
 8001182:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <SystemInit+0x104>)
 8001184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <SystemInit+0xf4>)
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <SystemInit+0xf4>)
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <SystemInit+0x104>)
 8001190:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <SystemInit+0xf4>)
 8001194:	2200      	movs	r2, #0
 8001196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <SystemInit+0xf4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <SystemInit+0xf4>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <SystemInit+0xf4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <SystemInit+0x108>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <SystemInit+0x10c>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b6:	d202      	bcs.n	80011be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <SystemInit+0x110>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <SystemInit+0x114>)
 80011c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SystemInit+0xec>)
 80011c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	52002000 	.word	0x52002000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011e8:	02020200 	.word	0x02020200
 80011ec:	01ff0000 	.word	0x01ff0000
 80011f0:	01010280 	.word	0x01010280
 80011f4:	5c001000 	.word	0x5c001000
 80011f8:	ffff0000 	.word	0xffff0000
 80011fc:	51008108 	.word	0x51008108
 8001200:	52004000 	.word	0x52004000

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001208:	f7ff ff70 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001232:	f00b f8c3 	bl	800c3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff fa27 	bl	8000688 <main>
  bx  lr
 800123a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001240:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001244:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001248:	0800ce38 	.word	0x0800ce38
  ldr r2, =_sbss
 800124c:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001250:	24000ed4 	.word	0x24000ed4

08001254 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC3_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125e:	2003      	movs	r0, #3
 8001260:	f000 f9a0 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001264:	f004 f894 	bl	8005390 <HAL_RCC_GetSysClockFreq>
 8001268:	4602      	mov	r2, r0
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_Init+0x68>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	4913      	ldr	r1, [pc, #76]	; (80012c4 <HAL_Init+0x6c>)
 8001276:	5ccb      	ldrb	r3, [r1, r3]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_Init+0x68>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_Init+0x6c>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_Init+0x70>)
 800129a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_Init+0x74>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f814 	bl	80012d0 <HAL_InitTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e002      	b.n	80012b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012b2:	f7ff fd3d 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	58024400 	.word	0x58024400
 80012c4:	0800cdbc 	.word	0x0800cdbc
 80012c8:	24000004 	.word	0x24000004
 80012cc:	24000000 	.word	0x24000000

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_InitTick+0x60>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e021      	b.n	8001328 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_InitTick+0x64>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_InitTick+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f985 	bl	800160a <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f94f 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x68>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2400000c 	.word	0x2400000c
 8001334:	24000000 	.word	0x24000000
 8001338:	24000008 	.word	0x24000008

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2400000c 	.word	0x2400000c
 8001360:	240003e4 	.word	0x240003e4

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	240003e4 	.word	0x240003e4

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2400000c 	.word	0x2400000c

080013c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetREVID+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0c1b      	lsrs	r3, r3, #16
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	5c001000 	.word	0x5c001000

080013dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80013ec:	4904      	ldr	r1, [pc, #16]	; (8001400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	58000400 	.word	0x58000400

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	4313      	orrs	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	05fa0000 	.word	0x05fa0000

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff40 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff33 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa4 	bl	8001560 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fe9a 	bl	8001364 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e2dc      	b.n	8001bf6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d008      	beq.n	800165a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e2cd      	b.n	8001bf6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a76      	ldr	r2, [pc, #472]	; (8001838 <HAL_DMA_Abort+0x214>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d04a      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a74      	ldr	r2, [pc, #464]	; (800183c <HAL_DMA_Abort+0x218>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d045      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a73      	ldr	r2, [pc, #460]	; (8001840 <HAL_DMA_Abort+0x21c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d040      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a71      	ldr	r2, [pc, #452]	; (8001844 <HAL_DMA_Abort+0x220>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d03b      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a70      	ldr	r2, [pc, #448]	; (8001848 <HAL_DMA_Abort+0x224>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d036      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_DMA_Abort+0x228>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d031      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6d      	ldr	r2, [pc, #436]	; (8001850 <HAL_DMA_Abort+0x22c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d02c      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <HAL_DMA_Abort+0x230>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d027      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6a      	ldr	r2, [pc, #424]	; (8001858 <HAL_DMA_Abort+0x234>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a68      	ldr	r2, [pc, #416]	; (800185c <HAL_DMA_Abort+0x238>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01d      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a67      	ldr	r2, [pc, #412]	; (8001860 <HAL_DMA_Abort+0x23c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a65      	ldr	r2, [pc, #404]	; (8001864 <HAL_DMA_Abort+0x240>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a64      	ldr	r2, [pc, #400]	; (8001868 <HAL_DMA_Abort+0x244>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00e      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a62      	ldr	r2, [pc, #392]	; (800186c <HAL_DMA_Abort+0x248>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d009      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a61      	ldr	r2, [pc, #388]	; (8001870 <HAL_DMA_Abort+0x24c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d004      	beq.n	80016fa <HAL_DMA_Abort+0xd6>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a5f      	ldr	r2, [pc, #380]	; (8001874 <HAL_DMA_Abort+0x250>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_DMA_Abort+0xda>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_DMA_Abort+0xdc>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 021e 	bic.w	r2, r2, #30
 8001712:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001722:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e00a      	b.n	8001742 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 020e 	bic.w	r2, r2, #14
 800173a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a3c      	ldr	r2, [pc, #240]	; (8001838 <HAL_DMA_Abort+0x214>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d072      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <HAL_DMA_Abort+0x218>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d06d      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a39      	ldr	r2, [pc, #228]	; (8001840 <HAL_DMA_Abort+0x21c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d068      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a37      	ldr	r2, [pc, #220]	; (8001844 <HAL_DMA_Abort+0x220>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d063      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a36      	ldr	r2, [pc, #216]	; (8001848 <HAL_DMA_Abort+0x224>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d05e      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a34      	ldr	r2, [pc, #208]	; (800184c <HAL_DMA_Abort+0x228>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d059      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a33      	ldr	r2, [pc, #204]	; (8001850 <HAL_DMA_Abort+0x22c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d054      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a31      	ldr	r2, [pc, #196]	; (8001854 <HAL_DMA_Abort+0x230>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d04f      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a30      	ldr	r2, [pc, #192]	; (8001858 <HAL_DMA_Abort+0x234>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d04a      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2e      	ldr	r2, [pc, #184]	; (800185c <HAL_DMA_Abort+0x238>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d045      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2d      	ldr	r2, [pc, #180]	; (8001860 <HAL_DMA_Abort+0x23c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d040      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <HAL_DMA_Abort+0x240>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d03b      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <HAL_DMA_Abort+0x244>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d036      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_DMA_Abort+0x248>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d031      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a27      	ldr	r2, [pc, #156]	; (8001870 <HAL_DMA_Abort+0x24c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d02c      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_DMA_Abort+0x250>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d027      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a24      	ldr	r2, [pc, #144]	; (8001878 <HAL_DMA_Abort+0x254>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_DMA_Abort+0x258>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01d      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_DMA_Abort+0x25c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d018      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_DMA_Abort+0x260>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <HAL_DMA_Abort+0x264>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00e      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_DMA_Abort+0x268>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d009      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <HAL_DMA_Abort+0x26c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_DMA_Abort+0x20e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_DMA_Abort+0x270>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d132      	bne.n	8001898 <HAL_DMA_Abort+0x274>
 8001832:	2301      	movs	r3, #1
 8001834:	e031      	b.n	800189a <HAL_DMA_Abort+0x276>
 8001836:	bf00      	nop
 8001838:	40020010 	.word	0x40020010
 800183c:	40020028 	.word	0x40020028
 8001840:	40020040 	.word	0x40020040
 8001844:	40020058 	.word	0x40020058
 8001848:	40020070 	.word	0x40020070
 800184c:	40020088 	.word	0x40020088
 8001850:	400200a0 	.word	0x400200a0
 8001854:	400200b8 	.word	0x400200b8
 8001858:	40020410 	.word	0x40020410
 800185c:	40020428 	.word	0x40020428
 8001860:	40020440 	.word	0x40020440
 8001864:	40020458 	.word	0x40020458
 8001868:	40020470 	.word	0x40020470
 800186c:	40020488 	.word	0x40020488
 8001870:	400204a0 	.word	0x400204a0
 8001874:	400204b8 	.word	0x400204b8
 8001878:	58025408 	.word	0x58025408
 800187c:	5802541c 	.word	0x5802541c
 8001880:	58025430 	.word	0x58025430
 8001884:	58025444 	.word	0x58025444
 8001888:	58025458 	.word	0x58025458
 800188c:	5802546c 	.word	0x5802546c
 8001890:	58025480 	.word	0x58025480
 8001894:	58025494 	.word	0x58025494
 8001898:	2300      	movs	r3, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6d      	ldr	r2, [pc, #436]	; (8001a68 <HAL_DMA_Abort+0x444>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d04a      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6b      	ldr	r2, [pc, #428]	; (8001a6c <HAL_DMA_Abort+0x448>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d045      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_DMA_Abort+0x44c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d040      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a68      	ldr	r2, [pc, #416]	; (8001a74 <HAL_DMA_Abort+0x450>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d03b      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a67      	ldr	r2, [pc, #412]	; (8001a78 <HAL_DMA_Abort+0x454>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d036      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a65      	ldr	r2, [pc, #404]	; (8001a7c <HAL_DMA_Abort+0x458>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d031      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a64      	ldr	r2, [pc, #400]	; (8001a80 <HAL_DMA_Abort+0x45c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d02c      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a62      	ldr	r2, [pc, #392]	; (8001a84 <HAL_DMA_Abort+0x460>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d027      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a61      	ldr	r2, [pc, #388]	; (8001a88 <HAL_DMA_Abort+0x464>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d022      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5f      	ldr	r2, [pc, #380]	; (8001a8c <HAL_DMA_Abort+0x468>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01d      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_DMA_Abort+0x46c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d018      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a5c      	ldr	r2, [pc, #368]	; (8001a94 <HAL_DMA_Abort+0x470>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_DMA_Abort+0x474>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00e      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a59      	ldr	r2, [pc, #356]	; (8001a9c <HAL_DMA_Abort+0x478>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d009      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_DMA_Abort+0x47c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d004      	beq.n	800194e <HAL_DMA_Abort+0x32a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_DMA_Abort+0x480>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d108      	bne.n	8001960 <HAL_DMA_Abort+0x33c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e007      	b.n	8001970 <HAL_DMA_Abort+0x34c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001970:	e013      	b.n	800199a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001972:	f7ff fcf7 	bl	8001364 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b05      	cmp	r3, #5
 800197e:	d90c      	bls.n	800199a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2220      	movs	r2, #32
 8001984:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e12d      	b.n	8001bf6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1e5      	bne.n	8001972 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2f      	ldr	r2, [pc, #188]	; (8001a68 <HAL_DMA_Abort+0x444>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d04a      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <HAL_DMA_Abort+0x448>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d045      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <HAL_DMA_Abort+0x44c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d040      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <HAL_DMA_Abort+0x450>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d03b      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_DMA_Abort+0x454>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d036      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <HAL_DMA_Abort+0x458>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d031      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a26      	ldr	r2, [pc, #152]	; (8001a80 <HAL_DMA_Abort+0x45c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d02c      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <HAL_DMA_Abort+0x460>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d027      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <HAL_DMA_Abort+0x464>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d022      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <HAL_DMA_Abort+0x468>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01d      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <HAL_DMA_Abort+0x46c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d018      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_DMA_Abort+0x470>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <HAL_DMA_Abort+0x474>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00e      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_DMA_Abort+0x478>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1a      	ldr	r2, [pc, #104]	; (8001aa0 <HAL_DMA_Abort+0x47c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d004      	beq.n	8001a46 <HAL_DMA_Abort+0x422>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_DMA_Abort+0x480>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Abort+0x426>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_Abort+0x428>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d02b      	beq.n	8001aa8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	223f      	movs	r2, #63	; 0x3f
 8001a60:	409a      	lsls	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	e02a      	b.n	8001abe <HAL_DMA_Abort+0x49a>
 8001a68:	40020010 	.word	0x40020010
 8001a6c:	40020028 	.word	0x40020028
 8001a70:	40020040 	.word	0x40020040
 8001a74:	40020058 	.word	0x40020058
 8001a78:	40020070 	.word	0x40020070
 8001a7c:	40020088 	.word	0x40020088
 8001a80:	400200a0 	.word	0x400200a0
 8001a84:	400200b8 	.word	0x400200b8
 8001a88:	40020410 	.word	0x40020410
 8001a8c:	40020428 	.word	0x40020428
 8001a90:	40020440 	.word	0x40020440
 8001a94:	40020458 	.word	0x40020458
 8001a98:	40020470 	.word	0x40020470
 8001a9c:	40020488 	.word	0x40020488
 8001aa0:	400204a0 	.word	0x400204a0
 8001aa4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_DMA_Abort+0x5dc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d072      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4d      	ldr	r2, [pc, #308]	; (8001c04 <HAL_DMA_Abort+0x5e0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d06d      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_DMA_Abort+0x5e4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d068      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a4a      	ldr	r2, [pc, #296]	; (8001c0c <HAL_DMA_Abort+0x5e8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d063      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a49      	ldr	r2, [pc, #292]	; (8001c10 <HAL_DMA_Abort+0x5ec>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d05e      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a47      	ldr	r2, [pc, #284]	; (8001c14 <HAL_DMA_Abort+0x5f0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d059      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a46      	ldr	r2, [pc, #280]	; (8001c18 <HAL_DMA_Abort+0x5f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d054      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a44      	ldr	r2, [pc, #272]	; (8001c1c <HAL_DMA_Abort+0x5f8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d04f      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a43      	ldr	r2, [pc, #268]	; (8001c20 <HAL_DMA_Abort+0x5fc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04a      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a41      	ldr	r2, [pc, #260]	; (8001c24 <HAL_DMA_Abort+0x600>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d045      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a40      	ldr	r2, [pc, #256]	; (8001c28 <HAL_DMA_Abort+0x604>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d040      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3e      	ldr	r2, [pc, #248]	; (8001c2c <HAL_DMA_Abort+0x608>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d03b      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3d      	ldr	r2, [pc, #244]	; (8001c30 <HAL_DMA_Abort+0x60c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d036      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a3b      	ldr	r2, [pc, #236]	; (8001c34 <HAL_DMA_Abort+0x610>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d031      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a3a      	ldr	r2, [pc, #232]	; (8001c38 <HAL_DMA_Abort+0x614>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d02c      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a38      	ldr	r2, [pc, #224]	; (8001c3c <HAL_DMA_Abort+0x618>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d027      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a37      	ldr	r2, [pc, #220]	; (8001c40 <HAL_DMA_Abort+0x61c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a35      	ldr	r2, [pc, #212]	; (8001c44 <HAL_DMA_Abort+0x620>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a34      	ldr	r2, [pc, #208]	; (8001c48 <HAL_DMA_Abort+0x624>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d018      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <HAL_DMA_Abort+0x628>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <HAL_DMA_Abort+0x62c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <HAL_DMA_Abort+0x630>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <HAL_DMA_Abort+0x634>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <HAL_DMA_Abort+0x58a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2c      	ldr	r2, [pc, #176]	; (8001c5c <HAL_DMA_Abort+0x638>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_DMA_Abort+0x58e>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_Abort+0x590>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d015      	beq.n	8001be4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bc0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00c      	beq.n	8001be4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001be2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40020010 	.word	0x40020010
 8001c04:	40020028 	.word	0x40020028
 8001c08:	40020040 	.word	0x40020040
 8001c0c:	40020058 	.word	0x40020058
 8001c10:	40020070 	.word	0x40020070
 8001c14:	40020088 	.word	0x40020088
 8001c18:	400200a0 	.word	0x400200a0
 8001c1c:	400200b8 	.word	0x400200b8
 8001c20:	40020410 	.word	0x40020410
 8001c24:	40020428 	.word	0x40020428
 8001c28:	40020440 	.word	0x40020440
 8001c2c:	40020458 	.word	0x40020458
 8001c30:	40020470 	.word	0x40020470
 8001c34:	40020488 	.word	0x40020488
 8001c38:	400204a0 	.word	0x400204a0
 8001c3c:	400204b8 	.word	0x400204b8
 8001c40:	58025408 	.word	0x58025408
 8001c44:	5802541c 	.word	0x5802541c
 8001c48:	58025430 	.word	0x58025430
 8001c4c:	58025444 	.word	0x58025444
 8001c50:	58025458 	.word	0x58025458
 8001c54:	5802546c 	.word	0x5802546c
 8001c58:	58025480 	.word	0x58025480
 8001c5c:	58025494 	.word	0x58025494

08001c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e205      	b.n	800207e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d004      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e1fa      	b.n	800207e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a8c      	ldr	r2, [pc, #560]	; (8001ec0 <HAL_DMA_Abort_IT+0x260>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d04a      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a8b      	ldr	r2, [pc, #556]	; (8001ec4 <HAL_DMA_Abort_IT+0x264>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d045      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a89      	ldr	r2, [pc, #548]	; (8001ec8 <HAL_DMA_Abort_IT+0x268>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d040      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a88      	ldr	r2, [pc, #544]	; (8001ecc <HAL_DMA_Abort_IT+0x26c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d03b      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a86      	ldr	r2, [pc, #536]	; (8001ed0 <HAL_DMA_Abort_IT+0x270>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d036      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a85      	ldr	r2, [pc, #532]	; (8001ed4 <HAL_DMA_Abort_IT+0x274>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d031      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a83      	ldr	r2, [pc, #524]	; (8001ed8 <HAL_DMA_Abort_IT+0x278>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02c      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a82      	ldr	r2, [pc, #520]	; (8001edc <HAL_DMA_Abort_IT+0x27c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d027      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a80      	ldr	r2, [pc, #512]	; (8001ee0 <HAL_DMA_Abort_IT+0x280>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d022      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7f      	ldr	r2, [pc, #508]	; (8001ee4 <HAL_DMA_Abort_IT+0x284>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d01d      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7d      	ldr	r2, [pc, #500]	; (8001ee8 <HAL_DMA_Abort_IT+0x288>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d018      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7c      	ldr	r2, [pc, #496]	; (8001eec <HAL_DMA_Abort_IT+0x28c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7a      	ldr	r2, [pc, #488]	; (8001ef0 <HAL_DMA_Abort_IT+0x290>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00e      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_DMA_Abort_IT+0x294>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <HAL_DMA_Abort_IT+0x298>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xc8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a76      	ldr	r2, [pc, #472]	; (8001efc <HAL_DMA_Abort_IT+0x29c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Abort_IT+0xcc>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_DMA_Abort_IT+0xce>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d065      	beq.n	8001dfe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2204      	movs	r2, #4
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a60      	ldr	r2, [pc, #384]	; (8001ec0 <HAL_DMA_Abort_IT+0x260>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d04a      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a5e      	ldr	r2, [pc, #376]	; (8001ec4 <HAL_DMA_Abort_IT+0x264>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d045      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a5d      	ldr	r2, [pc, #372]	; (8001ec8 <HAL_DMA_Abort_IT+0x268>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d040      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5b      	ldr	r2, [pc, #364]	; (8001ecc <HAL_DMA_Abort_IT+0x26c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d03b      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5a      	ldr	r2, [pc, #360]	; (8001ed0 <HAL_DMA_Abort_IT+0x270>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d036      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_DMA_Abort_IT+0x274>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d031      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <HAL_DMA_Abort_IT+0x278>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d02c      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a55      	ldr	r2, [pc, #340]	; (8001edc <HAL_DMA_Abort_IT+0x27c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d027      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a54      	ldr	r2, [pc, #336]	; (8001ee0 <HAL_DMA_Abort_IT+0x280>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d022      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a52      	ldr	r2, [pc, #328]	; (8001ee4 <HAL_DMA_Abort_IT+0x284>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01d      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a51      	ldr	r2, [pc, #324]	; (8001ee8 <HAL_DMA_Abort_IT+0x288>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d018      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <HAL_DMA_Abort_IT+0x28c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <HAL_DMA_Abort_IT+0x290>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00e      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a4c      	ldr	r2, [pc, #304]	; (8001ef4 <HAL_DMA_Abort_IT+0x294>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d009      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_DMA_Abort_IT+0x298>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d004      	beq.n	8001dda <HAL_DMA_Abort_IT+0x17a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_DMA_Abort_IT+0x29c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d108      	bne.n	8001dec <HAL_DMA_Abort_IT+0x18c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e147      	b.n	800207c <HAL_DMA_Abort_IT+0x41c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e13e      	b.n	800207c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 020e 	bic.w	r2, r2, #14
 8001e0c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <HAL_DMA_Abort_IT+0x260>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d04a      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <HAL_DMA_Abort_IT+0x264>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d045      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_DMA_Abort_IT+0x268>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d040      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_DMA_Abort_IT+0x26c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d03b      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <HAL_DMA_Abort_IT+0x270>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d036      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <HAL_DMA_Abort_IT+0x274>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_DMA_Abort_IT+0x278>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d02c      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a20      	ldr	r2, [pc, #128]	; (8001edc <HAL_DMA_Abort_IT+0x27c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d027      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_DMA_Abort_IT+0x280>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_DMA_Abort_IT+0x284>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01d      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_DMA_Abort_IT+0x288>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <HAL_DMA_Abort_IT+0x28c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_DMA_Abort_IT+0x290>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00e      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_DMA_Abort_IT+0x294>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d009      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_DMA_Abort_IT+0x298>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d004      	beq.n	8001eae <HAL_DMA_Abort_IT+0x24e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_DMA_Abort_IT+0x29c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d128      	bne.n	8001f00 <HAL_DMA_Abort_IT+0x2a0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e027      	b.n	8001f10 <HAL_DMA_Abort_IT+0x2b0>
 8001ec0:	40020010 	.word	0x40020010
 8001ec4:	40020028 	.word	0x40020028
 8001ec8:	40020040 	.word	0x40020040
 8001ecc:	40020058 	.word	0x40020058
 8001ed0:	40020070 	.word	0x40020070
 8001ed4:	40020088 	.word	0x40020088
 8001ed8:	400200a0 	.word	0x400200a0
 8001edc:	400200b8 	.word	0x400200b8
 8001ee0:	40020410 	.word	0x40020410
 8001ee4:	40020428 	.word	0x40020428
 8001ee8:	40020440 	.word	0x40020440
 8001eec:	40020458 	.word	0x40020458
 8001ef0:	40020470 	.word	0x40020470
 8001ef4:	40020488 	.word	0x40020488
 8001ef8:	400204a0 	.word	0x400204a0
 8001efc:	400204b8 	.word	0x400204b8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_DMA_Abort_IT+0x428>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d072      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_DMA_Abort_IT+0x42c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d06d      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a59      	ldr	r2, [pc, #356]	; (8002090 <HAL_DMA_Abort_IT+0x430>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d068      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_DMA_Abort_IT+0x434>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d063      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a56      	ldr	r2, [pc, #344]	; (8002098 <HAL_DMA_Abort_IT+0x438>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d05e      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a55      	ldr	r2, [pc, #340]	; (800209c <HAL_DMA_Abort_IT+0x43c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d059      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a53      	ldr	r2, [pc, #332]	; (80020a0 <HAL_DMA_Abort_IT+0x440>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d054      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_DMA_Abort_IT+0x444>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04f      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a50      	ldr	r2, [pc, #320]	; (80020a8 <HAL_DMA_Abort_IT+0x448>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04a      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a4f      	ldr	r2, [pc, #316]	; (80020ac <HAL_DMA_Abort_IT+0x44c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d045      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4d      	ldr	r2, [pc, #308]	; (80020b0 <HAL_DMA_Abort_IT+0x450>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d040      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a4c      	ldr	r2, [pc, #304]	; (80020b4 <HAL_DMA_Abort_IT+0x454>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d03b      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <HAL_DMA_Abort_IT+0x458>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d036      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a49      	ldr	r2, [pc, #292]	; (80020bc <HAL_DMA_Abort_IT+0x45c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d031      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <HAL_DMA_Abort_IT+0x460>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02c      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a46      	ldr	r2, [pc, #280]	; (80020c4 <HAL_DMA_Abort_IT+0x464>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d027      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a44      	ldr	r2, [pc, #272]	; (80020c8 <HAL_DMA_Abort_IT+0x468>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_DMA_Abort_IT+0x46c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01d      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <HAL_DMA_Abort_IT+0x470>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_DMA_Abort_IT+0x474>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <HAL_DMA_Abort_IT+0x478>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a3d      	ldr	r2, [pc, #244]	; (80020dc <HAL_DMA_Abort_IT+0x47c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <HAL_DMA_Abort_IT+0x480>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_Abort_IT+0x3a0>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <HAL_DMA_Abort_IT+0x484>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Abort_IT+0x3a4>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_DMA_Abort_IT+0x3a6>
 8002004:	2300      	movs	r3, #0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d028      	beq.n	800205c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002018:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2201      	movs	r2, #1
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002038:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800204c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002050:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800205a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40020010 	.word	0x40020010
 800208c:	40020028 	.word	0x40020028
 8002090:	40020040 	.word	0x40020040
 8002094:	40020058 	.word	0x40020058
 8002098:	40020070 	.word	0x40020070
 800209c:	40020088 	.word	0x40020088
 80020a0:	400200a0 	.word	0x400200a0
 80020a4:	400200b8 	.word	0x400200b8
 80020a8:	40020410 	.word	0x40020410
 80020ac:	40020428 	.word	0x40020428
 80020b0:	40020440 	.word	0x40020440
 80020b4:	40020458 	.word	0x40020458
 80020b8:	40020470 	.word	0x40020470
 80020bc:	40020488 	.word	0x40020488
 80020c0:	400204a0 	.word	0x400204a0
 80020c4:	400204b8 	.word	0x400204b8
 80020c8:	58025408 	.word	0x58025408
 80020cc:	5802541c 	.word	0x5802541c
 80020d0:	58025430 	.word	0x58025430
 80020d4:	58025444 	.word	0x58025444
 80020d8:	58025458 	.word	0x58025458
 80020dc:	5802546c 	.word	0x5802546c
 80020e0:	58025480 	.word	0x58025480
 80020e4:	58025494 	.word	0x58025494

080020e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0c6      	b.n	8002288 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fe2e 	bl	8000d64 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2223      	movs	r2, #35	; 0x23
 800210c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	4b60      	ldr	r3, [pc, #384]	; (8002290 <HAL_ETH_Init+0x1a8>)
 8002110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002114:	4a5e      	ldr	r2, [pc, #376]	; (8002290 <HAL_ETH_Init+0x1a8>)
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_ETH_Init+0x1a8>)
 8002120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7a1b      	ldrb	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff f951 	bl	80013dc <HAL_SYSCFG_ETHInterfaceSelect>
 800213a:	e003      	b.n	8002144 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800213c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002140:	f7ff f94c 	bl	80013dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800215c:	f7ff f902 	bl	8001364 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002162:	e00f      	b.n	8002184 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002164:	f7ff f8fe 	bl	8001364 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002172:	d907      	bls.n	8002184 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2204      	movs	r2, #4
 8002178:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	22e0      	movs	r2, #224	; 0xe0
 800217e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e081      	b.n	8002288 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1e6      	bne.n	8002164 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fac0 	bl	800271c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800219c:	f003 fa72 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <HAL_ETH_Init+0x1ac>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	0c9a      	lsrs	r2, r3, #18
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3a01      	subs	r2, #1
 80021b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fa13 	bl	80025e0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80021d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021d4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	22e0      	movs	r2, #224	; 0xe0
 80021ec:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e04a      	b.n	8002288 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80021fa:	4413      	add	r3, r2
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_ETH_Init+0x1b0>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6952      	ldr	r2, [r2, #20]
 8002206:	0052      	lsls	r2, r2, #1
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	6809      	ldr	r1, [r1, #0]
 800220c:	431a      	orrs	r2, r3
 800220e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002212:	440b      	add	r3, r1
 8002214:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fad8 	bl	80027cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fb1c 	bl	800285a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	3305      	adds	r3, #5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	3303      	adds	r3, #3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	061a      	lsls	r2, r3, #24
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	3302      	adds	r3, #2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002260:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800226e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002270:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2210      	movs	r2, #16
 800227e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2210      	movs	r2, #16
 8002284:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	58024400 	.word	0x58024400
 8002294:	431bde83 	.word	0x431bde83
 8002298:	ffff8001 	.word	0xffff8001

0800229c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80022ae:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	791b      	ldrb	r3, [r3, #4]
 80022b4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80022b6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b1b      	ldrb	r3, [r3, #12]
 80022bc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80022be:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7b5b      	ldrb	r3, [r3, #13]
 80022c4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022c6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	7b9b      	ldrb	r3, [r3, #14]
 80022cc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80022ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	7bdb      	ldrb	r3, [r3, #15]
 80022d4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022d6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	7c12      	ldrb	r2, [r2, #16]
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d102      	bne.n	80022e6 <ETH_SetMACConfig+0x4a>
 80022e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022e4:	e000      	b.n	80022e8 <ETH_SetMACConfig+0x4c>
 80022e6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022e8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	7c52      	ldrb	r2, [r2, #17]
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	d102      	bne.n	80022f8 <ETH_SetMACConfig+0x5c>
 80022f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f6:	e000      	b.n	80022fa <ETH_SetMACConfig+0x5e>
 80022f8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022fa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	7c9b      	ldrb	r3, [r3, #18]
 8002300:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002302:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002308:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800230e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7f1b      	ldrb	r3, [r3, #28]
 8002314:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002316:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	7f5b      	ldrb	r3, [r3, #29]
 800231c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800231e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	7f92      	ldrb	r2, [r2, #30]
 8002324:	2a00      	cmp	r2, #0
 8002326:	d102      	bne.n	800232e <ETH_SetMACConfig+0x92>
 8002328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232c:	e000      	b.n	8002330 <ETH_SetMACConfig+0x94>
 800232e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002330:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	7fdb      	ldrb	r3, [r3, #31]
 8002336:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002338:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002340:	2a00      	cmp	r2, #0
 8002342:	d102      	bne.n	800234a <ETH_SetMACConfig+0xae>
 8002344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002348:	e000      	b.n	800234c <ETH_SetMACConfig+0xb0>
 800234a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800234c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002352:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800235a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800235c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b56      	ldr	r3, [pc, #344]	; (80024c8 <ETH_SetMACConfig+0x22c>)
 800236e:	4013      	ands	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	430b      	orrs	r3, r1
 8002378:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002386:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002388:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002390:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002392:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800239a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800239c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80023a4:	2a00      	cmp	r2, #0
 80023a6:	d102      	bne.n	80023ae <ETH_SetMACConfig+0x112>
 80023a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ac:	e000      	b.n	80023b0 <ETH_SetMACConfig+0x114>
 80023ae:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80023b0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <ETH_SetMACConfig+0x230>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	68f9      	ldr	r1, [r7, #12]
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <ETH_SetMACConfig+0x234>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	430b      	orrs	r3, r1
 80023f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023fe:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002406:	2a00      	cmp	r2, #0
 8002408:	d101      	bne.n	800240e <ETH_SetMACConfig+0x172>
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	e000      	b.n	8002410 <ETH_SetMACConfig+0x174>
 800240e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002410:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002422:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002426:	4013      	ands	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	430b      	orrs	r3, r1
 8002430:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002438:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002440:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f023 0103 	bic.w	r1, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	430a      	orrs	r2, r1
 800245a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002466:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002482:	2a00      	cmp	r2, #0
 8002484:	d101      	bne.n	800248a <ETH_SetMACConfig+0x1ee>
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	e000      	b.n	800248c <ETH_SetMACConfig+0x1f0>
 800248a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800248c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002494:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002496:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800249e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80024ac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	00048083 	.word	0x00048083
 80024cc:	c0f88000 	.word	0xc0f88000
 80024d0:	fffffef0 	.word	0xfffffef0

080024d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b38      	ldr	r3, [pc, #224]	; (80025cc <ETH_SetDMAConfig+0xf8>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	6809      	ldr	r1, [r1, #0]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80024fa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002506:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	7b1b      	ldrb	r3, [r3, #12]
 800250c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f241 0304 	movw	r3, #4100	; 0x1004
 800251a:	4413      	add	r3, r2
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <ETH_SetDMAConfig+0xfc>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6811      	ldr	r1, [r2, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	431a      	orrs	r2, r3
 800252a:	f241 0304 	movw	r3, #4100	; 0x1004
 800252e:	440b      	add	r3, r1
 8002530:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7b5b      	ldrb	r3, [r3, #13]
 8002536:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <ETH_SetDMAConfig+0x100>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6811      	ldr	r1, [r2, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	431a      	orrs	r2, r3
 8002556:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800255a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	7d1b      	ldrb	r3, [r3, #20]
 8002564:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002566:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	7f5b      	ldrb	r3, [r3, #29]
 800256c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f241 1304 	movw	r3, #4356	; 0x1104
 800257a:	4413      	add	r3, r2
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <ETH_SetDMAConfig+0x104>)
 8002580:	4013      	ands	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6811      	ldr	r1, [r2, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	431a      	orrs	r2, r3
 800258a:	f241 1304 	movw	r3, #4356	; 0x1104
 800258e:	440b      	add	r3, r1
 8002590:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7f1b      	ldrb	r3, [r3, #28]
 8002596:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f241 1308 	movw	r3, #4360	; 0x1108
 80025a8:	4413      	add	r3, r2
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <ETH_SetDMAConfig+0x108>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6811      	ldr	r1, [r2, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80025bc:	440b      	add	r3, r1
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	ffff87fd 	.word	0xffff87fd
 80025d0:	ffff2ffe 	.word	0xffff2ffe
 80025d4:	fffec000 	.word	0xfffec000
 80025d8:	ffc0efef 	.word	0xffc0efef
 80025dc:	7fc0ffff 	.word	0x7fc0ffff

080025e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0a4      	sub	sp, #144	; 0x90
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025ee:	2300      	movs	r3, #0
 80025f0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002604:	2301      	movs	r3, #1
 8002606:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800261c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002620:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002628:	2300      	movs	r3, #0
 800262a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002638:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800263c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002644:	2300      	movs	r3, #0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800265a:	2300      	movs	r3, #0
 800265c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800265e:	2300      	movs	r3, #0
 8002660:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002662:	2300      	movs	r3, #0
 8002664:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002672:	2301      	movs	r3, #1
 8002674:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002678:	2320      	movs	r3, #32
 800267a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800268a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002694:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800269c:	2302      	movs	r3, #2
 800269e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026ba:	2300      	movs	r3, #0
 80026bc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fde6 	bl	800229c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002700:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fee1 	bl	80024d4 <ETH_SetDMAConfig>
}
 8002712:	bf00      	nop
 8002714:	3790      	adds	r7, #144	; 0x90
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800272c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002734:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002736:	f002 ffa5 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 800273a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d908      	bls.n	8002756 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d804      	bhi.n	8002756 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	e027      	b.n	80027a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d908      	bls.n	8002770 <ETH_MAC_MDIO_ClkConfig+0x54>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d204      	bcs.n	8002770 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e01a      	b.n	80027a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d303      	bcc.n	8002780 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d911      	bls.n	80027a4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d908      	bls.n	800279a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d804      	bhi.n	800279a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e005      	b.n	80027a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e000      	b.n	80027a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80027a4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	01312cff 	.word	0x01312cff
 80027bc:	02160ebf 	.word	0x02160ebf
 80027c0:	03938700 	.word	0x03938700
 80027c4:	05f5e0ff 	.word	0x05f5e0ff
 80027c8:	08f0d17f 	.word	0x08f0d17f

080027cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e01d      	b.n	8002816 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68d9      	ldr	r1, [r3, #12]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	3206      	adds	r2, #6
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3301      	adds	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d9de      	bls.n	80027da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f241 132c 	movw	r3, #4396	; 0x112c
 800282a:	4413      	add	r3, r2
 800282c:	2203      	movs	r2, #3
 800282e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68d9      	ldr	r1, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f241 1314 	movw	r3, #4372	; 0x1114
 800283c:	4413      	add	r3, r2
 800283e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e024      	b.n	80028b2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6919      	ldr	r1, [r3, #16]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3310      	adds	r3, #16
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3301      	adds	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d9d7      	bls.n	8002868 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f241 1330 	movw	r3, #4400	; 0x1130
 80028de:	4413      	add	r3, r2
 80028e0:	2203      	movs	r2, #3
 80028e2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6919      	ldr	r1, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80028f0:	4413      	add	r3, r2
 80028f2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f241 1328 	movw	r3, #4392	; 0x1128
 8002904:	4413      	add	r3, r2
 8002906:	6019      	str	r1, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002922:	4b89      	ldr	r3, [pc, #548]	; (8002b48 <HAL_GPIO_Init+0x234>)
 8002924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002926:	e194      	b.n	8002c52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8186 	beq.w	8002c4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d00b      	beq.n	8002960 <HAL_GPIO_Init+0x4c>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002954:	2b11      	cmp	r3, #17
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0201 	and.w	r2, r3, #1
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0xee>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d123      	bne.n	8002a4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	69b9      	ldr	r1, [r7, #24]
 8002a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80e0 	beq.w	8002c4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_GPIO_Init+0x238>)
 8002a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a92:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <HAL_GPIO_Init+0x238>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_GPIO_Init+0x238>)
 8002a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aaa:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <HAL_GPIO_Init+0x23c>)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_GPIO_Init+0x240>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d052      	beq.n	8002b7c <HAL_GPIO_Init+0x268>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <HAL_GPIO_Init+0x244>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d031      	beq.n	8002b42 <HAL_GPIO_Init+0x22e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_GPIO_Init+0x248>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02b      	beq.n	8002b3e <HAL_GPIO_Init+0x22a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_GPIO_Init+0x24c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d025      	beq.n	8002b3a <HAL_GPIO_Init+0x226>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_GPIO_Init+0x250>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x222>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <HAL_GPIO_Init+0x254>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x21e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <HAL_GPIO_Init+0x258>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x21a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_GPIO_Init+0x25c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x216>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_GPIO_Init+0x260>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x212>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <HAL_GPIO_Init+0x264>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x20e>
 8002b1e:	2309      	movs	r3, #9
 8002b20:	e02d      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b22:	230a      	movs	r3, #10
 8002b24:	e02b      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b26:	2308      	movs	r3, #8
 8002b28:	e029      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b2a:	2307      	movs	r3, #7
 8002b2c:	e027      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b2e:	2306      	movs	r3, #6
 8002b30:	e025      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b32:	2305      	movs	r3, #5
 8002b34:	e023      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b36:	2304      	movs	r3, #4
 8002b38:	e021      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e01f      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e01d      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e01b      	b.n	8002b7e <HAL_GPIO_Init+0x26a>
 8002b46:	bf00      	nop
 8002b48:	58000080 	.word	0x58000080
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	58000400 	.word	0x58000400
 8002b54:	58020000 	.word	0x58020000
 8002b58:	58020400 	.word	0x58020400
 8002b5c:	58020800 	.word	0x58020800
 8002b60:	58020c00 	.word	0x58020c00
 8002b64:	58021000 	.word	0x58021000
 8002b68:	58021400 	.word	0x58021400
 8002b6c:	58021800 	.word	0x58021800
 8002b70:	58021c00 	.word	0x58021c00
 8002b74:	58022000 	.word	0x58022000
 8002b78:	58022400 	.word	0x58022400
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	f002 0203 	and.w	r2, r2, #3
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	4093      	lsls	r3, r2
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b8e:	4938      	ldr	r1, [pc, #224]	; (8002c70 <HAL_GPIO_Init+0x35c>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f47f ae63 	bne.w	8002928 <HAL_GPIO_Init+0x14>
  }
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	3724      	adds	r7, #36	; 0x24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	58000400 	.word	0x58000400

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca8:	b08f      	sub	sp, #60	; 0x3c
 8002caa:	af0a      	add	r7, sp, #40	; 0x28
 8002cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e054      	b.n	8002d62 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f009 f892 	bl	800bdfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f006 f8f3 	bl	8008ee2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	687e      	ldr	r6, [r7, #4]
 8002d04:	466d      	mov	r5, sp
 8002d06:	f106 0410 	add.w	r4, r6, #16
 8002d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1a:	1d33      	adds	r3, r6, #4
 8002d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f006 f860 	bl	8008de4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f006 f8ea 	bl	8008f04 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	687e      	ldr	r6, [r7, #4]
 8002d38:	466d      	mov	r5, sp
 8002d3a:	f106 0410 	add.w	r4, r6, #16
 8002d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d4e:	1d33      	adds	r3, r6, #4
 8002d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	f006 fa34 	bl	80091c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d6a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002d6a:	b590      	push	{r4, r7, lr}
 8002d6c:	b089      	sub	sp, #36	; 0x24
 8002d6e:	af04      	add	r7, sp, #16
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	4608      	mov	r0, r1
 8002d74:	4611      	mov	r1, r2
 8002d76:	461a      	mov	r2, r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	70fb      	strb	r3, [r7, #3]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70bb      	strb	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_HCD_HC_Init+0x28>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e076      	b.n	8002e80 <HAL_HCD_HC_Init+0x116>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	333d      	adds	r3, #61	; 0x3d
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	787a      	ldrb	r2, [r7, #1]
 8002dbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3340      	adds	r3, #64	; 0x40
 8002dcc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002dce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3339      	adds	r3, #57	; 0x39
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	333f      	adds	r3, #63	; 0x3f
 8002df0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002df4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	78ba      	ldrb	r2, [r7, #2]
 8002dfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dfe:	b2d0      	uxtb	r0, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	333a      	adds	r3, #58	; 0x3a
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	da09      	bge.n	8002e2c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	333b      	adds	r3, #59	; 0x3b
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	e008      	b.n	8002e3e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	333b      	adds	r3, #59	; 0x3b
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	333c      	adds	r3, #60	; 0x3c
 8002e4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e50:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	787c      	ldrb	r4, [r7, #1]
 8002e58:	78ba      	ldrb	r2, [r7, #2]
 8002e5a:	78f9      	ldrb	r1, [r7, #3]
 8002e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e5e:	9302      	str	r3, [sp, #8]
 8002e60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	4623      	mov	r3, r4
 8002e6e:	f006 fb23 	bl	80094b8 <USB_HC_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd90      	pop	{r4, r7, pc}

08002e88 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_HCD_HC_Halt+0x1e>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e00f      	b.n	8002ec6 <HAL_HCD_HC_Halt+0x3e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f006 fd5f 	bl	800997a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	70fb      	strb	r3, [r7, #3]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70bb      	strb	r3, [r7, #2]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	333b      	adds	r3, #59	; 0x3b
 8002ef8:	78ba      	ldrb	r2, [r7, #2]
 8002efa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	333f      	adds	r3, #63	; 0x3f
 8002f0a:	787a      	ldrb	r2, [r7, #1]
 8002f0c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f0e:	7c3b      	ldrb	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d112      	bne.n	8002f3a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3342      	adds	r3, #66	; 0x42
 8002f22:	2203      	movs	r2, #3
 8002f24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	333d      	adds	r3, #61	; 0x3d
 8002f34:	7f3a      	ldrb	r2, [r7, #28]
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e008      	b.n	8002f4c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3342      	adds	r3, #66	; 0x42
 8002f48:	2202      	movs	r2, #2
 8002f4a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	f200 80c6 	bhi.w	80030e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	080030cd 	.word	0x080030cd
 8002f64:	08002fd1 	.word	0x08002fd1
 8002f68:	0800304f 	.word	0x0800304f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002f6c:	7c3b      	ldrb	r3, [r7, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f040 80b8 	bne.w	80030e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002f74:	78bb      	ldrb	r3, [r7, #2]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80b4 	bne.w	80030e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002f7c:	8b3b      	ldrh	r3, [r7, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3355      	adds	r3, #85	; 0x55
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3355      	adds	r3, #85	; 0x55
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3342      	adds	r3, #66	; 0x42
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fba:	e093      	b.n	80030e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3342      	adds	r3, #66	; 0x42
 8002fca:	2202      	movs	r2, #2
 8002fcc:	701a      	strb	r2, [r3, #0]
      break;
 8002fce:	e089      	b.n	80030e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002fd0:	78bb      	ldrb	r3, [r7, #2]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11d      	bne.n	8003012 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3355      	adds	r3, #85	; 0x55
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3342      	adds	r3, #66	; 0x42
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ffc:	e073      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3342      	adds	r3, #66	; 0x42
 800300c:	2202      	movs	r2, #2
 800300e:	701a      	strb	r2, [r3, #0]
      break;
 8003010:	e069      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3354      	adds	r3, #84	; 0x54
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3342      	adds	r3, #66	; 0x42
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
      break;
 8003038:	e055      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3342      	adds	r3, #66	; 0x42
 8003048:	2202      	movs	r2, #2
 800304a:	701a      	strb	r2, [r3, #0]
      break;
 800304c:	e04b      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800304e:	78bb      	ldrb	r3, [r7, #2]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d11d      	bne.n	8003090 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3355      	adds	r3, #85	; 0x55
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3342      	adds	r3, #66	; 0x42
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800307a:	e034      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3342      	adds	r3, #66	; 0x42
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
      break;
 800308e:	e02a      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3354      	adds	r3, #84	; 0x54
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3342      	adds	r3, #66	; 0x42
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
      break;
 80030b6:	e016      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3342      	adds	r3, #66	; 0x42
 80030c6:	2202      	movs	r2, #2
 80030c8:	701a      	strb	r2, [r3, #0]
      break;
 80030ca:	e00c      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3342      	adds	r3, #66	; 0x42
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
      break;
 80030de:	e002      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80030e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3344      	adds	r3, #68	; 0x44
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	8b3a      	ldrh	r2, [r7, #24]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	202c      	movs	r0, #44	; 0x2c
 8003100:	fb00 f303 	mul.w	r3, r0, r3
 8003104:	440b      	add	r3, r1
 8003106:	334c      	adds	r3, #76	; 0x4c
 8003108:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3360      	adds	r3, #96	; 0x60
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3350      	adds	r3, #80	; 0x50
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3339      	adds	r3, #57	; 0x39
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	222c      	movs	r2, #44	; 0x2c
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	3338      	adds	r3, #56	; 0x38
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	18d1      	adds	r1, r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	f006 fab2 	bl	80096d4 <USB_HC_StartXfer>
 8003170:	4603      	mov	r3, r0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop

0800317c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f005 ffd1 	bl	800913a <USB_GetMode>
 8003198:	4603      	mov	r3, r0
 800319a:	2b01      	cmp	r3, #1
 800319c:	f040 80ef 	bne.w	800337e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f005 ffb5 	bl	8009114 <USB_ReadInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80e5 	beq.w	800337c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f005 ffac 	bl	8009114 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031c6:	d104      	bne.n	80031d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f005 ff9c 	bl	8009114 <USB_ReadInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e6:	d104      	bne.n	80031f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 ff8c 	bl	8009114 <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003206:	d104      	bne.n	8003212 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003210:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f005 ff7c 	bl	8009114 <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d103      	bne.n	800322e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2202      	movs	r2, #2
 800322c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f005 ff6e 	bl	8009114 <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800323e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003242:	d115      	bne.n	8003270 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800324c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f008 fe7a 	bl	800bf58 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f006 f85e 	bl	800932c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f005 ff4d 	bl	8009114 <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003284:	d102      	bne.n	800328c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f001 f9ff 	bl	800468a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f005 ff3f 	bl	8009114 <USB_ReadInterrupts>
 8003296:	4603      	mov	r3, r0
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d106      	bne.n	80032ae <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f008 fe3d 	bl	800bf20 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2208      	movs	r2, #8
 80032ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f005 ff2e 	bl	8009114 <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d101      	bne.n	80032c6 <HAL_HCD_IRQHandler+0x14a>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_HCD_IRQHandler+0x14c>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0210 	bic.w	r2, r2, #16
 80032da:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f001 f902 	bl	80044e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0210 	orr.w	r2, r2, #16
 80032f0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f005 ff0c 	bl	8009114 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003306:	d13a      	bne.n	800337e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f006 fb23 	bl	8009958 <USB_HC_ReadInterrupt>
 8003312:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e025      	b.n	8003366 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d106      	bne.n	8003354 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8ab 	bl	80034a8 <HCD_HC_IN_IRQHandler>
 8003352:	e005      	b.n	8003360 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fcc6 	bl	8003cec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3301      	adds	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	d3d4      	bcc.n	800331a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003378:	615a      	str	r2, [r3, #20]
 800337a:	e000      	b.n	800337e <HAL_HCD_IRQHandler+0x202>
      return;
 800337c:	bf00      	nop
    }
  }
}
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_HCD_Start+0x16>
 8003396:	2302      	movs	r3, #2
 8003398:	e013      	b.n	80033c2 <HAL_HCD_Start+0x3e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 fd8a 	bl	8008ec0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f006 f81e 	bl	80093f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_HCD_Stop+0x16>
 80033dc:	2302      	movs	r3, #2
 80033de:	e00d      	b.n	80033fc <HAL_HCD_Stop+0x32>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f006 fc1d 	bl	8009c2c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f005 ffc5 	bl	80093a0 <USB_ResetPort>
 8003416:	4603      	mov	r3, r0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3360      	adds	r3, #96	; 0x60
 800343a:	781b      	ldrb	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3350      	adds	r3, #80	; 0x50
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f006 f809 	bl	8009494 <USB_GetCurrentFrame>
 8003482:	4603      	mov	r3, r0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f005 ffe4 	bl	8009466 <USB_GetHostSpeed>
 800349e:	4603      	mov	r3, r0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d119      	bne.n	800350c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e4:	461a      	mov	r2, r3
 80034e6:	2304      	movs	r3, #4
 80034e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	60d3      	str	r3, [r2, #12]
 800350a:	e101      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003522:	d12b      	bne.n	800357c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003536:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3361      	adds	r3, #97	; 0x61
 8003546:	2207      	movs	r2, #7
 8003548:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	0151      	lsls	r1, r2, #5
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	440a      	add	r2, r1
 8003560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f006 fa00 	bl	800997a <USB_HC_Halt>
 800357a:	e0c9      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d109      	bne.n	80035a6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359e:	461a      	mov	r2, r3
 80035a0:	2320      	movs	r3, #32
 80035a2:	6093      	str	r3, [r2, #8]
 80035a4:	e0b4      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d133      	bne.n	8003624 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3361      	adds	r3, #97	; 0x61
 80035ea:	2205      	movs	r2, #5
 80035ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fa:	461a      	mov	r2, r3
 80035fc:	2310      	movs	r3, #16
 80035fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	461a      	mov	r2, r3
 800360e:	2308      	movs	r3, #8
 8003610:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f006 f9ac 	bl	800997a <USB_HC_Halt>
 8003622:	e075      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363a:	d134      	bne.n	80036a6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	440a      	add	r2, r1
 8003652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003656:	f043 0302 	orr.w	r3, r3, #2
 800365a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3361      	adds	r3, #97	; 0x61
 800366a:	2208      	movs	r2, #8
 800366c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	461a      	mov	r2, r3
 800367c:	2310      	movs	r3, #16
 800367e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003692:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f006 f96b 	bl	800997a <USB_HC_Halt>
 80036a4:	e034      	b.n	8003710 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b80      	cmp	r3, #128	; 0x80
 80036ba:	d129      	bne.n	8003710 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	212c      	movs	r1, #44	; 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	3361      	adds	r3, #97	; 0x61
 80036ea:	2206      	movs	r2, #6
 80036ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f006 f93e 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	461a      	mov	r2, r3
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003726:	d122      	bne.n	800376e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	0151      	lsls	r1, r2, #5
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	440a      	add	r2, r1
 800373e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f006 f911 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800376a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800376c:	e2ba      	b.n	8003ce4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 811b 	bne.w	80039bc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d019      	beq.n	80037c2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	3348      	adds	r3, #72	; 0x48
 800379c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0159      	lsls	r1, r3, #5
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80037b0:	1ad2      	subs	r2, r2, r3
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	202c      	movs	r0, #44	; 0x2c
 80037b8:	fb00 f303 	mul.w	r3, r0, r3
 80037bc:	440b      	add	r3, r1
 80037be:	3350      	adds	r3, #80	; 0x50
 80037c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3361      	adds	r3, #97	; 0x61
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	335c      	adds	r3, #92	; 0x5c
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	461a      	mov	r2, r3
 80037f4:	2301      	movs	r3, #1
 80037f6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	333f      	adds	r3, #63	; 0x3f
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	333f      	adds	r3, #63	; 0x3f
 800381a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800381c:	2b02      	cmp	r3, #2
 800381e:	d121      	bne.n	8003864 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	440a      	add	r2, r1
 8003836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f006 f895 	bl	800997a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	461a      	mov	r2, r3
 800385e:	2310      	movs	r3, #16
 8003860:	6093      	str	r3, [r2, #8]
 8003862:	e066      	b.n	8003932 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	333f      	adds	r3, #63	; 0x3f
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d127      	bne.n	80038c8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	440a      	add	r2, r1
 800388e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003892:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003896:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3360      	adds	r3, #96	; 0x60
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	b2d9      	uxtb	r1, r3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	202c      	movs	r0, #44	; 0x2c
 80038b4:	fb00 f303 	mul.w	r3, r0, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3360      	adds	r3, #96	; 0x60
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f008 fb57 	bl	800bf74 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038c6:	e034      	b.n	8003932 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	333f      	adds	r3, #63	; 0x3f
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d12a      	bne.n	8003932 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3360      	adds	r3, #96	; 0x60
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3354      	adds	r3, #84	; 0x54
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	f083 0301 	eor.w	r3, r3, #1
 8003902:	b2d8      	uxtb	r0, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3354      	adds	r3, #84	; 0x54
 8003912:	4602      	mov	r2, r0
 8003914:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	b2d9      	uxtb	r1, r3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	202c      	movs	r0, #44	; 0x2c
 8003920:	fb00 f303 	mul.w	r3, r0, r3
 8003924:	4413      	add	r3, r2
 8003926:	3360      	adds	r3, #96	; 0x60
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f008 fb21 	bl	800bf74 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d12b      	bne.n	8003992 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	3348      	adds	r3, #72	; 0x48
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	202c      	movs	r0, #44	; 0x2c
 8003950:	fb00 f202 	mul.w	r2, r0, r2
 8003954:	440a      	add	r2, r1
 8003956:	3240      	adds	r2, #64	; 0x40
 8003958:	8812      	ldrh	r2, [r2, #0]
 800395a:	fbb3 f3f2 	udiv	r3, r3, r2
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 81be 	beq.w	8003ce4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3354      	adds	r3, #84	; 0x54
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	f083 0301 	eor.w	r3, r3, #1
 800397c:	b2d8      	uxtb	r0, r3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3354      	adds	r3, #84	; 0x54
 800398c:	4602      	mov	r2, r0
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	e1a8      	b.n	8003ce4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3354      	adds	r3, #84	; 0x54
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	f083 0301 	eor.w	r3, r3, #1
 80039a6:	b2d8      	uxtb	r0, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3354      	adds	r3, #84	; 0x54
 80039b6:	4602      	mov	r2, r0
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	e193      	b.n	8003ce4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	f040 8106 	bne.w	8003be0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ee:	f023 0302 	bic.w	r3, r3, #2
 80039f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3361      	adds	r3, #97	; 0x61
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d109      	bne.n	8003a1c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3360      	adds	r3, #96	; 0x60
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e0c9      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3361      	adds	r3, #97	; 0x61
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d109      	bne.n	8003a44 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	212c      	movs	r1, #44	; 0x2c
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3360      	adds	r3, #96	; 0x60
 8003a3e:	2205      	movs	r2, #5
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e0b5      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	212c      	movs	r1, #44	; 0x2c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	3361      	adds	r3, #97	; 0x61
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b06      	cmp	r3, #6
 8003a56:	d009      	beq.n	8003a6c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3361      	adds	r3, #97	; 0x61
 8003a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d150      	bne.n	8003b0e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	335c      	adds	r3, #92	; 0x5c
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	202c      	movs	r0, #44	; 0x2c
 8003a84:	fb00 f303 	mul.w	r3, r0, r3
 8003a88:	440b      	add	r3, r1
 8003a8a:	335c      	adds	r3, #92	; 0x5c
 8003a8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	335c      	adds	r3, #92	; 0x5c
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d912      	bls.n	8003ac8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	335c      	adds	r3, #92	; 0x5c
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3360      	adds	r3, #96	; 0x60
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ac6:	e073      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3360      	adds	r3, #96	; 0x60
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003af0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003af8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b0c:	e050      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	3361      	adds	r3, #97	; 0x61
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d122      	bne.n	8003b68 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3360      	adds	r3, #96	; 0x60
 8003b30:	2202      	movs	r2, #2
 8003b32:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b4a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b52:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e023      	b.n	8003bb0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3361      	adds	r3, #97	; 0x61
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b07      	cmp	r3, #7
 8003b7a:	d119      	bne.n	8003bb0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	335c      	adds	r3, #92	; 0x5c
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	202c      	movs	r0, #44	; 0x2c
 8003b94:	fb00 f303 	mul.w	r3, r0, r3
 8003b98:	440b      	add	r3, r1
 8003b9a:	335c      	adds	r3, #92	; 0x5c
 8003b9c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3360      	adds	r3, #96	; 0x60
 8003bac:	2204      	movs	r2, #4
 8003bae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	b2d9      	uxtb	r1, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	202c      	movs	r0, #44	; 0x2c
 8003bcc:	fb00 f303 	mul.w	r3, r0, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3360      	adds	r3, #96	; 0x60
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f008 f9cb 	bl	800bf74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bde:	e081      	b.n	8003ce4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d176      	bne.n	8003ce4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	333f      	adds	r3, #63	; 0x3f
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d121      	bne.n	8003c4e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	335c      	adds	r3, #92	; 0x5c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f005 fe97 	bl	800997a <USB_HC_Halt>
 8003c4c:	e041      	b.n	8003cd2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	333f      	adds	r3, #63	; 0x3f
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	333f      	adds	r3, #63	; 0x3f
 8003c70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d12d      	bne.n	8003cd2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	212c      	movs	r1, #44	; 0x2c
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	335c      	adds	r3, #92	; 0x5c
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d120      	bne.n	8003cd2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3361      	adds	r3, #97	; 0x61
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f005 fe54 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	6093      	str	r3, [r2, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d119      	bne.n	8003d50 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003d4e:	e3c6      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d13e      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	461a      	mov	r2, r3
 8003d74:	2320      	movs	r3, #32
 8003d76:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	333d      	adds	r3, #61	; 0x3d
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 83a8 	bne.w	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	333d      	adds	r3, #61	; 0x3d
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	3360      	adds	r3, #96	; 0x60
 8003dae:	2202      	movs	r2, #2
 8003db0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 fdcc 	bl	800997a <USB_HC_Halt>
}
 8003de2:	e37c      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d122      	bne.n	8003e42 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e16:	f043 0302 	orr.w	r3, r3, #2
 8003e1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f005 fda7 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e3e:	6093      	str	r3, [r2, #8]
}
 8003e40:	e34d      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d150      	bne.n	8003efa <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	335c      	adds	r3, #92	; 0x5c
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d111      	bne.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	212c      	movs	r1, #44	; 0x2c
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	333d      	adds	r3, #61	; 0x3d
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ebe:	f043 0302 	orr.w	r3, r3, #2
 8003ec2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f005 fd53 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3361      	adds	r3, #97	; 0x61
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
}
 8003ef8:	e2f1      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d13c      	bne.n	8003f8a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3361      	adds	r3, #97	; 0x61
 8003f1e:	2204      	movs	r2, #4
 8003f20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	333d      	adds	r3, #61	; 0x3d
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	335c      	adds	r3, #92	; 0x5c
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	0151      	lsls	r1, r2, #5
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f005 fd02 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	461a      	mov	r2, r3
 8003f84:	2340      	movs	r3, #64	; 0x40
 8003f86:	6093      	str	r3, [r2, #8]
}
 8003f88:	e2a9      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d12a      	bne.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	461a      	mov	r2, r3
 8003fae:	2308      	movs	r3, #8
 8003fb0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f005 fccc 	bl	800997a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	3361      	adds	r3, #97	; 0x61
 8003ff0:	2205      	movs	r2, #5
 8003ff2:	701a      	strb	r2, [r3, #0]
}
 8003ff4:	e273      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d150      	bne.n	80040ae <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	335c      	adds	r3, #92	; 0x5c
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3361      	adds	r3, #97	; 0x61
 800402c:	2203      	movs	r2, #3
 800402e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	333d      	adds	r3, #61	; 0x3d
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d112      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	212c      	movs	r1, #44	; 0x2c
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	333c      	adds	r3, #60	; 0x3c
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	212c      	movs	r1, #44	; 0x2c
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	333d      	adds	r3, #61	; 0x3d
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	440a      	add	r2, r1
 8004080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f005 fc70 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	2310      	movs	r3, #16
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	e217      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d174      	bne.n	80041ae <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d121      	bne.n	8004110 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	212c      	movs	r1, #44	; 0x2c
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	3361      	adds	r3, #97	; 0x61
 80040da:	2206      	movs	r2, #6
 80040dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f005 fc36 	bl	800997a <USB_HC_Halt>
 800410e:	e044      	b.n	800419a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	335c      	adds	r3, #92	; 0x5c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	202c      	movs	r0, #44	; 0x2c
 8004128:	fb00 f303 	mul.w	r3, r0, r3
 800412c:	440b      	add	r3, r1
 800412e:	335c      	adds	r3, #92	; 0x5c
 8004130:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	212c      	movs	r1, #44	; 0x2c
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	335c      	adds	r3, #92	; 0x5c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d920      	bls.n	8004188 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	212c      	movs	r1, #44	; 0x2c
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	4413      	add	r3, r2
 8004152:	335c      	adds	r3, #92	; 0x5c
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3360      	adds	r3, #96	; 0x60
 8004166:	2204      	movs	r2, #4
 8004168:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	b2d9      	uxtb	r1, r3
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	202c      	movs	r0, #44	; 0x2c
 8004174:	fb00 f303 	mul.w	r3, r0, r3
 8004178:	4413      	add	r3, r2
 800417a:	3360      	adds	r3, #96	; 0x60
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f007 fef7 	bl	800bf74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004186:	e008      	b.n	800419a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3360      	adds	r3, #96	; 0x60
 8004196:	2202      	movs	r2, #2
 8004198:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	6093      	str	r3, [r2, #8]
}
 80041ac:	e197      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d134      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f005 fbc2 	bl	800997a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	461a      	mov	r2, r3
 8004204:	2310      	movs	r3, #16
 8004206:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800421a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3361      	adds	r3, #97	; 0x61
 800422a:	2208      	movs	r2, #8
 800422c:	701a      	strb	r2, [r3, #0]
}
 800422e:	e156      	b.n	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	f040 814b 	bne.w	80044de <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	440a      	add	r2, r1
 800425e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004262:	f023 0302 	bic.w	r3, r3, #2
 8004266:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	212c      	movs	r1, #44	; 0x2c
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	3361      	adds	r3, #97	; 0x61
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d179      	bne.n	8004370 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	3360      	adds	r3, #96	; 0x60
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	212c      	movs	r1, #44	; 0x2c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	333f      	adds	r3, #63	; 0x3f
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d00a      	beq.n	80042b8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	333f      	adds	r3, #63	; 0x3f
 80042b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	f040 80fc 	bne.w	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d142      	bne.n	8004346 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	334c      	adds	r3, #76	; 0x4c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80ed 	beq.w	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	334c      	adds	r3, #76	; 0x4c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	202c      	movs	r0, #44	; 0x2c
 80042ec:	fb00 f202 	mul.w	r2, r0, r2
 80042f0:	440a      	add	r2, r1
 80042f2:	3240      	adds	r2, #64	; 0x40
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	3b01      	subs	r3, #1
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	202c      	movs	r0, #44	; 0x2c
 8004300:	fb00 f202 	mul.w	r2, r0, r2
 8004304:	440a      	add	r2, r1
 8004306:	3240      	adds	r2, #64	; 0x40
 8004308:	8812      	ldrh	r2, [r2, #0]
 800430a:	fbb3 f3f2 	udiv	r3, r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80ca 	beq.w	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3355      	adds	r3, #85	; 0x55
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2d8      	uxtb	r0, r3
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3355      	adds	r3, #85	; 0x55
 8004340:	4602      	mov	r2, r0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e0b4      	b.n	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3355      	adds	r3, #85	; 0x55
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	f083 0301 	eor.w	r3, r3, #1
 800435a:	b2d8      	uxtb	r0, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3355      	adds	r3, #85	; 0x55
 800436a:	4602      	mov	r2, r0
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e09f      	b.n	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3361      	adds	r3, #97	; 0x61
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d109      	bne.n	8004398 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3360      	adds	r3, #96	; 0x60
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e08b      	b.n	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	3361      	adds	r3, #97	; 0x61
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d109      	bne.n	80043c0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3360      	adds	r3, #96	; 0x60
 80043ba:	2202      	movs	r2, #2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e077      	b.n	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	3361      	adds	r3, #97	; 0x61
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d109      	bne.n	80043e8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3360      	adds	r3, #96	; 0x60
 80043e2:	2205      	movs	r2, #5
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e063      	b.n	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	3361      	adds	r3, #97	; 0x61
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d009      	beq.n	8004410 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	3361      	adds	r3, #97	; 0x61
 800440a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800440c:	2b08      	cmp	r3, #8
 800440e:	d14f      	bne.n	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	212c      	movs	r1, #44	; 0x2c
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	335c      	adds	r3, #92	; 0x5c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	202c      	movs	r0, #44	; 0x2c
 8004428:	fb00 f303 	mul.w	r3, r0, r3
 800442c:	440b      	add	r3, r1
 800442e:	335c      	adds	r3, #92	; 0x5c
 8004430:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	335c      	adds	r3, #92	; 0x5c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d912      	bls.n	800446c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	335c      	adds	r3, #92	; 0x5c
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	212c      	movs	r1, #44	; 0x2c
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	3360      	adds	r3, #96	; 0x60
 8004466:	2204      	movs	r2, #4
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e021      	b.n	80044b0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3360      	adds	r3, #96	; 0x60
 800447a:	2202      	movs	r2, #2
 800447c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004494:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800449c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044bc:	461a      	mov	r2, r3
 80044be:	2302      	movs	r3, #2
 80044c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	b2d9      	uxtb	r1, r3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	202c      	movs	r0, #44	; 0x2c
 80044cc:	fb00 f303 	mul.w	r3, r0, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3360      	adds	r3, #96	; 0x60
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f007 fd4b 	bl	800bf74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044de:	bf00      	nop
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b08a      	sub	sp, #40	; 0x28
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	0c5b      	lsrs	r3, r3, #17
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800451a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d004      	beq.n	800452c <HCD_RXQLVL_IRQHandler+0x46>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b05      	cmp	r3, #5
 8004526:	f000 80a9 	beq.w	800467c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800452a:	e0aa      	b.n	8004682 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a6 	beq.w	8004680 <HCD_RXQLVL_IRQHandler+0x19a>
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	212c      	movs	r1, #44	; 0x2c
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	3344      	adds	r3, #68	; 0x44
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 809b 	beq.w	8004680 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	212c      	movs	r1, #44	; 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	3350      	adds	r3, #80	; 0x50
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	441a      	add	r2, r3
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	202c      	movs	r0, #44	; 0x2c
 8004564:	fb00 f303 	mul.w	r3, r0, r3
 8004568:	440b      	add	r3, r1
 800456a:	334c      	adds	r3, #76	; 0x4c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d87a      	bhi.n	8004668 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3344      	adds	r3, #68	; 0x44
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	b292      	uxth	r2, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f004 fd6a 	bl	8009064 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3344      	adds	r3, #68	; 0x44
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	441a      	add	r2, r3
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	202c      	movs	r0, #44	; 0x2c
 80045aa:	fb00 f303 	mul.w	r3, r0, r3
 80045ae:	440b      	add	r3, r1
 80045b0:	3344      	adds	r3, #68	; 0x44
 80045b2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3350      	adds	r3, #80	; 0x50
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	441a      	add	r2, r3
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	202c      	movs	r0, #44	; 0x2c
 80045ce:	fb00 f303 	mul.w	r3, r0, r3
 80045d2:	440b      	add	r3, r1
 80045d4:	3350      	adds	r3, #80	; 0x50
 80045d6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	0cdb      	lsrs	r3, r3, #19
 80045e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	3340      	adds	r3, #64	; 0x40
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4293      	cmp	r3, r2
 8004604:	d13c      	bne.n	8004680 <HCD_RXQLVL_IRQHandler+0x19a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d039      	beq.n	8004680 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004622:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800462a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	461a      	mov	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	212c      	movs	r1, #44	; 0x2c
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	3354      	adds	r3, #84	; 0x54
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	f083 0301 	eor.w	r3, r3, #1
 8004652:	b2d8      	uxtb	r0, r3
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3354      	adds	r3, #84	; 0x54
 8004662:	4602      	mov	r2, r0
 8004664:	701a      	strb	r2, [r3, #0]
      break;
 8004666:	e00b      	b.n	8004680 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3360      	adds	r3, #96	; 0x60
 8004676:	2204      	movs	r2, #4
 8004678:	701a      	strb	r2, [r3, #0]
      break;
 800467a:	e001      	b.n	8004680 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004680:	bf00      	nop
  }
}
 8004682:	bf00      	nop
 8004684:	3728      	adds	r7, #40	; 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046b6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d10b      	bne.n	80046da <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d102      	bne.n	80046d2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f007 fc35 	bl	800bf3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f043 0302 	orr.w	r3, r3, #2
 80046d8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d132      	bne.n	800474a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f043 0308 	orr.w	r3, r3, #8
 80046ea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d126      	bne.n	8004744 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d113      	bne.n	8004726 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004704:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004708:	d106      	bne.n	8004718 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f004 fe0b 	bl	800932c <USB_InitFSLSPClkSel>
 8004716:	e011      	b.n	800473c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f004 fe04 	bl	800932c <USB_InitFSLSPClkSel>
 8004724:	e00a      	b.n	800473c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d106      	bne.n	800473c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004734:	461a      	mov	r2, r3
 8004736:	f64e 2360 	movw	r3, #60000	; 0xea60
 800473a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f007 fc27 	bl	800bf90 <HAL_HCD_PortEnabled_Callback>
 8004742:	e002      	b.n	800474a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f007 fc31 	bl	800bfac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b20      	cmp	r3, #32
 8004752:	d103      	bne.n	800475c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f043 0320 	orr.w	r3, r3, #32
 800475a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6013      	str	r3, [r2, #0]
}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004778:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <HAL_PWREx_ConfigSupply+0x70>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d00a      	beq.n	800479a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004784:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <HAL_PWREx_ConfigSupply+0x70>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	d001      	beq.n	8004796 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e01f      	b.n	80047d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e01d      	b.n	80047d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800479a:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_PWREx_ConfigSupply+0x70>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	490f      	ldr	r1, [pc, #60]	; (80047e0 <HAL_PWREx_ConfigSupply+0x70>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047aa:	f7fc fddb 	bl	8001364 <HAL_GetTick>
 80047ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047b0:	e009      	b.n	80047c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047b2:	f7fc fdd7 	bl	8001364 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047c0:	d901      	bls.n	80047c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e007      	b.n	80047d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_PWREx_ConfigSupply+0x70>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d2:	d1ee      	bne.n	80047b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	58024800 	.word	0x58024800

080047e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f2:	60d3      	str	r3, [r2, #12]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	58024800 	.word	0x58024800

08004804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08c      	sub	sp, #48	; 0x30
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e3ff      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8087 	beq.w	8004932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004824:	4b99      	ldr	r3, [pc, #612]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800482e:	4b97      	ldr	r3, [pc, #604]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	2b10      	cmp	r3, #16
 8004838:	d007      	beq.n	800484a <HAL_RCC_OscConfig+0x46>
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	2b18      	cmp	r3, #24
 800483e:	d110      	bne.n	8004862 <HAL_RCC_OscConfig+0x5e>
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d10b      	bne.n	8004862 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484a:	4b90      	ldr	r3, [pc, #576]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d06c      	beq.n	8004930 <HAL_RCC_OscConfig+0x12c>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d168      	bne.n	8004930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e3d9      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d106      	bne.n	800487a <HAL_RCC_OscConfig+0x76>
 800486c:	4b87      	ldr	r3, [pc, #540]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a86      	ldr	r2, [pc, #536]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e02e      	b.n	80048d8 <HAL_RCC_OscConfig+0xd4>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x98>
 8004882:	4b82      	ldr	r3, [pc, #520]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a81      	ldr	r2, [pc, #516]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b7f      	ldr	r3, [pc, #508]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a7e      	ldr	r2, [pc, #504]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e01d      	b.n	80048d8 <HAL_RCC_OscConfig+0xd4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0xbc>
 80048a6:	4b79      	ldr	r3, [pc, #484]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a78      	ldr	r2, [pc, #480]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b76      	ldr	r3, [pc, #472]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a75      	ldr	r2, [pc, #468]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e00b      	b.n	80048d8 <HAL_RCC_OscConfig+0xd4>
 80048c0:	4b72      	ldr	r3, [pc, #456]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a71      	ldr	r2, [pc, #452]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b6f      	ldr	r3, [pc, #444]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a6e      	ldr	r2, [pc, #440]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d013      	beq.n	8004908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fc fd40 	bl	8001364 <HAL_GetTick>
 80048e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fc fd3c 	bl	8001364 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e38d      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048fa:	4b64      	ldr	r3, [pc, #400]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0xe4>
 8004906:	e014      	b.n	8004932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fc fd2c 	bl	8001364 <HAL_GetTick>
 800490c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004910:	f7fc fd28 	bl	8001364 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e379      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004922:	4b5a      	ldr	r3, [pc, #360]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x10c>
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80ae 	beq.w	8004a9c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004940:	4b52      	ldr	r3, [pc, #328]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004948:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800494a:	4b50      	ldr	r3, [pc, #320]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_RCC_OscConfig+0x162>
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	2b18      	cmp	r3, #24
 800495a:	d13a      	bne.n	80049d2 <HAL_RCC_OscConfig+0x1ce>
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d135      	bne.n	80049d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004966:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x17a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e34b      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	f7fc fd21 	bl	80013c4 <HAL_GetREVID>
 8004982:	4603      	mov	r3, r0
 8004984:	f241 0203 	movw	r2, #4099	; 0x1003
 8004988:	4293      	cmp	r3, r2
 800498a:	d817      	bhi.n	80049bc <HAL_RCC_OscConfig+0x1b8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d108      	bne.n	80049a6 <HAL_RCC_OscConfig+0x1a2>
 8004994:	4b3d      	ldr	r3, [pc, #244]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800499c:	4a3b      	ldr	r2, [pc, #236]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 800499e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a4:	e07a      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	031b      	lsls	r3, r3, #12
 80049b4:	4935      	ldr	r1, [pc, #212]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ba:	e06f      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049bc:	4b33      	ldr	r3, [pc, #204]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	4930      	ldr	r1, [pc, #192]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d0:	e064      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d045      	beq.n	8004a66 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049da:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 0219 	bic.w	r2, r3, #25
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4929      	ldr	r1, [pc, #164]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fc fcba 	bl	8001364 <HAL_GetTick>
 80049f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fc fcb6 	bl	8001364 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e307      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	f7fc fcd7 	bl	80013c4 <HAL_GetREVID>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d817      	bhi.n	8004a50 <HAL_RCC_OscConfig+0x24c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d108      	bne.n	8004a3a <HAL_RCC_OscConfig+0x236>
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a36:	6053      	str	r3, [r2, #4]
 8004a38:	e030      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
 8004a3a:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	031b      	lsls	r3, r3, #12
 8004a48:	4910      	ldr	r1, [pc, #64]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]
 8004a4e:	e025      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	490b      	ldr	r1, [pc, #44]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]
 8004a64:	e01a      	b.n	8004a9c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <HAL_RCC_OscConfig+0x288>)
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fc fc77 	bl	8001364 <HAL_GetTick>
 8004a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fc fc73 	bl	8001364 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d903      	bls.n	8004a90 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e2c4      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
 8004a8c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a90:	4ba4      	ldr	r3, [pc, #656]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ee      	bne.n	8004a7a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80a9 	beq.w	8004bfc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aaa:	4b9e      	ldr	r3, [pc, #632]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ab4:	4b9b      	ldr	r3, [pc, #620]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d007      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x2cc>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b18      	cmp	r3, #24
 8004ac4:	d13a      	bne.n	8004b3c <HAL_RCC_OscConfig+0x338>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d135      	bne.n	8004b3c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ad0:	4b94      	ldr	r3, [pc, #592]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x2e4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	2b80      	cmp	r3, #128	; 0x80
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e296      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ae8:	f7fc fc6c 	bl	80013c4 <HAL_GetREVID>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f241 0203 	movw	r2, #4099	; 0x1003
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d817      	bhi.n	8004b26 <HAL_RCC_OscConfig+0x322>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d108      	bne.n	8004b10 <HAL_RCC_OscConfig+0x30c>
 8004afe:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b06:	4a87      	ldr	r2, [pc, #540]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b0c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b0e:	e075      	b.n	8004bfc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b10:	4b84      	ldr	r3, [pc, #528]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	069b      	lsls	r3, r3, #26
 8004b1e:	4981      	ldr	r1, [pc, #516]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b24:	e06a      	b.n	8004bfc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b26:	4b7f      	ldr	r3, [pc, #508]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	061b      	lsls	r3, r3, #24
 8004b34:	497b      	ldr	r1, [pc, #492]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b3a:	e05f      	b.n	8004bfc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d042      	beq.n	8004bca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b44:	4b77      	ldr	r3, [pc, #476]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a76      	ldr	r2, [pc, #472]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fc fc08 	bl	8001364 <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b58:	f7fc fc04 	bl	8001364 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e255      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b6a:	4b6e      	ldr	r3, [pc, #440]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b76:	f7fc fc25 	bl	80013c4 <HAL_GetREVID>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d817      	bhi.n	8004bb4 <HAL_RCC_OscConfig+0x3b0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d108      	bne.n	8004b9e <HAL_RCC_OscConfig+0x39a>
 8004b8c:	4b65      	ldr	r3, [pc, #404]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b94:	4a63      	ldr	r2, [pc, #396]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004b96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b9a:	6053      	str	r3, [r2, #4]
 8004b9c:	e02e      	b.n	8004bfc <HAL_RCC_OscConfig+0x3f8>
 8004b9e:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	069b      	lsls	r3, r3, #26
 8004bac:	495d      	ldr	r1, [pc, #372]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
 8004bb2:	e023      	b.n	8004bfc <HAL_RCC_OscConfig+0x3f8>
 8004bb4:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	061b      	lsls	r3, r3, #24
 8004bc2:	4958      	ldr	r1, [pc, #352]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60cb      	str	r3, [r1, #12]
 8004bc8:	e018      	b.n	8004bfc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bca:	4b56      	ldr	r3, [pc, #344]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a55      	ldr	r2, [pc, #340]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fc fbc5 	bl	8001364 <HAL_GetTick>
 8004bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bde:	f7fc fbc1 	bl	8001364 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e212      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bf0:	4b4c      	ldr	r3, [pc, #304]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d036      	beq.n	8004c76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d019      	beq.n	8004c44 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c10:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c14:	4a43      	ldr	r2, [pc, #268]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fc fba2 	bl	8001364 <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fc fb9e 	bl	8001364 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e1ef      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x420>
 8004c42:	e018      	b.n	8004c76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c44:	4b37      	ldr	r3, [pc, #220]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c48:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fc fb88 	bl	8001364 <HAL_GetTick>
 8004c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c58:	f7fc fb84 	bl	8001364 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e1d5      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d036      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d019      	beq.n	8004cbe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c8a:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c96:	f7fc fb65 	bl	8001364 <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c9e:	f7fc fb61 	bl	8001364 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e1b2      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x49a>
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cca:	f7fc fb4b 	bl	8001364 <HAL_GetTick>
 8004cce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004cd2:	f7fc fb47 	bl	8001364 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e198      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <HAL_RCC_OscConfig+0x520>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8085 	beq.w	8004e08 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <HAL_RCC_OscConfig+0x524>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <HAL_RCC_OscConfig+0x524>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d0a:	f7fc fb2b 	bl	8001364 <HAL_GetTick>
 8004d0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d10:	e00c      	b.n	8004d2c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d12:	f7fc fb27 	bl	8001364 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b64      	cmp	r3, #100	; 0x64
 8004d1e:	d905      	bls.n	8004d2c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e178      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
 8004d24:	58024400 	.word	0x58024400
 8004d28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2c:	4b96      	ldr	r3, [pc, #600]	; (8004f88 <HAL_RCC_OscConfig+0x784>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0ec      	beq.n	8004d12 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_OscConfig+0x54a>
 8004d40:	4b92      	ldr	r3, [pc, #584]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	4a91      	ldr	r2, [pc, #580]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4c:	e02d      	b.n	8004daa <HAL_RCC_OscConfig+0x5a6>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x56c>
 8004d56:	4b8d      	ldr	r3, [pc, #564]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4a8c      	ldr	r2, [pc, #560]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70
 8004d62:	4b8a      	ldr	r3, [pc, #552]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a89      	ldr	r2, [pc, #548]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d68:	f023 0304 	bic.w	r3, r3, #4
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6e:	e01c      	b.n	8004daa <HAL_RCC_OscConfig+0x5a6>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d10c      	bne.n	8004d92 <HAL_RCC_OscConfig+0x58e>
 8004d78:	4b84      	ldr	r3, [pc, #528]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a83      	ldr	r2, [pc, #524]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d7e:	f043 0304 	orr.w	r3, r3, #4
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
 8004d84:	4b81      	ldr	r3, [pc, #516]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	4a80      	ldr	r2, [pc, #512]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d90:	e00b      	b.n	8004daa <HAL_RCC_OscConfig+0x5a6>
 8004d92:	4b7e      	ldr	r3, [pc, #504]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4a7d      	ldr	r2, [pc, #500]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9e:	4b7b      	ldr	r3, [pc, #492]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a7a      	ldr	r2, [pc, #488]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d015      	beq.n	8004dde <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db2:	f7fc fad7 	bl	8001364 <HAL_GetTick>
 8004db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fc fad3 	bl	8001364 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e122      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dd0:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0ee      	beq.n	8004dba <HAL_RCC_OscConfig+0x5b6>
 8004ddc:	e014      	b.n	8004e08 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fc fac1 	bl	8001364 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fc fabd 	bl	8001364 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e10c      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004dfc:	4b63      	ldr	r3, [pc, #396]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ee      	bne.n	8004de6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8101 	beq.w	8005014 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e12:	4b5e      	ldr	r3, [pc, #376]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e1a:	2b18      	cmp	r3, #24
 8004e1c:	f000 80bc 	beq.w	8004f98 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	f040 8095 	bne.w	8004f54 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b58      	ldr	r3, [pc, #352]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a57      	ldr	r2, [pc, #348]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc fa95 	bl	8001364 <HAL_GetTick>
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fc fa91 	bl	8001364 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0e2      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e50:	4b4e      	ldr	r3, [pc, #312]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f0      	bne.n	8004e3e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e5c:	4b4b      	ldr	r3, [pc, #300]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e60:	4b4b      	ldr	r3, [pc, #300]	; (8004f90 <HAL_RCC_OscConfig+0x78c>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	4946      	ldr	r1, [pc, #280]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	628b      	str	r3, [r1, #40]	; 0x28
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e84:	3b01      	subs	r3, #1
 8004e86:	025b      	lsls	r3, r3, #9
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	3b01      	subs	r3, #1
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ea6:	4939      	ldr	r1, [pc, #228]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004eac:	4b37      	ldr	r3, [pc, #220]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	4a36      	ldr	r2, [pc, #216]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eb8:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebc:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <HAL_RCC_OscConfig+0x790>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ec4:	00d2      	lsls	r2, r2, #3
 8004ec6:	4931      	ldr	r1, [pc, #196]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ecc:	4b2f      	ldr	r3, [pc, #188]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f023 020c 	bic.w	r2, r3, #12
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	492c      	ldr	r1, [pc, #176]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ede:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	f023 0202 	bic.w	r2, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4928      	ldr	r1, [pc, #160]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ef0:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efc:	4b23      	ldr	r3, [pc, #140]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	4a22      	ldr	r2, [pc, #136]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f08:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f20:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fc fa1a 	bl	8001364 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fc fa16 	bl	8001364 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e067      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f46:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0x730>
 8004f52:	e05f      	b.n	8005014 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fc fa00 	bl	8001364 <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f68:	f7fc f9fc 	bl	8001364 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e04d      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f7a:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <HAL_RCC_OscConfig+0x788>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x764>
 8004f86:	e045      	b.n	8005014 <HAL_RCC_OscConfig+0x810>
 8004f88:	58024800 	.word	0x58024800
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	fffffc0c 	.word	0xfffffc0c
 8004f94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <HAL_RCC_OscConfig+0x81c>)
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_RCC_OscConfig+0x81c>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d031      	beq.n	8005010 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f003 0203 	and.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d12a      	bne.n	8005010 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d122      	bne.n	8005010 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d11a      	bne.n	8005010 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	0a5b      	lsrs	r3, r3, #9
 8004fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d111      	bne.n	8005010 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d108      	bne.n	8005010 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	0e1b      	lsrs	r3, r3, #24
 8005002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3730      	adds	r7, #48	; 0x30
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400

08005024 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e19c      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005038:	4b8a      	ldr	r3, [pc, #552]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d910      	bls.n	8005068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b87      	ldr	r3, [pc, #540]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 020f 	bic.w	r2, r3, #15
 800504e:	4985      	ldr	r1, [pc, #532]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b83      	ldr	r3, [pc, #524]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e184      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d010      	beq.n	8005096 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005080:	429a      	cmp	r2, r3
 8005082:	d908      	bls.n	8005096 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005084:	4b78      	ldr	r3, [pc, #480]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	4975      	ldr	r1, [pc, #468]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005092:	4313      	orrs	r3, r2
 8005094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d010      	beq.n	80050c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	4b70      	ldr	r3, [pc, #448]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d908      	bls.n	80050c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050b2:	4b6d      	ldr	r3, [pc, #436]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	496a      	ldr	r1, [pc, #424]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d010      	beq.n	80050f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699a      	ldr	r2, [r3, #24]
 80050d4:	4b64      	ldr	r3, [pc, #400]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050dc:	429a      	cmp	r2, r3
 80050de:	d908      	bls.n	80050f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050e0:	4b61      	ldr	r3, [pc, #388]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	495e      	ldr	r1, [pc, #376]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d010      	beq.n	8005120 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	4b59      	ldr	r3, [pc, #356]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800510a:	429a      	cmp	r2, r3
 800510c:	d908      	bls.n	8005120 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800510e:	4b56      	ldr	r3, [pc, #344]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4953      	ldr	r1, [pc, #332]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 800511c:	4313      	orrs	r3, r2
 800511e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	4b4d      	ldr	r3, [pc, #308]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	429a      	cmp	r2, r3
 800513a:	d908      	bls.n	800514e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513c:	4b4a      	ldr	r3, [pc, #296]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f023 020f 	bic.w	r2, r3, #15
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4947      	ldr	r1, [pc, #284]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 800514a:	4313      	orrs	r3, r2
 800514c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d055      	beq.n	8005206 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800515a:	4b43      	ldr	r3, [pc, #268]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	4940      	ldr	r1, [pc, #256]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005168:	4313      	orrs	r3, r2
 800516a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d107      	bne.n	8005184 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005174:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d121      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0f6      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d107      	bne.n	800519c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800518c:	4b36      	ldr	r3, [pc, #216]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d115      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0ea      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051a4:	4b30      	ldr	r3, [pc, #192]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0de      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b4:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0d6      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051c4:	4b28      	ldr	r3, [pc, #160]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f023 0207 	bic.w	r2, r3, #7
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4925      	ldr	r1, [pc, #148]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7fc f8c5 	bl	8001364 <HAL_GetTick>
 80051da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051de:	f7fc f8c1 	bl	8001364 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e0be      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	429a      	cmp	r2, r3
 8005204:	d1eb      	bne.n	80051de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	4b14      	ldr	r3, [pc, #80]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	429a      	cmp	r2, r3
 8005220:	d208      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f023 020f 	bic.w	r2, r3, #15
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	490e      	ldr	r1, [pc, #56]	; (8005268 <HAL_RCC_ClockConfig+0x244>)
 8005230:	4313      	orrs	r3, r2
 8005232:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d214      	bcs.n	800526c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 020f 	bic.w	r2, r3, #15
 800524a:	4906      	ldr	r1, [pc, #24]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	4313      	orrs	r3, r2
 8005250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <HAL_RCC_ClockConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e086      	b.n	8005372 <HAL_RCC_ClockConfig+0x34e>
 8005264:	52002000 	.word	0x52002000
 8005268:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d010      	beq.n	800529a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	4b3f      	ldr	r3, [pc, #252]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005284:	429a      	cmp	r2, r3
 8005286:	d208      	bcs.n	800529a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005288:	4b3c      	ldr	r3, [pc, #240]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	4939      	ldr	r1, [pc, #228]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 8005296:	4313      	orrs	r3, r2
 8005298:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d208      	bcs.n	80052c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052b6:	4b31      	ldr	r3, [pc, #196]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	492e      	ldr	r1, [pc, #184]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d010      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d208      	bcs.n	80052f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052e4:	4b25      	ldr	r3, [pc, #148]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	4922      	ldr	r1, [pc, #136]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d010      	beq.n	8005324 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800530e:	429a      	cmp	r2, r3
 8005310:	d208      	bcs.n	8005324 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4917      	ldr	r1, [pc, #92]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 8005320:	4313      	orrs	r3, r2
 8005322:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005324:	f000 f834 	bl	8005390 <HAL_RCC_GetSysClockFreq>
 8005328:	4602      	mov	r2, r0
 800532a:	4b14      	ldr	r3, [pc, #80]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	4912      	ldr	r1, [pc, #72]	; (8005380 <HAL_RCC_ClockConfig+0x35c>)
 8005336:	5ccb      	ldrb	r3, [r1, r3]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
 8005340:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_RCC_ClockConfig+0x358>)
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_RCC_ClockConfig+0x35c>)
 800534c:	5cd3      	ldrb	r3, [r2, r3]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
 8005358:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <HAL_RCC_ClockConfig+0x360>)
 800535a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800535c:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <HAL_RCC_ClockConfig+0x364>)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_RCC_ClockConfig+0x368>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f7fb ffb2 	bl	80012d0 <HAL_InitTick>
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400
 8005380:	0800cdbc 	.word	0x0800cdbc
 8005384:	24000004 	.word	0x24000004
 8005388:	24000000 	.word	0x24000000
 800538c:	24000008 	.word	0x24000008

08005390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	; 0x24
 8005394:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005396:	4bb3      	ldr	r3, [pc, #716]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800539e:	2b18      	cmp	r3, #24
 80053a0:	f200 8155 	bhi.w	800564e <HAL_RCC_GetSysClockFreq+0x2be>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	08005411 	.word	0x08005411
 80053b0:	0800564f 	.word	0x0800564f
 80053b4:	0800564f 	.word	0x0800564f
 80053b8:	0800564f 	.word	0x0800564f
 80053bc:	0800564f 	.word	0x0800564f
 80053c0:	0800564f 	.word	0x0800564f
 80053c4:	0800564f 	.word	0x0800564f
 80053c8:	0800564f 	.word	0x0800564f
 80053cc:	08005437 	.word	0x08005437
 80053d0:	0800564f 	.word	0x0800564f
 80053d4:	0800564f 	.word	0x0800564f
 80053d8:	0800564f 	.word	0x0800564f
 80053dc:	0800564f 	.word	0x0800564f
 80053e0:	0800564f 	.word	0x0800564f
 80053e4:	0800564f 	.word	0x0800564f
 80053e8:	0800564f 	.word	0x0800564f
 80053ec:	0800543d 	.word	0x0800543d
 80053f0:	0800564f 	.word	0x0800564f
 80053f4:	0800564f 	.word	0x0800564f
 80053f8:	0800564f 	.word	0x0800564f
 80053fc:	0800564f 	.word	0x0800564f
 8005400:	0800564f 	.word	0x0800564f
 8005404:	0800564f 	.word	0x0800564f
 8005408:	0800564f 	.word	0x0800564f
 800540c:	08005443 	.word	0x08005443
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005410:	4b94      	ldr	r3, [pc, #592]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800541c:	4b91      	ldr	r3, [pc, #580]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	08db      	lsrs	r3, r3, #3
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	4a90      	ldr	r2, [pc, #576]	; (8005668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
 800542c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800542e:	e111      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005430:	4b8d      	ldr	r3, [pc, #564]	; (8005668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005432:	61bb      	str	r3, [r7, #24]
    break;
 8005434:	e10e      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005436:	4b8d      	ldr	r3, [pc, #564]	; (800566c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005438:	61bb      	str	r3, [r7, #24]
    break;
 800543a:	e10b      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800543c:	4b8c      	ldr	r3, [pc, #560]	; (8005670 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800543e:	61bb      	str	r3, [r7, #24]
    break;
 8005440:	e108      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005442:	4b88      	ldr	r3, [pc, #544]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800544c:	4b85      	ldr	r3, [pc, #532]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005456:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005458:	4b82      	ldr	r3, [pc, #520]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005462:	4b80      	ldr	r3, [pc, #512]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005466:	08db      	lsrs	r3, r3, #3
 8005468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80e1 	beq.w	8005648 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b02      	cmp	r3, #2
 800548a:	f000 8083 	beq.w	8005594 <HAL_RCC_GetSysClockFreq+0x204>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b02      	cmp	r3, #2
 8005492:	f200 80a1 	bhi.w	80055d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x114>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d056      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x1c0>
 80054a2:	e099      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a4:	4b6f      	ldr	r3, [pc, #444]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d02d      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054b0:	4b6c      	ldr	r3, [pc, #432]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	4a6b      	ldr	r2, [pc, #428]	; (8005668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
 80054c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054da:	4b62      	ldr	r3, [pc, #392]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005506:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800550a:	e087      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005516:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005678 <HAL_RCC_GetSysClockFreq+0x2e8>
 800551a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551e:	4b51      	ldr	r3, [pc, #324]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005532:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800554e:	e065      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800567c <HAL_RCC_GetSysClockFreq+0x2ec>
 800555e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005562:	4b40      	ldr	r3, [pc, #256]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005572:	ed97 6a02 	vldr	s12, [r7, #8]
 8005576:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005674 <HAL_RCC_GetSysClockFreq+0x2e4>
 800557a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005592:	e043      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005680 <HAL_RCC_GetSysClockFreq+0x2f0>
 80055a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a6:	4b2f      	ldr	r3, [pc, #188]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055d6:	e021      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800567c <HAL_RCC_GetSysClockFreq+0x2ec>
 80055e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ea:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80055fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800561a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	0a5b      	lsrs	r3, r3, #9
 8005622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005626:	3301      	adds	r3, #1
 8005628:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005634:	edd7 6a07 	vldr	s13, [r7, #28]
 8005638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005640:	ee17 3a90 	vmov	r3, s15
 8005644:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005646:	e005      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	61bb      	str	r3, [r7, #24]
    break;
 800564c:	e002      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800564e:	4b07      	ldr	r3, [pc, #28]	; (800566c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005650:	61bb      	str	r3, [r7, #24]
    break;
 8005652:	bf00      	nop
  }

  return sysclockfreq;
 8005654:	69bb      	ldr	r3, [r7, #24]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3724      	adds	r7, #36	; 0x24
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
 8005668:	03d09000 	.word	0x03d09000
 800566c:	003d0900 	.word	0x003d0900
 8005670:	007a1200 	.word	0x007a1200
 8005674:	46000000 	.word	0x46000000
 8005678:	4c742400 	.word	0x4c742400
 800567c:	4a742400 	.word	0x4a742400
 8005680:	4af42400 	.word	0x4af42400

08005684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800568a:	f7ff fe81 	bl	8005390 <HAL_RCC_GetSysClockFreq>
 800568e:	4602      	mov	r2, r0
 8005690:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	490f      	ldr	r1, [pc, #60]	; (80056d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800569c:	5ccb      	ldrb	r3, [r1, r3]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	fa22 f303 	lsr.w	r3, r2, r3
 80056a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80056b2:	5cd3      	ldrb	r3, [r2, r3]
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	4a07      	ldr	r2, [pc, #28]	; (80056dc <HAL_RCC_GetHCLKFreq+0x58>)
 80056c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056c2:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <HAL_RCC_GetHCLKFreq+0x58>)
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	58024400 	.word	0x58024400
 80056d8:	0800cdbc 	.word	0x0800cdbc
 80056dc:	24000004 	.word	0x24000004
 80056e0:	24000000 	.word	0x24000000

080056e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056e8:	f7ff ffcc 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056ec:	4602      	mov	r2, r0
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	091b      	lsrs	r3, r3, #4
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	4904      	ldr	r1, [pc, #16]	; (800570c <HAL_RCC_GetPCLK1Freq+0x28>)
 80056fa:	5ccb      	ldrb	r3, [r1, r3]
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	58024400 	.word	0x58024400
 800570c:	0800cdbc 	.word	0x0800cdbc

08005710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005714:	f7ff ffb6 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 8005718:	4602      	mov	r2, r0
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	4904      	ldr	r1, [pc, #16]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	58024400 	.word	0x58024400
 8005738:	0800cdbc 	.word	0x0800cdbc

0800573c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005744:	2300      	movs	r3, #0
 8005746:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005748:	2300      	movs	r3, #0
 800574a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d03f      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005760:	d02a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005766:	d824      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800576c:	d018      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800576e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005772:	d81e      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577c:	d007      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800577e:	e018      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005780:	4bab      	ldr	r3, [pc, #684]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	4aaa      	ldr	r2, [pc, #680]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800578c:	e015      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	2102      	movs	r1, #2
 8005794:	4618      	mov	r0, r3
 8005796:	f001 f9cf 	bl	8006b38 <RCCEx_PLL2_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800579e:	e00c      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3324      	adds	r3, #36	; 0x24
 80057a4:	2102      	movs	r1, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fa78 	bl	8006c9c <RCCEx_PLL3_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057b0:	e003      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
      break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057c0:	4b9b      	ldr	r3, [pc, #620]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057cc:	4998      	ldr	r1, [pc, #608]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	650b      	str	r3, [r1, #80]	; 0x50
 80057d2:	e001      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d03d      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d826      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005809 	.word	0x08005809
 80057f8:	08005817 	.word	0x08005817
 80057fc:	08005829 	.word	0x08005829
 8005800:	08005841 	.word	0x08005841
 8005804:	08005841 	.word	0x08005841
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005808:	4b89      	ldr	r3, [pc, #548]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a88      	ldr	r2, [pc, #544]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800580e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005814:	e015      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f001 f98b 	bl	8006b38 <RCCEx_PLL2_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005826:	e00c      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3324      	adds	r3, #36	; 0x24
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fa34 	bl	8006c9c <RCCEx_PLL3_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005838:	e003      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
      break;
 800583e:	e000      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005848:	4b79      	ldr	r3, [pc, #484]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584c:	f023 0207 	bic.w	r2, r3, #7
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	4976      	ldr	r1, [pc, #472]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005856:	4313      	orrs	r3, r2
 8005858:	650b      	str	r3, [r1, #80]	; 0x50
 800585a:	e001      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005868:	2b00      	cmp	r3, #0
 800586a:	d042      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005874:	d02b      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587a:	d825      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800587c:	2bc0      	cmp	r3, #192	; 0xc0
 800587e:	d028      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005880:	2bc0      	cmp	r3, #192	; 0xc0
 8005882:	d821      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005884:	2b80      	cmp	r3, #128	; 0x80
 8005886:	d016      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005888:	2b80      	cmp	r3, #128	; 0x80
 800588a:	d81d      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d007      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005894:	e018      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005896:	4b66      	ldr	r3, [pc, #408]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	4a65      	ldr	r2, [pc, #404]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800589c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058a2:	e017      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 f944 	bl	8006b38 <RCCEx_PLL2_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058b4:	e00e      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3324      	adds	r3, #36	; 0x24
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 f9ed 	bl	8006c9c <RCCEx_PLL3_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058c6:	e005      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	75fb      	strb	r3, [r7, #23]
      break;
 80058cc:	e002      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80058ce:	bf00      	nop
 80058d0:	e000      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80058d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058da:	4b55      	ldr	r3, [pc, #340]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	4952      	ldr	r1, [pc, #328]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	650b      	str	r3, [r1, #80]	; 0x50
 80058ec:	e001      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d049      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005908:	d030      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800590a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800590e:	d82a      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005910:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005914:	d02c      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005916:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800591a:	d824      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800591c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005920:	d018      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005926:	d81e      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800592c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005930:	d007      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005932:	e018      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005934:	4b3e      	ldr	r3, [pc, #248]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a3d      	ldr	r2, [pc, #244]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800593a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005940:	e017      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f001 f8f5 	bl	8006b38 <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005952:	e00e      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f001 f99e 	bl	8006c9c <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005964:	e005      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
      break;
 800596a:	e002      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005978:	4b2d      	ldr	r3, [pc, #180]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800597a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005986:	492a      	ldr	r1, [pc, #168]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005988:	4313      	orrs	r3, r2
 800598a:	658b      	str	r3, [r1, #88]	; 0x58
 800598c:	e001      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599a:	2b00      	cmp	r3, #0
 800599c:	d04c      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059a8:	d030      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80059aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ae:	d82a      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80059b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059b4:	d02c      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80059b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059ba:	d824      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80059bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059c0:	d018      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80059c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059c6:	d81e      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80059cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059d0:	d007      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80059d2:	e018      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059e0:	e017      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 f8a5 	bl	8006b38 <RCCEx_PLL2_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059f2:	e00e      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3324      	adds	r3, #36	; 0x24
 80059f8:	2100      	movs	r1, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	f001 f94e 	bl	8006c9c <RCCEx_PLL3_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a04:	e005      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75fb      	strb	r3, [r7, #23]
      break;
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a0c:	bf00      	nop
 8005a0e:	e000      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a26:	4902      	ldr	r1, [pc, #8]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	658b      	str	r3, [r1, #88]	; 0x58
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d032      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a48:	2b30      	cmp	r3, #48	; 0x30
 8005a4a:	d01c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a4c:	2b30      	cmp	r3, #48	; 0x30
 8005a4e:	d817      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d00c      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d813      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d016      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d10f      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a60:	4baf      	ldr	r3, [pc, #700]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4aae      	ldr	r2, [pc, #696]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005a6c:	e00e      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2102      	movs	r1, #2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f85f 	bl	8006b38 <RCCEx_PLL2_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005a7e:	e005      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a92:	4ba3      	ldr	r3, [pc, #652]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9e:	49a0      	ldr	r1, [pc, #640]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005aa4:	e001      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d047      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005abe:	d030      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac4:	d82a      	bhi.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aca:	d02c      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005acc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ad0:	d824      	bhi.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	d018      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005adc:	d81e      	bhi.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d007      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005ae8:	e018      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aea:	4b8d      	ldr	r3, [pc, #564]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	4a8c      	ldr	r2, [pc, #560]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005af6:	e017      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3304      	adds	r3, #4
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f81a 	bl	8006b38 <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b08:	e00e      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3324      	adds	r3, #36	; 0x24
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 f8c3 	bl	8006c9c <RCCEx_PLL3_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b1a:	e005      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b2e:	4b7c      	ldr	r3, [pc, #496]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b32:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3a:	4979      	ldr	r1, [pc, #484]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	650b      	str	r3, [r1, #80]	; 0x50
 8005b40:	e001      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d049      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b5a:	d02e      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b60:	d828      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b66:	d02a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b6c:	d822      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b72:	d026      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005b74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b78:	d81c      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b7e:	d010      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b84:	d816      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01d      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8e:	d111      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	2101      	movs	r1, #1
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 ffce 	bl	8006b38 <RCCEx_PLL2_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ba0:	e012      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3324      	adds	r3, #36	; 0x24
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 f877 	bl	8006c9c <RCCEx_PLL3_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005bb2:	e009      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb8:	e006      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e004      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e002      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bce:	4b54      	ldr	r3, [pc, #336]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bda:	4951      	ldr	r1, [pc, #324]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	650b      	str	r3, [r1, #80]	; 0x50
 8005be0:	e001      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d04b      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bfc:	d02e      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c02:	d828      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d02a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0e:	d822      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c14:	d026      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c1a:	d81c      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c20:	d010      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c26:	d816      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01d      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c30:	d111      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	2101      	movs	r1, #1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 ff7d 	bl	8006b38 <RCCEx_PLL2_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c42:	e012      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3324      	adds	r3, #36	; 0x24
 8005c48:	2101      	movs	r1, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 f826 	bl	8006c9c <RCCEx_PLL3_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c54:	e009      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5a:	e006      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c5c:	bf00      	nop
 8005c5e:	e004      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c60:	bf00      	nop
 8005c62:	e002      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c64:	bf00      	nop
 8005c66:	e000      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c70:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c7e:	4928      	ldr	r1, [pc, #160]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	658b      	str	r3, [r1, #88]	; 0x58
 8005c84:	e001      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02f      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9e:	d00e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca4:	d814      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d015      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cae:	d10f      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cbc:	e00c      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 ff37 	bl	8006b38 <RCCEx_PLL2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cce:	e003      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cde:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cea:	490d      	ldr	r1, [pc, #52]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	650b      	str	r3, [r1, #80]	; 0x50
 8005cf0:	e001      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d033      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d81c      	bhi.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d4b 	.word	0x08005d4b
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d33 	.word	0x08005d33
 8005d1c:	08005d4b 	.word	0x08005d4b
 8005d20:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d24:	4bb8      	ldr	r3, [pc, #736]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	4ab7      	ldr	r2, [pc, #732]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d30:	e00c      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3304      	adds	r3, #4
 8005d36:	2102      	movs	r1, #2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fefd 	bl	8006b38 <RCCEx_PLL2_Config>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	75fb      	strb	r3, [r7, #23]
      break;
 8005d48:	e000      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d52:	4bad      	ldr	r3, [pc, #692]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d56:	f023 0203 	bic.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	49aa      	ldr	r1, [pc, #680]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d64:	e001      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8086 	beq.w	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d78:	4ba4      	ldr	r3, [pc, #656]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4aa3      	ldr	r2, [pc, #652]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d84:	f7fb faee 	bl	8001364 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8a:	e009      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8c:	f7fb faea 	bl	8001364 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b64      	cmp	r3, #100	; 0x64
 8005d98:	d902      	bls.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8005d9e:	e005      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005da0:	4b9a      	ldr	r3, [pc, #616]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0ef      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d166      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005db2:	4b95      	ldr	r3, [pc, #596]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005db4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dbc:	4053      	eors	r3, r2
 8005dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d013      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dc6:	4b90      	ldr	r3, [pc, #576]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dd0:	4b8d      	ldr	r3, [pc, #564]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd4:	4a8c      	ldr	r2, [pc, #560]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ddc:	4b8a      	ldr	r3, [pc, #552]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	4a89      	ldr	r2, [pc, #548]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005de8:	4a87      	ldr	r2, [pc, #540]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df8:	d115      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfa:	f7fb fab3 	bl	8001364 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e00:	e00b      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fb faaf 	bl	8001364 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d902      	bls.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	75fb      	strb	r3, [r7, #23]
            break;
 8005e18:	e005      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e1a:	4b7b      	ldr	r3, [pc, #492]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0ed      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d126      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3a:	d10d      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005e3c:	4b72      	ldr	r3, [pc, #456]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e4a:	0919      	lsrs	r1, r3, #4
 8005e4c:	4b70      	ldr	r3, [pc, #448]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005e4e:	400b      	ands	r3, r1
 8005e50:	496d      	ldr	r1, [pc, #436]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	610b      	str	r3, [r1, #16]
 8005e56:	e005      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005e58:	4b6b      	ldr	r3, [pc, #428]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	4a6a      	ldr	r2, [pc, #424]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e62:	6113      	str	r3, [r2, #16]
 8005e64:	4b68      	ldr	r3, [pc, #416]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e72:	4965      	ldr	r1, [pc, #404]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	670b      	str	r3, [r1, #112]	; 0x70
 8005e78:	e004      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	75bb      	strb	r3, [r7, #22]
 8005e7e:	e001      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d07e      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e94:	2b28      	cmp	r3, #40	; 0x28
 8005e96:	d867      	bhi.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005e98:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005f6f 	.word	0x08005f6f
 8005ea4:	08005f69 	.word	0x08005f69
 8005ea8:	08005f69 	.word	0x08005f69
 8005eac:	08005f69 	.word	0x08005f69
 8005eb0:	08005f69 	.word	0x08005f69
 8005eb4:	08005f69 	.word	0x08005f69
 8005eb8:	08005f69 	.word	0x08005f69
 8005ebc:	08005f69 	.word	0x08005f69
 8005ec0:	08005f45 	.word	0x08005f45
 8005ec4:	08005f69 	.word	0x08005f69
 8005ec8:	08005f69 	.word	0x08005f69
 8005ecc:	08005f69 	.word	0x08005f69
 8005ed0:	08005f69 	.word	0x08005f69
 8005ed4:	08005f69 	.word	0x08005f69
 8005ed8:	08005f69 	.word	0x08005f69
 8005edc:	08005f69 	.word	0x08005f69
 8005ee0:	08005f57 	.word	0x08005f57
 8005ee4:	08005f69 	.word	0x08005f69
 8005ee8:	08005f69 	.word	0x08005f69
 8005eec:	08005f69 	.word	0x08005f69
 8005ef0:	08005f69 	.word	0x08005f69
 8005ef4:	08005f69 	.word	0x08005f69
 8005ef8:	08005f69 	.word	0x08005f69
 8005efc:	08005f69 	.word	0x08005f69
 8005f00:	08005f6f 	.word	0x08005f6f
 8005f04:	08005f69 	.word	0x08005f69
 8005f08:	08005f69 	.word	0x08005f69
 8005f0c:	08005f69 	.word	0x08005f69
 8005f10:	08005f69 	.word	0x08005f69
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005f69 	.word	0x08005f69
 8005f1c:	08005f69 	.word	0x08005f69
 8005f20:	08005f6f 	.word	0x08005f6f
 8005f24:	08005f69 	.word	0x08005f69
 8005f28:	08005f69 	.word	0x08005f69
 8005f2c:	08005f69 	.word	0x08005f69
 8005f30:	08005f69 	.word	0x08005f69
 8005f34:	08005f69 	.word	0x08005f69
 8005f38:	08005f69 	.word	0x08005f69
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	08005f6f 	.word	0x08005f6f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fdf4 	bl	8006b38 <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f54:	e00c      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3324      	adds	r3, #36	; 0x24
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fe9d 	bl	8006c9c <RCCEx_PLL3_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6c:	e000      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f82:	4921      	ldr	r1, [pc, #132]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	654b      	str	r3, [r1, #84]	; 0x54
 8005f88:	e001      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d03e      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d820      	bhi.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005feb 	.word	0x08005feb
 8005fac:	08005fc1 	.word	0x08005fc1
 8005fb0:	08005fd3 	.word	0x08005fd3
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005feb 	.word	0x08005feb
 8005fbc:	08005feb 	.word	0x08005feb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fdb6 	bl	8006b38 <RCCEx_PLL2_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fd0:	e00c      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3324      	adds	r3, #36	; 0x24
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fe5f 	bl	8006c9c <RCCEx_PLL3_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fe2:	e003      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	e000      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d110      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ff2:	4b05      	ldr	r3, [pc, #20]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	f023 0207 	bic.w	r2, r3, #7
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffe:	4902      	ldr	r1, [pc, #8]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006000:	4313      	orrs	r3, r2
 8006002:	654b      	str	r3, [r1, #84]	; 0x54
 8006004:	e008      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
 800600c:	58024800 	.word	0x58024800
 8006010:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d039      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602a:	2b05      	cmp	r3, #5
 800602c:	d820      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006077 	.word	0x08006077
 8006038:	0800604d 	.word	0x0800604d
 800603c:	0800605f 	.word	0x0800605f
 8006040:	08006077 	.word	0x08006077
 8006044:	08006077 	.word	0x08006077
 8006048:	08006077 	.word	0x08006077
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	2101      	movs	r1, #1
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fd70 	bl	8006b38 <RCCEx_PLL2_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800605c:	e00c      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3324      	adds	r3, #36	; 0x24
 8006062:	2101      	movs	r1, #1
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fe19 	bl	8006c9c <RCCEx_PLL3_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800606e:	e003      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607e:	4bb7      	ldr	r3, [pc, #732]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	f023 0207 	bic.w	r2, r3, #7
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608c:	49b3      	ldr	r1, [pc, #716]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800608e:	4313      	orrs	r3, r2
 8006090:	658b      	str	r3, [r1, #88]	; 0x58
 8006092:	e001      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d04b      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ae:	d02e      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80060b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060b4:	d828      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ba:	d02a      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c0:	d822      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060c6:	d026      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80060c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060cc:	d81c      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d2:	d010      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80060d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d8:	d816      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01d      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80060de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060e2:	d111      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3304      	adds	r3, #4
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fd24 	bl	8006b38 <RCCEx_PLL2_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060f4:	e012      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3324      	adds	r3, #36	; 0x24
 80060fa:	2102      	movs	r1, #2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fdcd 	bl	8006c9c <RCCEx_PLL3_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006106:	e009      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
      break;
 800610c:	e006      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800610e:	bf00      	nop
 8006110:	e004      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006112:	bf00      	nop
 8006114:	e002      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800611a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006122:	4b8e      	ldr	r3, [pc, #568]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006130:	498a      	ldr	r1, [pc, #552]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006132:	4313      	orrs	r3, r2
 8006134:	654b      	str	r3, [r1, #84]	; 0x54
 8006136:	e001      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d04b      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800614e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006152:	d02e      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006154:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006158:	d828      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	d02a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006164:	d822      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800616a:	d026      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800616c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006170:	d81c      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d010      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617c:	d816      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01d      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006186:	d111      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fcd2 	bl	8006b38 <RCCEx_PLL2_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006198:	e012      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3324      	adds	r3, #36	; 0x24
 800619e:	2102      	movs	r1, #2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fd7b 	bl	8006c9c <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061aa:	e009      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
      break;
 80061b0:	e006      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80061b2:	bf00      	nop
 80061b4:	e004      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80061b6:	bf00      	nop
 80061b8:	e002      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80061ba:	bf00      	nop
 80061bc:	e000      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80061be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061c6:	4b65      	ldr	r3, [pc, #404]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d4:	4961      	ldr	r1, [pc, #388]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	658b      	str	r3, [r1, #88]	; 0x58
 80061da:	e001      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d04b      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061f6:	d02e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80061f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061fc:	d828      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80061fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006202:	d02a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006208:	d822      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800620a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800620e:	d026      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006210:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006214:	d81c      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800621a:	d010      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800621c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006220:	d816      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01d      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622a:	d111      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3304      	adds	r3, #4
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fc80 	bl	8006b38 <RCCEx_PLL2_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800623c:	e012      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3324      	adds	r3, #36	; 0x24
 8006242:	2102      	movs	r1, #2
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fd29 	bl	8006c9c <RCCEx_PLL3_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800624e:	e009      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	75fb      	strb	r3, [r7, #23]
      break;
 8006254:	e006      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800626a:	4b3c      	ldr	r3, [pc, #240]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800626c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006278:	4938      	ldr	r1, [pc, #224]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800627a:	4313      	orrs	r3, r2
 800627c:	658b      	str	r3, [r1, #88]	; 0x58
 800627e:	e001      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01a      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629a:	d10a      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3324      	adds	r3, #36	; 0x24
 80062a0:	2102      	movs	r1, #2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fcfa 	bl	8006c9c <RCCEx_PLL3_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062b2:	4b2a      	ldr	r3, [pc, #168]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c0:	4926      	ldr	r1, [pc, #152]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01a      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062dc:	d10a      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3324      	adds	r3, #36	; 0x24
 80062e2:	2102      	movs	r1, #2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fcd9 	bl	8006c9c <RCCEx_PLL3_Config>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062f4:	4b19      	ldr	r3, [pc, #100]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006302:	4916      	ldr	r1, [pc, #88]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006304:	4313      	orrs	r3, r2
 8006306:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d036      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800631a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800631e:	d01f      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006324:	d817      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800632a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800632e:	d009      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006330:	e011      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fbfd 	bl	8006b38 <RCCEx_PLL2_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006342:	e00e      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	2102      	movs	r1, #2
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fca6 	bl	8006c9c <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006354:	e005      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
      break;
 800635a:	e002      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800635c:	58024400 	.word	0x58024400
      break;
 8006360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006368:	4b93      	ldr	r3, [pc, #588]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006376:	4990      	ldr	r1, [pc, #576]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006378:	4313      	orrs	r3, r2
 800637a:	658b      	str	r3, [r1, #88]	; 0x58
 800637c:	e001      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637e:	7dfb      	ldrb	r3, [r7, #23]
 8006380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d033      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006398:	d01c      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800639a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800639e:	d816      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80063a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a4:	d003      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80063a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063aa:	d007      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80063ac:	e00f      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ae:	4b82      	ldr	r3, [pc, #520]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4a81      	ldr	r2, [pc, #516]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80063ba:	e00c      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	2101      	movs	r1, #1
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fc6a 	bl	8006c9c <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80063cc:	e003      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
      break;
 80063d2:	e000      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80063d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063dc:	4b76      	ldr	r3, [pc, #472]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ea:	4973      	ldr	r1, [pc, #460]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	654b      	str	r3, [r1, #84]	; 0x54
 80063f0:	e001      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d029      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640e:	d007      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006410:	e00f      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006412:	4b69      	ldr	r3, [pc, #420]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a68      	ldr	r2, [pc, #416]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800641e:	e00b      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	2102      	movs	r1, #2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fb86 	bl	8006b38 <RCCEx_PLL2_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006430:	e002      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
      break;
 8006436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800643e:	4b5e      	ldr	r3, [pc, #376]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006442:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	495b      	ldr	r1, [pc, #364]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800644c:	4313      	orrs	r3, r2
 800644e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006450:	e001      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3324      	adds	r3, #36	; 0x24
 8006466:	2102      	movs	r1, #2
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fc17 	bl	8006c9c <RCCEx_PLL3_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d030      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648c:	d017      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800648e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006492:	d811      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006498:	d013      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800649a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800649e:	d80b      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d010      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a8:	d106      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064aa:	4b43      	ldr	r3, [pc, #268]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	4a42      	ldr	r2, [pc, #264]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80064b6:	e007      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
      break;
 80064bc:	e004      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80064be:	bf00      	nop
 80064c0:	e002      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80064c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ce:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064da:	4937      	ldr	r1, [pc, #220]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	654b      	str	r3, [r1, #84]	; 0x54
 80064e0:	e001      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064f2:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	492e      	ldr	r1, [pc, #184]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006510:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800651e:	4926      	ldr	r1, [pc, #152]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006520:	4313      	orrs	r3, r2
 8006522:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006530:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006534:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800653c:	491e      	ldr	r1, [pc, #120]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800653e:	4313      	orrs	r3, r2
 8006540:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800654e:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	4a19      	ldr	r2, [pc, #100]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006554:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006558:	6113      	str	r3, [r2, #16]
 800655a:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006564:	4914      	ldr	r1, [pc, #80]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	da08      	bge.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006572:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657e:	490e      	ldr	r1, [pc, #56]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006580:	4313      	orrs	r3, r2
 8006582:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659e:	4906      	ldr	r1, [pc, #24]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80065a4:	7dbb      	ldrb	r3, [r7, #22]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	e000      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	58024400 	.word	0x58024400

080065bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80065c0:	f7ff f860 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	4904      	ldr	r1, [pc, #16]	; (80065e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80065dc:	4618      	mov	r0, r3
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	58024400 	.word	0x58024400
 80065e4:	0800cdbc 	.word	0x0800cdbc

080065e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b089      	sub	sp, #36	; 0x24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065f0:	4ba1      	ldr	r3, [pc, #644]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80065fa:	4b9f      	ldr	r3, [pc, #636]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	0b1b      	lsrs	r3, r3, #12
 8006600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006604:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006606:	4b9c      	ldr	r3, [pc, #624]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006612:	4b99      	ldr	r3, [pc, #612]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	08db      	lsrs	r3, r3, #3
 8006618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8111 	beq.w	8006858 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b02      	cmp	r3, #2
 800663a:	f000 8083 	beq.w	8006744 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b02      	cmp	r3, #2
 8006642:	f200 80a1 	bhi.w	8006788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d056      	beq.n	8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006652:	e099      	b.n	8006788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006654:	4b88      	ldr	r3, [pc, #544]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d02d      	beq.n	80066bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006660:	4b85      	ldr	r3, [pc, #532]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	08db      	lsrs	r3, r3, #3
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	4a84      	ldr	r2, [pc, #528]	; (800687c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800668a:	4b7b      	ldr	r3, [pc, #492]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800669a:	ed97 6a03 	vldr	s12, [r7, #12]
 800669e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80066ba:	e087      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006884 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80066ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ce:	4b6a      	ldr	r3, [pc, #424]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066de:	ed97 6a03 	vldr	s12, [r7, #12]
 80066e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066fe:	e065      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800670e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006712:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006722:	ed97 6a03 	vldr	s12, [r7, #12]
 8006726:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800672a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006742:	e043      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800688c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006756:	4b48      	ldr	r3, [pc, #288]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006766:	ed97 6a03 	vldr	s12, [r7, #12]
 800676a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800676e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800677a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006786:	e021      	b.n	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679a:	4b37      	ldr	r3, [pc, #220]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80067cc:	4b2a      	ldr	r3, [pc, #168]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	0a5b      	lsrs	r3, r3, #9
 80067d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f2:	ee17 2a90 	vmov	r2, s15
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80067fa:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006814:	edd7 6a07 	vldr	s13, [r7, #28]
 8006818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800681c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006820:	ee17 2a90 	vmov	r2, s15
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	0e1b      	lsrs	r3, r3, #24
 800682e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800683e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006842:	edd7 6a07 	vldr	s13, [r7, #28]
 8006846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800684a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684e:	ee17 2a90 	vmov	r2, s15
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006856:	e008      	b.n	800686a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]
}
 800686a:	bf00      	nop
 800686c:	3724      	adds	r7, #36	; 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	58024400 	.word	0x58024400
 800687c:	03d09000 	.word	0x03d09000
 8006880:	46000000 	.word	0x46000000
 8006884:	4c742400 	.word	0x4c742400
 8006888:	4a742400 	.word	0x4a742400
 800688c:	4af42400 	.word	0x4af42400

08006890 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006890:	b480      	push	{r7}
 8006892:	b089      	sub	sp, #36	; 0x24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006898:	4ba1      	ldr	r3, [pc, #644]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80068a2:	4b9f      	ldr	r3, [pc, #636]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	0d1b      	lsrs	r3, r3, #20
 80068a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80068ae:	4b9c      	ldr	r3, [pc, #624]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80068ba:	4b99      	ldr	r3, [pc, #612]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8111 	beq.w	8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	f000 8083 	beq.w	80069ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	f200 80a1 	bhi.w	8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d056      	beq.n	80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80068fa:	e099      	b.n	8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068fc:	4b88      	ldr	r3, [pc, #544]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d02d      	beq.n	8006964 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006908:	4b85      	ldr	r3, [pc, #532]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	08db      	lsrs	r3, r3, #3
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	4a84      	ldr	r2, [pc, #528]	; (8006b24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
 8006918:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	4b7b      	ldr	r3, [pc, #492]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006942:	ed97 6a03 	vldr	s12, [r7, #12]
 8006946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800694a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006962:	e087      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006976:	4b6a      	ldr	r3, [pc, #424]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006986:	ed97 6a03 	vldr	s12, [r7, #12]
 800698a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800698e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069a6:	e065      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ba:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ea:	e043      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80069fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fe:	4b48      	ldr	r3, [pc, #288]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a2e:	e021      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a42:	4b37      	ldr	r3, [pc, #220]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006a74:	4b2a      	ldr	r3, [pc, #168]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	0a5b      	lsrs	r3, r3, #9
 8006a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9a:	ee17 2a90 	vmov	r2, s15
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006aa2:	4b1f      	ldr	r3, [pc, #124]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ac8:	ee17 2a90 	vmov	r2, s15
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006ad0:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af6:	ee17 2a90 	vmov	r2, s15
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006afe:	e008      	b.n	8006b12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	609a      	str	r2, [r3, #8]
}
 8006b12:	bf00      	nop
 8006b14:	3724      	adds	r7, #36	; 0x24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	58024400 	.word	0x58024400
 8006b24:	03d09000 	.word	0x03d09000
 8006b28:	46000000 	.word	0x46000000
 8006b2c:	4c742400 	.word	0x4c742400
 8006b30:	4a742400 	.word	0x4a742400
 8006b34:	4af42400 	.word	0x4af42400

08006b38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b46:	4b53      	ldr	r3, [pc, #332]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d101      	bne.n	8006b56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e099      	b.n	8006c8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b56:	4b4f      	ldr	r3, [pc, #316]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a4e      	ldr	r2, [pc, #312]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b62:	f7fa fbff 	bl	8001364 <HAL_GetTick>
 8006b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b68:	e008      	b.n	8006b7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b6a:	f7fa fbfb 	bl	8001364 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e086      	b.n	8006c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b7c:	4b45      	ldr	r3, [pc, #276]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f0      	bne.n	8006b6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b88:	4b42      	ldr	r3, [pc, #264]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	493f      	ldr	r1, [pc, #252]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bcc:	4931      	ldr	r1, [pc, #196]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006bd2:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	492d      	ldr	r1, [pc, #180]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	f023 0220 	bic.w	r2, r3, #32
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	4928      	ldr	r1, [pc, #160]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006bf6:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006bfc:	f023 0310 	bic.w	r3, r3, #16
 8006c00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c02:	4b24      	ldr	r3, [pc, #144]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <RCCEx_PLL2_Config+0x160>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	69d2      	ldr	r2, [r2, #28]
 8006c0e:	00d2      	lsls	r2, r2, #3
 8006c10:	4920      	ldr	r1, [pc, #128]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c16:	4b1f      	ldr	r3, [pc, #124]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	4a1e      	ldr	r2, [pc, #120]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c1c:	f043 0310 	orr.w	r3, r3, #16
 8006c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	4a19      	ldr	r2, [pc, #100]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c34:	e00f      	b.n	8006c56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d106      	bne.n	8006c4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c3c:	4b15      	ldr	r3, [pc, #84]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4a14      	ldr	r2, [pc, #80]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c48:	e005      	b.n	8006c56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c56:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c62:	f7fa fb7f 	bl	8001364 <HAL_GetTick>
 8006c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c68:	e008      	b.n	8006c7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c6a:	f7fa fb7b 	bl	8001364 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e006      	b.n	8006c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <RCCEx_PLL2_Config+0x15c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
 8006c98:	ffff0007 	.word	0xffff0007

08006c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006caa:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d101      	bne.n	8006cba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e099      	b.n	8006dee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cba:	4b4f      	ldr	r3, [pc, #316]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a4e      	ldr	r2, [pc, #312]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc6:	f7fa fb4d 	bl	8001364 <HAL_GetTick>
 8006cca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ccc:	e008      	b.n	8006ce0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006cce:	f7fa fb49 	bl	8001364 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e086      	b.n	8006dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ce0:	4b45      	ldr	r3, [pc, #276]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f0      	bne.n	8006cce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006cec:	4b42      	ldr	r3, [pc, #264]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	051b      	lsls	r3, r3, #20
 8006cfa:	493f      	ldr	r1, [pc, #252]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	025b      	lsls	r3, r3, #9
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	061b      	lsls	r3, r3, #24
 8006d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d30:	4931      	ldr	r1, [pc, #196]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d36:	4b30      	ldr	r3, [pc, #192]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	492d      	ldr	r1, [pc, #180]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d48:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	4928      	ldr	r1, [pc, #160]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d5a:	4b27      	ldr	r3, [pc, #156]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d66:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <RCCEx_PLL3_Config+0x160>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	69d2      	ldr	r2, [r2, #28]
 8006d72:	00d2      	lsls	r2, r2, #3
 8006d74:	4920      	ldr	r1, [pc, #128]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4a19      	ldr	r2, [pc, #100]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d98:	e00f      	b.n	8006dba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d106      	bne.n	8006dae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006da0:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006da6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dac:	e005      	b.n	8006dba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006db8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dba:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a0e      	ldr	r2, [pc, #56]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc6:	f7fa facd 	bl	8001364 <HAL_GetTick>
 8006dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006dcc:	e008      	b.n	8006de0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006dce:	f7fa fac9 	bl	8001364 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e006      	b.n	8006dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <RCCEx_PLL3_Config+0x15c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	ffff0007 	.word	0xffff0007

08006e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e042      	b.n	8006e98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fa f86b 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2224      	movs	r2, #36	; 0x24
 8006e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0201 	bic.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fbe2 	bl	800760c <UART_SetConfig>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e022      	b.n	8006e98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 f936 	bl	80080cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0201 	orr.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f9bd 	bl	8008210 <UART_CheckIdleState>
 8006e96:	4603      	mov	r3, r0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	4613      	mov	r3, r2
 8006eae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	f040 8083 	bne.w	8006fc2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_UART_Transmit+0x28>
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e07b      	b.n	8006fc4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Transmit+0x3a>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e074      	b.n	8006fc4 <HAL_UART_Transmit+0x124>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2221      	movs	r2, #33	; 0x21
 8006eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ef2:	f7fa fa37 	bl	8001364 <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f10:	d108      	bne.n	8006f24 <HAL_UART_Transmit+0x84>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d104      	bne.n	8006f24 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	e003      	b.n	8006f2c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f34:	e02c      	b.n	8006f90 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2180      	movs	r1, #128	; 0x80
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f001 f9b0 	bl	80082a6 <UART_WaitOnFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e039      	b.n	8006fc4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3302      	adds	r3, #2
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	e007      	b.n	8006f7e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1cc      	bne.n	8006f36 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 f97d 	bl	80082a6 <UART_WaitOnFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e006      	b.n	8006fc4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e000      	b.n	8006fc4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
  }
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d131      	bne.n	8007048 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_UART_Receive_IT+0x24>
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e02a      	b.n	800704a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Receive_IT+0x36>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e023      	b.n	800704a <HAL_UART_Receive_IT+0x7e>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a0f      	ldr	r2, [pc, #60]	; (8007054 <HAL_UART_Receive_IT+0x88>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007036:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	461a      	mov	r2, r3
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f001 f9b2 	bl	80083a8 <UART_Start_Receive_IT>
 8007044:	4603      	mov	r3, r0
 8007046:	e000      	b.n	800704a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	58000c00 	.word	0x58000c00

08007058 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	f640 030f 	movw	r3, #2063	; 0x80f
 800707e:	4013      	ands	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d118      	bne.n	80070ba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d013      	beq.n	80070ba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8282 	beq.w	80075b4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
      }
      return;
 80070b8:	e27c      	b.n	80075b4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80ef 	beq.w	80072a0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4b73      	ldr	r3, [pc, #460]	; (8007294 <HAL_UART_IRQHandler+0x23c>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4b72      	ldr	r3, [pc, #456]	; (8007298 <HAL_UART_IRQHandler+0x240>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 80e4 	beq.w	80072a0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d010      	beq.n	8007104 <HAL_UART_IRQHandler+0xac>
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2201      	movs	r2, #1
 80070f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070fa:	f043 0201 	orr.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d010      	beq.n	8007130 <HAL_UART_IRQHandler+0xd8>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2202      	movs	r2, #2
 800711e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007126:	f043 0204 	orr.w	r2, r3, #4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d010      	beq.n	800715c <HAL_UART_IRQHandler+0x104>
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2204      	movs	r2, #4
 800714a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007152:	f043 0202 	orr.w	r2, r3, #2
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d015      	beq.n	8007192 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	4b48      	ldr	r3, [pc, #288]	; (8007294 <HAL_UART_IRQHandler+0x23c>)
 8007174:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2208      	movs	r2, #8
 8007180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007188:	f043 0208 	orr.w	r2, r3, #8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007198:	2b00      	cmp	r3, #0
 800719a:	d011      	beq.n	80071c0 <HAL_UART_IRQHandler+0x168>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b6:	f043 0220 	orr.w	r2, r3, #32
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 81f6 	beq.w	80075b8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d011      	beq.n	80071fa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007200:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d004      	beq.n	800721a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007216:	2b00      	cmp	r3, #0
 8007218:	d031      	beq.n	800727e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 f982 	bl	8008524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d123      	bne.n	8007276 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d013      	beq.n	800726e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800724a:	4a14      	ldr	r2, [pc, #80]	; (800729c <HAL_UART_IRQHandler+0x244>)
 800724c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007252:	4618      	mov	r0, r3
 8007254:	f7fa fd04 	bl	8001c60 <HAL_DMA_Abort_IT>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d017      	beq.n	800728e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	e00f      	b.n	800728e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f9b6 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	e00b      	b.n	800728e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f9b2 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e007      	b.n	800728e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9ae 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800728c:	e194      	b.n	80075b8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728e:	bf00      	nop
    return;
 8007290:	e192      	b.n	80075b8 <HAL_UART_IRQHandler+0x560>
 8007292:	bf00      	nop
 8007294:	10000001 	.word	0x10000001
 8007298:	04000120 	.word	0x04000120
 800729c:	08008589 	.word	0x08008589

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	f040 810f 	bne.w	80074c8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 8109 	beq.w	80074c8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8103 	beq.w	80074c8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2210      	movs	r2, #16
 80072c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	f040 80bb 	bne.w	8007450 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a96      	ldr	r2, [pc, #600]	; (800753c <HAL_UART_IRQHandler+0x4e4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d059      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a94      	ldr	r2, [pc, #592]	; (8007540 <HAL_UART_IRQHandler+0x4e8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d053      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a92      	ldr	r2, [pc, #584]	; (8007544 <HAL_UART_IRQHandler+0x4ec>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d04d      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a90      	ldr	r2, [pc, #576]	; (8007548 <HAL_UART_IRQHandler+0x4f0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d047      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a8e      	ldr	r2, [pc, #568]	; (800754c <HAL_UART_IRQHandler+0x4f4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d041      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a8c      	ldr	r2, [pc, #560]	; (8007550 <HAL_UART_IRQHandler+0x4f8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a8a      	ldr	r2, [pc, #552]	; (8007554 <HAL_UART_IRQHandler+0x4fc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d035      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a88      	ldr	r2, [pc, #544]	; (8007558 <HAL_UART_IRQHandler+0x500>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d02f      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a86      	ldr	r2, [pc, #536]	; (800755c <HAL_UART_IRQHandler+0x504>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d029      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a84      	ldr	r2, [pc, #528]	; (8007560 <HAL_UART_IRQHandler+0x508>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d023      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a82      	ldr	r2, [pc, #520]	; (8007564 <HAL_UART_IRQHandler+0x50c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a80      	ldr	r2, [pc, #512]	; (8007568 <HAL_UART_IRQHandler+0x510>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d017      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a7e      	ldr	r2, [pc, #504]	; (800756c <HAL_UART_IRQHandler+0x514>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d011      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a7c      	ldr	r2, [pc, #496]	; (8007570 <HAL_UART_IRQHandler+0x518>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00b      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a7a      	ldr	r2, [pc, #488]	; (8007574 <HAL_UART_IRQHandler+0x51c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d005      	beq.n	800739a <HAL_UART_IRQHandler+0x342>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a78      	ldr	r2, [pc, #480]	; (8007578 <HAL_UART_IRQHandler+0x520>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d105      	bne.n	80073a6 <HAL_UART_IRQHandler+0x34e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	e004      	b.n	80073b0 <HAL_UART_IRQHandler+0x358>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80073b2:	893b      	ldrh	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8101 	beq.w	80075bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073c0:	893a      	ldrh	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f080 80fa 	bcs.w	80075bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	893a      	ldrh	r2, [r7, #8]
 80073cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073da:	d02b      	beq.n	8007434 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0210 	bic.w	r2, r2, #16
 8007428:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742e:	4618      	mov	r0, r3
 8007430:	f7fa f8f8 	bl	8001624 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007440:	b29b      	uxth	r3, r3
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	b29b      	uxth	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f8d3 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800744e:	e0b5      	b.n	80075bc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800745c:	b29b      	uxth	r3, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80a8 	beq.w	80075c0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8007470:	897b      	ldrh	r3, [r7, #10]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80a4 	beq.w	80075c0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007486:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6899      	ldr	r1, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b3a      	ldr	r3, [pc, #232]	; (800757c <HAL_UART_IRQHandler+0x524>)
 8007494:	400b      	ands	r3, r1
 8007496:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0210 	bic.w	r2, r2, #16
 80074ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074bc:	897b      	ldrh	r3, [r7, #10]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f897 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074c6:	e07b      	b.n	80075c0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00d      	beq.n	80074ee <HAL_UART_IRQHandler+0x496>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fb5a 	bl	8008ba0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074ec:	e06b      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d012      	beq.n	800751e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007510:	2b00      	cmp	r3, #0
 8007512:	d057      	beq.n	80075c4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
    }
    return;
 800751c:	e052      	b.n	80075c4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d02b      	beq.n	8007580 <HAL_UART_IRQHandler+0x528>
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d026      	beq.n	8007580 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 f83e 	bl	80085b4 <UART_EndTransmit_IT>
    return;
 8007538:	e045      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
 800753a:	bf00      	nop
 800753c:	40020010 	.word	0x40020010
 8007540:	40020028 	.word	0x40020028
 8007544:	40020040 	.word	0x40020040
 8007548:	40020058 	.word	0x40020058
 800754c:	40020070 	.word	0x40020070
 8007550:	40020088 	.word	0x40020088
 8007554:	400200a0 	.word	0x400200a0
 8007558:	400200b8 	.word	0x400200b8
 800755c:	40020410 	.word	0x40020410
 8007560:	40020428 	.word	0x40020428
 8007564:	40020440 	.word	0x40020440
 8007568:	40020458 	.word	0x40020458
 800756c:	40020470 	.word	0x40020470
 8007570:	40020488 	.word	0x40020488
 8007574:	400204a0 	.word	0x400204a0
 8007578:	400204b8 	.word	0x400204b8
 800757c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d008      	beq.n	800759c <HAL_UART_IRQHandler+0x544>
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 fb17 	bl	8008bc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800759a:	e014      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00f      	beq.n	80075c6 <HAL_UART_IRQHandler+0x56e>
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da0c      	bge.n	80075c6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 fb01 	bl	8008bb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075b2:	e008      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
      return;
 80075b4:	bf00      	nop
 80075b6:	e006      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
    return;
 80075b8:	bf00      	nop
 80075ba:	e004      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
      return;
 80075bc:	bf00      	nop
 80075be:	e002      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
      return;
 80075c0:	bf00      	nop
 80075c2:	e000      	b.n	80075c6 <HAL_UART_IRQHandler+0x56e>
    return;
 80075c4:	bf00      	nop
  }
}
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800760c:	b5b0      	push	{r4, r5, r7, lr}
 800760e:	b08e      	sub	sp, #56	; 0x38
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	4313      	orrs	r3, r2
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	4bbf      	ldr	r3, [pc, #764]	; (8007938 <UART_SetConfig+0x32c>)
 800763a:	4013      	ands	r3, r2
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6812      	ldr	r2, [r2, #0]
 8007640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007642:	430b      	orrs	r3, r1
 8007644:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4ab5      	ldr	r2, [pc, #724]	; (800793c <UART_SetConfig+0x330>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007672:	4313      	orrs	r3, r2
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	4bb0      	ldr	r3, [pc, #704]	; (8007940 <UART_SetConfig+0x334>)
 800767e:	4013      	ands	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007686:	430b      	orrs	r3, r1
 8007688:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f023 010f 	bic.w	r1, r3, #15
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4aa7      	ldr	r2, [pc, #668]	; (8007944 <UART_SetConfig+0x338>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d176      	bne.n	8007798 <UART_SetConfig+0x18c>
 80076aa:	4ba7      	ldr	r3, [pc, #668]	; (8007948 <UART_SetConfig+0x33c>)
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076b2:	2b28      	cmp	r3, #40	; 0x28
 80076b4:	d86c      	bhi.n	8007790 <UART_SetConfig+0x184>
 80076b6:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <UART_SetConfig+0xb0>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	08007761 	.word	0x08007761
 80076c0:	08007791 	.word	0x08007791
 80076c4:	08007791 	.word	0x08007791
 80076c8:	08007791 	.word	0x08007791
 80076cc:	08007791 	.word	0x08007791
 80076d0:	08007791 	.word	0x08007791
 80076d4:	08007791 	.word	0x08007791
 80076d8:	08007791 	.word	0x08007791
 80076dc:	08007769 	.word	0x08007769
 80076e0:	08007791 	.word	0x08007791
 80076e4:	08007791 	.word	0x08007791
 80076e8:	08007791 	.word	0x08007791
 80076ec:	08007791 	.word	0x08007791
 80076f0:	08007791 	.word	0x08007791
 80076f4:	08007791 	.word	0x08007791
 80076f8:	08007791 	.word	0x08007791
 80076fc:	08007771 	.word	0x08007771
 8007700:	08007791 	.word	0x08007791
 8007704:	08007791 	.word	0x08007791
 8007708:	08007791 	.word	0x08007791
 800770c:	08007791 	.word	0x08007791
 8007710:	08007791 	.word	0x08007791
 8007714:	08007791 	.word	0x08007791
 8007718:	08007791 	.word	0x08007791
 800771c:	08007779 	.word	0x08007779
 8007720:	08007791 	.word	0x08007791
 8007724:	08007791 	.word	0x08007791
 8007728:	08007791 	.word	0x08007791
 800772c:	08007791 	.word	0x08007791
 8007730:	08007791 	.word	0x08007791
 8007734:	08007791 	.word	0x08007791
 8007738:	08007791 	.word	0x08007791
 800773c:	08007781 	.word	0x08007781
 8007740:	08007791 	.word	0x08007791
 8007744:	08007791 	.word	0x08007791
 8007748:	08007791 	.word	0x08007791
 800774c:	08007791 	.word	0x08007791
 8007750:	08007791 	.word	0x08007791
 8007754:	08007791 	.word	0x08007791
 8007758:	08007791 	.word	0x08007791
 800775c:	08007789 	.word	0x08007789
 8007760:	2301      	movs	r3, #1
 8007762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007766:	e222      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007768:	2304      	movs	r3, #4
 800776a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776e:	e21e      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007770:	2308      	movs	r3, #8
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007776:	e21a      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007778:	2310      	movs	r3, #16
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777e:	e216      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007780:	2320      	movs	r3, #32
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007786:	e212      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007788:	2340      	movs	r3, #64	; 0x40
 800778a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778e:	e20e      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007790:	2380      	movs	r3, #128	; 0x80
 8007792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007796:	e20a      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a6b      	ldr	r2, [pc, #428]	; (800794c <UART_SetConfig+0x340>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d130      	bne.n	8007804 <UART_SetConfig+0x1f8>
 80077a2:	4b69      	ldr	r3, [pc, #420]	; (8007948 <UART_SetConfig+0x33c>)
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b05      	cmp	r3, #5
 80077ac:	d826      	bhi.n	80077fc <UART_SetConfig+0x1f0>
 80077ae:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0x1a8>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077cd 	.word	0x080077cd
 80077b8:	080077d5 	.word	0x080077d5
 80077bc:	080077dd 	.word	0x080077dd
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	080077ed 	.word	0x080077ed
 80077c8:	080077f5 	.word	0x080077f5
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d2:	e1ec      	b.n	8007bae <UART_SetConfig+0x5a2>
 80077d4:	2304      	movs	r3, #4
 80077d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077da:	e1e8      	b.n	8007bae <UART_SetConfig+0x5a2>
 80077dc:	2308      	movs	r3, #8
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e2:	e1e4      	b.n	8007bae <UART_SetConfig+0x5a2>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ea:	e1e0      	b.n	8007bae <UART_SetConfig+0x5a2>
 80077ec:	2320      	movs	r3, #32
 80077ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f2:	e1dc      	b.n	8007bae <UART_SetConfig+0x5a2>
 80077f4:	2340      	movs	r3, #64	; 0x40
 80077f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fa:	e1d8      	b.n	8007bae <UART_SetConfig+0x5a2>
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007802:	e1d4      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a51      	ldr	r2, [pc, #324]	; (8007950 <UART_SetConfig+0x344>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d130      	bne.n	8007870 <UART_SetConfig+0x264>
 800780e:	4b4e      	ldr	r3, [pc, #312]	; (8007948 <UART_SetConfig+0x33c>)
 8007810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b05      	cmp	r3, #5
 8007818:	d826      	bhi.n	8007868 <UART_SetConfig+0x25c>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <UART_SetConfig+0x214>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007839 	.word	0x08007839
 8007824:	08007841 	.word	0x08007841
 8007828:	08007849 	.word	0x08007849
 800782c:	08007851 	.word	0x08007851
 8007830:	08007859 	.word	0x08007859
 8007834:	08007861 	.word	0x08007861
 8007838:	2300      	movs	r3, #0
 800783a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800783e:	e1b6      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007846:	e1b2      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800784e:	e1ae      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007856:	e1aa      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007858:	2320      	movs	r3, #32
 800785a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800785e:	e1a6      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007866:	e1a2      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007868:	2380      	movs	r3, #128	; 0x80
 800786a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800786e:	e19e      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a37      	ldr	r2, [pc, #220]	; (8007954 <UART_SetConfig+0x348>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d130      	bne.n	80078dc <UART_SetConfig+0x2d0>
 800787a:	4b33      	ldr	r3, [pc, #204]	; (8007948 <UART_SetConfig+0x33c>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b05      	cmp	r3, #5
 8007884:	d826      	bhi.n	80078d4 <UART_SetConfig+0x2c8>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0x280>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078ad 	.word	0x080078ad
 8007894:	080078b5 	.word	0x080078b5
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078c5 	.word	0x080078c5
 80078a0:	080078cd 	.word	0x080078cd
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078aa:	e180      	b.n	8007bae <UART_SetConfig+0x5a2>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078b2:	e17c      	b.n	8007bae <UART_SetConfig+0x5a2>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ba:	e178      	b.n	8007bae <UART_SetConfig+0x5a2>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078c2:	e174      	b.n	8007bae <UART_SetConfig+0x5a2>
 80078c4:	2320      	movs	r3, #32
 80078c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ca:	e170      	b.n	8007bae <UART_SetConfig+0x5a2>
 80078cc:	2340      	movs	r3, #64	; 0x40
 80078ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078d2:	e16c      	b.n	8007bae <UART_SetConfig+0x5a2>
 80078d4:	2380      	movs	r3, #128	; 0x80
 80078d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078da:	e168      	b.n	8007bae <UART_SetConfig+0x5a2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1d      	ldr	r2, [pc, #116]	; (8007958 <UART_SetConfig+0x34c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d142      	bne.n	800796c <UART_SetConfig+0x360>
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <UART_SetConfig+0x33c>)
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	d838      	bhi.n	8007964 <UART_SetConfig+0x358>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <UART_SetConfig+0x2ec>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007911 	.word	0x08007911
 80078fc:	08007919 	.word	0x08007919
 8007900:	08007921 	.word	0x08007921
 8007904:	08007929 	.word	0x08007929
 8007908:	08007931 	.word	0x08007931
 800790c:	0800795d 	.word	0x0800795d
 8007910:	2300      	movs	r3, #0
 8007912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007916:	e14a      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007918:	2304      	movs	r3, #4
 800791a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800791e:	e146      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007920:	2308      	movs	r3, #8
 8007922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007926:	e142      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007928:	2310      	movs	r3, #16
 800792a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800792e:	e13e      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007930:	2320      	movs	r3, #32
 8007932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007936:	e13a      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007938:	cfff69f3 	.word	0xcfff69f3
 800793c:	58000c00 	.word	0x58000c00
 8007940:	11fff4ff 	.word	0x11fff4ff
 8007944:	40011000 	.word	0x40011000
 8007948:	58024400 	.word	0x58024400
 800794c:	40004400 	.word	0x40004400
 8007950:	40004800 	.word	0x40004800
 8007954:	40004c00 	.word	0x40004c00
 8007958:	40005000 	.word	0x40005000
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007962:	e124      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800796a:	e120      	b.n	8007bae <UART_SetConfig+0x5a2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4acc      	ldr	r2, [pc, #816]	; (8007ca4 <UART_SetConfig+0x698>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d176      	bne.n	8007a64 <UART_SetConfig+0x458>
 8007976:	4bcc      	ldr	r3, [pc, #816]	; (8007ca8 <UART_SetConfig+0x69c>)
 8007978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800797e:	2b28      	cmp	r3, #40	; 0x28
 8007980:	d86c      	bhi.n	8007a5c <UART_SetConfig+0x450>
 8007982:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <UART_SetConfig+0x37c>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	08007a2d 	.word	0x08007a2d
 800798c:	08007a5d 	.word	0x08007a5d
 8007990:	08007a5d 	.word	0x08007a5d
 8007994:	08007a5d 	.word	0x08007a5d
 8007998:	08007a5d 	.word	0x08007a5d
 800799c:	08007a5d 	.word	0x08007a5d
 80079a0:	08007a5d 	.word	0x08007a5d
 80079a4:	08007a5d 	.word	0x08007a5d
 80079a8:	08007a35 	.word	0x08007a35
 80079ac:	08007a5d 	.word	0x08007a5d
 80079b0:	08007a5d 	.word	0x08007a5d
 80079b4:	08007a5d 	.word	0x08007a5d
 80079b8:	08007a5d 	.word	0x08007a5d
 80079bc:	08007a5d 	.word	0x08007a5d
 80079c0:	08007a5d 	.word	0x08007a5d
 80079c4:	08007a5d 	.word	0x08007a5d
 80079c8:	08007a3d 	.word	0x08007a3d
 80079cc:	08007a5d 	.word	0x08007a5d
 80079d0:	08007a5d 	.word	0x08007a5d
 80079d4:	08007a5d 	.word	0x08007a5d
 80079d8:	08007a5d 	.word	0x08007a5d
 80079dc:	08007a5d 	.word	0x08007a5d
 80079e0:	08007a5d 	.word	0x08007a5d
 80079e4:	08007a5d 	.word	0x08007a5d
 80079e8:	08007a45 	.word	0x08007a45
 80079ec:	08007a5d 	.word	0x08007a5d
 80079f0:	08007a5d 	.word	0x08007a5d
 80079f4:	08007a5d 	.word	0x08007a5d
 80079f8:	08007a5d 	.word	0x08007a5d
 80079fc:	08007a5d 	.word	0x08007a5d
 8007a00:	08007a5d 	.word	0x08007a5d
 8007a04:	08007a5d 	.word	0x08007a5d
 8007a08:	08007a4d 	.word	0x08007a4d
 8007a0c:	08007a5d 	.word	0x08007a5d
 8007a10:	08007a5d 	.word	0x08007a5d
 8007a14:	08007a5d 	.word	0x08007a5d
 8007a18:	08007a5d 	.word	0x08007a5d
 8007a1c:	08007a5d 	.word	0x08007a5d
 8007a20:	08007a5d 	.word	0x08007a5d
 8007a24:	08007a5d 	.word	0x08007a5d
 8007a28:	08007a55 	.word	0x08007a55
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a32:	e0bc      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a3a:	e0b8      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a42:	e0b4      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a4a:	e0b0      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a52:	e0ac      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007a54:	2340      	movs	r3, #64	; 0x40
 8007a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a5a:	e0a8      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a62:	e0a4      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a90      	ldr	r2, [pc, #576]	; (8007cac <UART_SetConfig+0x6a0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d130      	bne.n	8007ad0 <UART_SetConfig+0x4c4>
 8007a6e:	4b8e      	ldr	r3, [pc, #568]	; (8007ca8 <UART_SetConfig+0x69c>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d826      	bhi.n	8007ac8 <UART_SetConfig+0x4bc>
 8007a7a:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <UART_SetConfig+0x474>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007a99 	.word	0x08007a99
 8007a84:	08007aa1 	.word	0x08007aa1
 8007a88:	08007aa9 	.word	0x08007aa9
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9e:	e086      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa6:	e082      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aae:	e07e      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ab6:	e07a      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007ab8:	2320      	movs	r3, #32
 8007aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007abe:	e076      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ac6:	e072      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007ac8:	2380      	movs	r3, #128	; 0x80
 8007aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ace:	e06e      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a76      	ldr	r2, [pc, #472]	; (8007cb0 <UART_SetConfig+0x6a4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d130      	bne.n	8007b3c <UART_SetConfig+0x530>
 8007ada:	4b73      	ldr	r3, [pc, #460]	; (8007ca8 <UART_SetConfig+0x69c>)
 8007adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	2b05      	cmp	r3, #5
 8007ae4:	d826      	bhi.n	8007b34 <UART_SetConfig+0x528>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <UART_SetConfig+0x4e0>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b05 	.word	0x08007b05
 8007af0:	08007b0d 	.word	0x08007b0d
 8007af4:	08007b15 	.word	0x08007b15
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b25 	.word	0x08007b25
 8007b00:	08007b2d 	.word	0x08007b2d
 8007b04:	2300      	movs	r3, #0
 8007b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0a:	e050      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b12:	e04c      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b14:	2308      	movs	r3, #8
 8007b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1a:	e048      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b1c:	2310      	movs	r3, #16
 8007b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b22:	e044      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b24:	2320      	movs	r3, #32
 8007b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2a:	e040      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b2c:	2340      	movs	r3, #64	; 0x40
 8007b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b32:	e03c      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b34:	2380      	movs	r3, #128	; 0x80
 8007b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b3a:	e038      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a5c      	ldr	r2, [pc, #368]	; (8007cb4 <UART_SetConfig+0x6a8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d130      	bne.n	8007ba8 <UART_SetConfig+0x59c>
 8007b46:	4b58      	ldr	r3, [pc, #352]	; (8007ca8 <UART_SetConfig+0x69c>)
 8007b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d826      	bhi.n	8007ba0 <UART_SetConfig+0x594>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x54c>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b71 	.word	0x08007b71
 8007b5c:	08007b79 	.word	0x08007b79
 8007b60:	08007b81 	.word	0x08007b81
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007b99 	.word	0x08007b99
 8007b70:	2302      	movs	r3, #2
 8007b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b76:	e01a      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b78:	2304      	movs	r3, #4
 8007b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7e:	e016      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b80:	2308      	movs	r3, #8
 8007b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b86:	e012      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b8e:	e00e      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b90:	2320      	movs	r3, #32
 8007b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b96:	e00a      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007b98:	2340      	movs	r3, #64	; 0x40
 8007b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b9e:	e006      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007ba0:	2380      	movs	r3, #128	; 0x80
 8007ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ba6:	e002      	b.n	8007bae <UART_SetConfig+0x5a2>
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a40      	ldr	r2, [pc, #256]	; (8007cb4 <UART_SetConfig+0x6a8>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	f040 80ef 	bne.w	8007d98 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	dc46      	bgt.n	8007c50 <UART_SetConfig+0x644>
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	f2c0 8081 	blt.w	8007cca <UART_SetConfig+0x6be>
 8007bc8:	3b02      	subs	r3, #2
 8007bca:	2b1e      	cmp	r3, #30
 8007bcc:	d87d      	bhi.n	8007cca <UART_SetConfig+0x6be>
 8007bce:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <UART_SetConfig+0x5c8>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007c57 	.word	0x08007c57
 8007bd8:	08007ccb 	.word	0x08007ccb
 8007bdc:	08007c5f 	.word	0x08007c5f
 8007be0:	08007ccb 	.word	0x08007ccb
 8007be4:	08007ccb 	.word	0x08007ccb
 8007be8:	08007ccb 	.word	0x08007ccb
 8007bec:	08007c6f 	.word	0x08007c6f
 8007bf0:	08007ccb 	.word	0x08007ccb
 8007bf4:	08007ccb 	.word	0x08007ccb
 8007bf8:	08007ccb 	.word	0x08007ccb
 8007bfc:	08007ccb 	.word	0x08007ccb
 8007c00:	08007ccb 	.word	0x08007ccb
 8007c04:	08007ccb 	.word	0x08007ccb
 8007c08:	08007ccb 	.word	0x08007ccb
 8007c0c:	08007c7f 	.word	0x08007c7f
 8007c10:	08007ccb 	.word	0x08007ccb
 8007c14:	08007ccb 	.word	0x08007ccb
 8007c18:	08007ccb 	.word	0x08007ccb
 8007c1c:	08007ccb 	.word	0x08007ccb
 8007c20:	08007ccb 	.word	0x08007ccb
 8007c24:	08007ccb 	.word	0x08007ccb
 8007c28:	08007ccb 	.word	0x08007ccb
 8007c2c:	08007ccb 	.word	0x08007ccb
 8007c30:	08007ccb 	.word	0x08007ccb
 8007c34:	08007ccb 	.word	0x08007ccb
 8007c38:	08007ccb 	.word	0x08007ccb
 8007c3c:	08007ccb 	.word	0x08007ccb
 8007c40:	08007ccb 	.word	0x08007ccb
 8007c44:	08007ccb 	.word	0x08007ccb
 8007c48:	08007ccb 	.word	0x08007ccb
 8007c4c:	08007cbd 	.word	0x08007cbd
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	d036      	beq.n	8007cc2 <UART_SetConfig+0x6b6>
 8007c54:	e039      	b.n	8007cca <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c56:	f7fe fcb1 	bl	80065bc <HAL_RCCEx_GetD3PCLK1Freq>
 8007c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007c5c:	e03b      	b.n	8007cd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5e:	f107 0314 	add.w	r3, r7, #20
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe fcc0 	bl	80065e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c6c:	e033      	b.n	8007cd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c6e:	f107 0308 	add.w	r3, r7, #8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fe0c 	bl	8006890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c7c:	e02b      	b.n	8007cd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <UART_SetConfig+0x69c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <UART_SetConfig+0x69c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <UART_SetConfig+0x6ac>)
 8007c96:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c9c:	e01b      	b.n	8007cd6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007c9e:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <UART_SetConfig+0x6ac>)
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ca2:	e018      	b.n	8007cd6 <UART_SetConfig+0x6ca>
 8007ca4:	40011400 	.word	0x40011400
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	40007800 	.word	0x40007800
 8007cb0:	40007c00 	.word	0x40007c00
 8007cb4:	58000c00 	.word	0x58000c00
 8007cb8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cbc:	4bc4      	ldr	r3, [pc, #784]	; (8007fd0 <UART_SetConfig+0x9c4>)
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cc0:	e009      	b.n	8007cd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007cc8:	e005      	b.n	8007cd6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007cd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 81da 	beq.w	8008092 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	4abc      	ldr	r2, [pc, #752]	; (8007fd4 <UART_SetConfig+0x9c8>)
 8007ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	4413      	add	r3, r2
 8007cfc:	6a3a      	ldr	r2, [r7, #32]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d305      	bcc.n	8007d0e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d08:	6a3a      	ldr	r2, [r7, #32]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d903      	bls.n	8007d16 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007d14:	e1bd      	b.n	8008092 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f04f 0100 	mov.w	r1, #0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	4aac      	ldr	r2, [pc, #688]	; (8007fd4 <UART_SetConfig+0x9c8>)
 8007d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	f7f8 fb2f 	bl	8000390 <__aeabi_uldivmod>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	020b      	lsls	r3, r1, #8
 8007d44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d48:	0202      	lsls	r2, r0, #8
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	6849      	ldr	r1, [r1, #4]
 8007d4e:	0849      	lsrs	r1, r1, #1
 8007d50:	4608      	mov	r0, r1
 8007d52:	f04f 0100 	mov.w	r1, #0
 8007d56:	1814      	adds	r4, r2, r0
 8007d58:	eb43 0501 	adc.w	r5, r3, r1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	461a      	mov	r2, r3
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fb11 	bl	8000390 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4613      	mov	r3, r2
 8007d74:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7c:	d308      	bcc.n	8007d90 <UART_SetConfig+0x784>
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d84:	d204      	bcs.n	8007d90 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	e180      	b.n	8008092 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007d96:	e17c      	b.n	8008092 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da0:	f040 80bf 	bne.w	8007f22 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	dc49      	bgt.n	8007e40 <UART_SetConfig+0x834>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	db7c      	blt.n	8007eaa <UART_SetConfig+0x89e>
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d87a      	bhi.n	8007eaa <UART_SetConfig+0x89e>
 8007db4:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <UART_SetConfig+0x7b0>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007e47 	.word	0x08007e47
 8007dc0:	08007e4f 	.word	0x08007e4f
 8007dc4:	08007eab 	.word	0x08007eab
 8007dc8:	08007eab 	.word	0x08007eab
 8007dcc:	08007e57 	.word	0x08007e57
 8007dd0:	08007eab 	.word	0x08007eab
 8007dd4:	08007eab 	.word	0x08007eab
 8007dd8:	08007eab 	.word	0x08007eab
 8007ddc:	08007e67 	.word	0x08007e67
 8007de0:	08007eab 	.word	0x08007eab
 8007de4:	08007eab 	.word	0x08007eab
 8007de8:	08007eab 	.word	0x08007eab
 8007dec:	08007eab 	.word	0x08007eab
 8007df0:	08007eab 	.word	0x08007eab
 8007df4:	08007eab 	.word	0x08007eab
 8007df8:	08007eab 	.word	0x08007eab
 8007dfc:	08007e77 	.word	0x08007e77
 8007e00:	08007eab 	.word	0x08007eab
 8007e04:	08007eab 	.word	0x08007eab
 8007e08:	08007eab 	.word	0x08007eab
 8007e0c:	08007eab 	.word	0x08007eab
 8007e10:	08007eab 	.word	0x08007eab
 8007e14:	08007eab 	.word	0x08007eab
 8007e18:	08007eab 	.word	0x08007eab
 8007e1c:	08007eab 	.word	0x08007eab
 8007e20:	08007eab 	.word	0x08007eab
 8007e24:	08007eab 	.word	0x08007eab
 8007e28:	08007eab 	.word	0x08007eab
 8007e2c:	08007eab 	.word	0x08007eab
 8007e30:	08007eab 	.word	0x08007eab
 8007e34:	08007eab 	.word	0x08007eab
 8007e38:	08007eab 	.word	0x08007eab
 8007e3c:	08007e9d 	.word	0x08007e9d
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d02e      	beq.n	8007ea2 <UART_SetConfig+0x896>
 8007e44:	e031      	b.n	8007eaa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e46:	f7fd fc4d 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 8007e4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e4c:	e033      	b.n	8007eb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e4e:	f7fd fc5f 	bl	8005710 <HAL_RCC_GetPCLK2Freq>
 8007e52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e54:	e02f      	b.n	8007eb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e56:	f107 0314 	add.w	r3, r7, #20
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fbc4 	bl	80065e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e64:	e027      	b.n	8007eb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e66:	f107 0308 	add.w	r3, r7, #8
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fd10 	bl	8006890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e74:	e01f      	b.n	8007eb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e76:	4b58      	ldr	r3, [pc, #352]	; (8007fd8 <UART_SetConfig+0x9cc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e82:	4b55      	ldr	r3, [pc, #340]	; (8007fd8 <UART_SetConfig+0x9cc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	08db      	lsrs	r3, r3, #3
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	4a53      	ldr	r2, [pc, #332]	; (8007fdc <UART_SetConfig+0x9d0>)
 8007e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e94:	e00f      	b.n	8007eb6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007e96:	4b51      	ldr	r3, [pc, #324]	; (8007fdc <UART_SetConfig+0x9d0>)
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e9a:	e00c      	b.n	8007eb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e9c:	4b4c      	ldr	r3, [pc, #304]	; (8007fd0 <UART_SetConfig+0x9c4>)
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ea0:	e009      	b.n	8007eb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ea8:	e005      	b.n	8007eb6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80ea 	beq.w	8008092 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	4a44      	ldr	r2, [pc, #272]	; (8007fd4 <UART_SetConfig+0x9c8>)
 8007ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed0:	005a      	lsls	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	085b      	lsrs	r3, r3, #1
 8007ed8:	441a      	add	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	2b0f      	cmp	r3, #15
 8007eea:	d916      	bls.n	8007f1a <UART_SetConfig+0x90e>
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef2:	d212      	bcs.n	8007f1a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f023 030f 	bic.w	r3, r3, #15
 8007efc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	085b      	lsrs	r3, r3, #1
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007f16:	60da      	str	r2, [r3, #12]
 8007f18:	e0bb      	b.n	8008092 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007f20:	e0b7      	b.n	8008092 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f26:	2b20      	cmp	r3, #32
 8007f28:	dc4a      	bgt.n	8007fc0 <UART_SetConfig+0x9b4>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f2c0 8086 	blt.w	800803c <UART_SetConfig+0xa30>
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	f200 8083 	bhi.w	800803c <UART_SetConfig+0xa30>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <UART_SetConfig+0x930>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007fc7 	.word	0x08007fc7
 8007f40:	08007fe1 	.word	0x08007fe1
 8007f44:	0800803d 	.word	0x0800803d
 8007f48:	0800803d 	.word	0x0800803d
 8007f4c:	08007fe9 	.word	0x08007fe9
 8007f50:	0800803d 	.word	0x0800803d
 8007f54:	0800803d 	.word	0x0800803d
 8007f58:	0800803d 	.word	0x0800803d
 8007f5c:	08007ff9 	.word	0x08007ff9
 8007f60:	0800803d 	.word	0x0800803d
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	0800803d 	.word	0x0800803d
 8007f6c:	0800803d 	.word	0x0800803d
 8007f70:	0800803d 	.word	0x0800803d
 8007f74:	0800803d 	.word	0x0800803d
 8007f78:	0800803d 	.word	0x0800803d
 8007f7c:	08008009 	.word	0x08008009
 8007f80:	0800803d 	.word	0x0800803d
 8007f84:	0800803d 	.word	0x0800803d
 8007f88:	0800803d 	.word	0x0800803d
 8007f8c:	0800803d 	.word	0x0800803d
 8007f90:	0800803d 	.word	0x0800803d
 8007f94:	0800803d 	.word	0x0800803d
 8007f98:	0800803d 	.word	0x0800803d
 8007f9c:	0800803d 	.word	0x0800803d
 8007fa0:	0800803d 	.word	0x0800803d
 8007fa4:	0800803d 	.word	0x0800803d
 8007fa8:	0800803d 	.word	0x0800803d
 8007fac:	0800803d 	.word	0x0800803d
 8007fb0:	0800803d 	.word	0x0800803d
 8007fb4:	0800803d 	.word	0x0800803d
 8007fb8:	0800803d 	.word	0x0800803d
 8007fbc:	0800802f 	.word	0x0800802f
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d037      	beq.n	8008034 <UART_SetConfig+0xa28>
 8007fc4:	e03a      	b.n	800803c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fc6:	f7fd fb8d 	bl	80056e4 <HAL_RCC_GetPCLK1Freq>
 8007fca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007fcc:	e03c      	b.n	8008048 <UART_SetConfig+0xa3c>
 8007fce:	bf00      	nop
 8007fd0:	003d0900 	.word	0x003d0900
 8007fd4:	0800cdcc 	.word	0x0800cdcc
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe0:	f7fd fb96 	bl	8005710 <HAL_RCC_GetPCLK2Freq>
 8007fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007fe6:	e02f      	b.n	8008048 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fafb 	bl	80065e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ff6:	e027      	b.n	8008048 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff8:	f107 0308 	add.w	r3, r7, #8
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe fc47 	bl	8006890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008006:	e01f      	b.n	8008048 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008008:	4b2c      	ldr	r3, [pc, #176]	; (80080bc <UART_SetConfig+0xab0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008014:	4b29      	ldr	r3, [pc, #164]	; (80080bc <UART_SetConfig+0xab0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	08db      	lsrs	r3, r3, #3
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	4a28      	ldr	r2, [pc, #160]	; (80080c0 <UART_SetConfig+0xab4>)
 8008020:	fa22 f303 	lsr.w	r3, r2, r3
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008026:	e00f      	b.n	8008048 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008028:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <UART_SetConfig+0xab4>)
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800802c:	e00c      	b.n	8008048 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800802e:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <UART_SetConfig+0xab8>)
 8008030:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008032:	e009      	b.n	8008048 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800803a:	e005      	b.n	8008048 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008046:	bf00      	nop
    }

    if (pclk != 0U)
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d021      	beq.n	8008092 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	4a1d      	ldr	r2, [pc, #116]	; (80080c8 <UART_SetConfig+0xabc>)
 8008054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008058:	461a      	mov	r2, r3
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	085b      	lsrs	r3, r3, #1
 8008066:	441a      	add	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	b29b      	uxth	r3, r3
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d908      	bls.n	800808c <UART_SetConfig+0xa80>
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008080:	d204      	bcs.n	800808c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008088:	60da      	str	r2, [r3, #12]
 800808a:	e002      	b.n	8008092 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3738      	adds	r7, #56	; 0x38
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bdb0      	pop	{r4, r5, r7, pc}
 80080ba:	bf00      	nop
 80080bc:	58024400 	.word	0x58024400
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	003d0900 	.word	0x003d0900
 80080c8:	0800cdcc 	.word	0x0800cdcc

080080cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	f003 0308 	and.w	r3, r3, #8
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01a      	beq.n	80081e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ca:	d10a      	bne.n	80081e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	605a      	str	r2, [r3, #4]
  }
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af02      	add	r7, sp, #8
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008220:	f7f9 f8a0 	bl	8001364 <HAL_GetTick>
 8008224:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b08      	cmp	r3, #8
 8008232:	d10e      	bne.n	8008252 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f82f 	bl	80082a6 <UART_WaitOnFlagUntilTimeout>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e025      	b.n	800829e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b04      	cmp	r3, #4
 800825e:	d10e      	bne.n	800827e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f819 	bl	80082a6 <UART_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e00f      	b.n	800829e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b6:	e062      	b.n	800837e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082be:	d05e      	beq.n	800837e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c0:	f7f9 f850 	bl	8001364 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d302      	bcc.n	80082d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d11d      	bne.n	8008312 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0201 	bic.w	r2, r2, #1
 80082f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e045      	b.n	800839e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d02e      	beq.n	800837e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800832a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832e:	d126      	bne.n	800837e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008348:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e00f      	b.n	800839e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4013      	ands	r3, r2
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	429a      	cmp	r2, r3
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2300      	movne	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	429a      	cmp	r2, r3
 800839a:	d08d      	beq.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083da:	d10e      	bne.n	80083fa <UART_Start_Receive_IT+0x52>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <UART_Start_Receive_IT+0x48>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083ee:	e02d      	b.n	800844c <UART_Start_Receive_IT+0xa4>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	22ff      	movs	r2, #255	; 0xff
 80083f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083f8:	e028      	b.n	800844c <UART_Start_Receive_IT+0xa4>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10d      	bne.n	800841e <UART_Start_Receive_IT+0x76>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <UART_Start_Receive_IT+0x6c>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	22ff      	movs	r2, #255	; 0xff
 800840e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008412:	e01b      	b.n	800844c <UART_Start_Receive_IT+0xa4>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	227f      	movs	r2, #127	; 0x7f
 8008418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800841c:	e016      	b.n	800844c <UART_Start_Receive_IT+0xa4>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008426:	d10d      	bne.n	8008444 <UART_Start_Receive_IT+0x9c>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <UART_Start_Receive_IT+0x92>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	227f      	movs	r2, #127	; 0x7f
 8008434:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008438:	e008      	b.n	800844c <UART_Start_Receive_IT+0xa4>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	223f      	movs	r2, #63	; 0x3f
 800843e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008442:	e003      	b.n	800844c <UART_Start_Receive_IT+0xa4>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2222      	movs	r2, #34	; 0x22
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008474:	d12a      	bne.n	80084cc <UART_Start_Receive_IT+0x124>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	429a      	cmp	r2, r3
 8008480:	d324      	bcc.n	80084cc <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848a:	d107      	bne.n	800849c <UART_Start_Receive_IT+0xf4>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4a1f      	ldr	r2, [pc, #124]	; (8008514 <UART_Start_Receive_IT+0x16c>)
 8008498:	671a      	str	r2, [r3, #112]	; 0x70
 800849a:	e002      	b.n	80084a2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a1e      	ldr	r2, [pc, #120]	; (8008518 <UART_Start_Receive_IT+0x170>)
 80084a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084b8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80084c8:	609a      	str	r2, [r3, #8]
 80084ca:	e01b      	b.n	8008504 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d4:	d107      	bne.n	80084e6 <UART_Start_Receive_IT+0x13e>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4a0e      	ldr	r2, [pc, #56]	; (800851c <UART_Start_Receive_IT+0x174>)
 80084e2:	671a      	str	r2, [r3, #112]	; 0x70
 80084e4:	e002      	b.n	80084ec <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a0d      	ldr	r2, [pc, #52]	; (8008520 <UART_Start_Receive_IT+0x178>)
 80084ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008502:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	0800899d 	.word	0x0800899d
 8008518:	08008799 	.word	0x08008799
 800851c:	080086c1 	.word	0x080086c1
 8008520:	080085e9 	.word	0x080085e9

08008524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800853a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6899      	ldr	r1, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <UART_EndRxTransfer+0x60>)
 8008548:	400b      	ands	r3, r1
 800854a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008550:	2b01      	cmp	r3, #1
 8008552:	d107      	bne.n	8008564 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0210 	bic.w	r2, r2, #16
 8008562:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	effffffe 	.word	0xeffffffe

08008588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff f81a 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fe fff6 	bl	80075cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fe:	2b22      	cmp	r3, #34	; 0x22
 8008600:	d152      	bne.n	80086a8 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800860a:	89bb      	ldrh	r3, [r7, #12]
 800860c:	b2d9      	uxtb	r1, r3
 800860e:	89fb      	ldrh	r3, [r7, #14]
 8008610:	b2da      	uxtb	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008616:	400a      	ands	r2, r1
 8008618:	b2d2      	uxtb	r2, r2
 800861a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800863e:	b29b      	uxth	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d139      	bne.n	80086b8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008652:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008676:	2b01      	cmp	r3, #1
 8008678:	d10f      	bne.n	800869a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0210 	bic.w	r2, r2, #16
 8008688:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7fe ffae 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 8008698:	e002      	b.n	80086a0 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7f8 fa4a 	bl	8000b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086a6:	e007      	b.n	80086b8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699a      	ldr	r2, [r3, #24]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0208 	orr.w	r2, r2, #8
 80086b6:	619a      	str	r2, [r3, #24]
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d6:	2b22      	cmp	r3, #34	; 0x22
 80086d8:	d152      	bne.n	8008780 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80086e8:	89ba      	ldrh	r2, [r7, #12]
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	4013      	ands	r3, r2
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f8:	1c9a      	adds	r2, r3, #2
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008704:	b29b      	uxth	r3, r3
 8008706:	3b01      	subs	r3, #1
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008716:	b29b      	uxth	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d139      	bne.n	8008790 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800872a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800874e:	2b01      	cmp	r3, #1
 8008750:	d10f      	bne.n	8008772 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0210 	bic.w	r2, r2, #16
 8008760:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7fe ff42 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 8008770:	e002      	b.n	8008778 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f8 f9de 	bl	8000b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800877e:	e007      	b.n	8008790 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0208 	orr.w	r2, r2, #8
 800878e:	619a      	str	r2, [r3, #24]
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087a6:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c6:	2b22      	cmp	r3, #34	; 0x22
 80087c8:	f040 80d8 	bne.w	800897c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087d2:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087d4:	e0a8      	b.n	8008928 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087de:	89bb      	ldrh	r3, [r7, #12]
 80087e0:	b2d9      	uxtb	r1, r3
 80087e2:	8b7b      	ldrh	r3, [r7, #26]
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	400a      	ands	r2, r1
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b00      	cmp	r3, #0
 800881c:	d04d      	beq.n	80088ba <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d010      	beq.n	800884a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2201      	movs	r2, #1
 8008838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008840:	f043 0201 	orr.w	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d010      	beq.n	8008876 <UART_RxISR_8BIT_FIFOEN+0xde>
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2202      	movs	r2, #2
 8008864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886c:	f043 0204 	orr.w	r2, r3, #4
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d010      	beq.n	80088a2 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2204      	movs	r2, #4
 8008890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008898:	f043 0202 	orr.w	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d006      	beq.n	80088ba <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7fe fe97 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d130      	bne.n	8008928 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088d4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6899      	ldr	r1, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4b2c      	ldr	r3, [pc, #176]	; (8008994 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 80088e2:	400b      	ands	r3, r1
 80088e4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d10f      	bne.n	800891c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0210 	bic.w	r2, r2, #16
 800890a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7fe fe6d 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 800891a:	e002      	b.n	8008922 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7f8 f909 	bl	8000b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008928:	89fb      	ldrh	r3, [r7, #14]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af4e 	bne.w	80087d6 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008940:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008942:	897b      	ldrh	r3, [r7, #10]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d021      	beq.n	800898c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800894e:	897a      	ldrh	r2, [r7, #10]
 8008950:	429a      	cmp	r2, r3
 8008952:	d21b      	bcs.n	800898c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008962:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a0c      	ldr	r2, [pc, #48]	; (8008998 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8008968:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0220 	orr.w	r2, r2, #32
 8008978:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800897a:	e007      	b.n	800898c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	699a      	ldr	r2, [r3, #24]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0208 	orr.w	r2, r2, #8
 800898a:	619a      	str	r2, [r3, #24]
}
 800898c:	bf00      	nop
 800898e:	3720      	adds	r7, #32
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	effffffe 	.word	0xeffffffe
 8008998:	080085e9 	.word	0x080085e9

0800899c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08a      	sub	sp, #40	; 0x28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089aa:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ca:	2b22      	cmp	r3, #34	; 0x22
 80089cc:	f040 80d8 	bne.w	8008b80 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089d6:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089d8:	e0a8      	b.n	8008b2c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80089e8:	8aba      	ldrh	r2, [r7, #20]
 80089ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089ec:	4013      	ands	r3, r2
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f8:	1c9a      	adds	r2, r3, #2
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d04d      	beq.n	8008abe <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d010      	beq.n	8008a4e <UART_RxISR_16BIT_FIFOEN+0xb2>
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a44:	f043 0201 	orr.w	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d010      	beq.n	8008a7a <UART_RxISR_16BIT_FIFOEN+0xde>
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00b      	beq.n	8008a7a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2202      	movs	r2, #2
 8008a68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a70:	f043 0204 	orr.w	r2, r3, #4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d010      	beq.n	8008aa6 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2204      	movs	r2, #4
 8008a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a9c:	f043 0202 	orr.w	r2, r3, #2
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d006      	beq.n	8008abe <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fe fd95 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d130      	bne.n	8008b2c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ad8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6899      	ldr	r1, [r3, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	4b2c      	ldr	r3, [pc, #176]	; (8008b98 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 8008ae6:	400b      	ands	r3, r1
 8008ae8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d10f      	bne.n	8008b20 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0210 	bic.w	r2, r2, #16
 8008b0e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fe fd6b 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 8008b1e:	e002      	b.n	8008b26 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7f8 f807 	bl	8000b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b2c:	8afb      	ldrh	r3, [r7, #22]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f47f af4e 	bne.w	80089da <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b44:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b46:	89fb      	ldrh	r3, [r7, #14]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d021      	beq.n	8008b90 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b52:	89fa      	ldrh	r2, [r7, #14]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d21b      	bcs.n	8008b90 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008b66:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a0c      	ldr	r2, [pc, #48]	; (8008b9c <UART_RxISR_16BIT_FIFOEN+0x200>)
 8008b6c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0220 	orr.w	r2, r2, #32
 8008b7c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b7e:	e007      	b.n	8008b90 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699a      	ldr	r2, [r3, #24]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0208 	orr.w	r2, r2, #8
 8008b8e:	619a      	str	r2, [r3, #24]
}
 8008b90:	bf00      	nop
 8008b92:	3728      	adds	r7, #40	; 0x28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	effffffe 	.word	0xeffffffe
 8008b9c:	080086c1 	.word	0x080086c1

08008ba0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e027      	b.n	8008c42 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2224      	movs	r2, #36	; 0x24
 8008bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0201 	bic.w	r2, r2, #1
 8008c18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e02d      	b.n	8008cc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2224      	movs	r2, #36	; 0x24
 8008c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0201 	bic.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f850 	bl	8008d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e02d      	b.n	8008d3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2224      	movs	r2, #36	; 0x24
 8008cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0201 	bic.w	r2, r2, #1
 8008d08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f812 	bl	8008d48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d108      	bne.n	8008d6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d68:	e031      	b.n	8008dce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d6e:	2310      	movs	r3, #16
 8008d70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	0e5b      	lsrs	r3, r3, #25
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f003 0307 	and.w	r3, r3, #7
 8008d80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	0f5b      	lsrs	r3, r3, #29
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	7b3a      	ldrb	r2, [r7, #12]
 8008d96:	4911      	ldr	r1, [pc, #68]	; (8008ddc <UARTEx_SetNbDataToProcess+0x94>)
 8008d98:	5c8a      	ldrb	r2, [r1, r2]
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d9e:	7b3a      	ldrb	r2, [r7, #12]
 8008da0:	490f      	ldr	r1, [pc, #60]	; (8008de0 <UARTEx_SetNbDataToProcess+0x98>)
 8008da2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	7b7a      	ldrb	r2, [r7, #13]
 8008db4:	4909      	ldr	r1, [pc, #36]	; (8008ddc <UARTEx_SetNbDataToProcess+0x94>)
 8008db6:	5c8a      	ldrb	r2, [r1, r2]
 8008db8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008dbc:	7b7a      	ldrb	r2, [r7, #13]
 8008dbe:	4908      	ldr	r1, [pc, #32]	; (8008de0 <UARTEx_SetNbDataToProcess+0x98>)
 8008dc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	0800cde4 	.word	0x0800cde4
 8008de0:	0800cdec 	.word	0x0800cdec

08008de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de4:	b084      	sub	sp, #16
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	f107 001c 	add.w	r0, r7, #28
 8008df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d120      	bne.n	8008e3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	4b2a      	ldr	r3, [pc, #168]	; (8008eb8 <USB_CoreInit+0xd4>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d105      	bne.n	8008e32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f990 	bl	8009158 <USB_CoreReset>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
 8008e3c:	e01a      	b.n	8008e74 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f984 	bl	8009158 <USB_CoreReset>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
 8008e66:	e005      	b.n	8008e74 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d116      	bne.n	8008ea8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <USB_CoreInit+0xd8>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f043 0206 	orr.w	r2, r3, #6
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f043 0220 	orr.w	r2, r3, #32
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eb4:	b004      	add	sp, #16
 8008eb6:	4770      	bx	lr
 8008eb8:	ffbdffbf 	.word	0xffbdffbf
 8008ebc:	03ee0000 	.word	0x03ee0000

08008ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f043 0201 	orr.w	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f023 0201 	bic.w	r2, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d106      	bne.n	8008f30 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60da      	str	r2, [r3, #12]
 8008f2e:	e00b      	b.n	8008f48 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d106      	bne.n	8008f44 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	60da      	str	r2, [r3, #12]
 8008f42:	e001      	b.n	8008f48 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e003      	b.n	8008f50 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008f48:	2032      	movs	r0, #50	; 0x32
 8008f4a:	f7f8 fa17 	bl	800137c <HAL_Delay>

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	019b      	lsls	r3, r3, #6
 8008f6a:	f043 0220 	orr.w	r2, r3, #32
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4a09      	ldr	r2, [pc, #36]	; (8008fa0 <USB_FlushTxFifo+0x48>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d901      	bls.n	8008f84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e006      	b.n	8008f92 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	2b20      	cmp	r3, #32
 8008f8e:	d0f0      	beq.n	8008f72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	00030d40 	.word	0x00030d40

08008fa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2210      	movs	r2, #16
 8008fb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <USB_FlushRxFifo+0x40>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d901      	bls.n	8008fc8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e006      	b.n	8008fd6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d0f0      	beq.n	8008fb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	00030d40 	.word	0x00030d40

08008fe8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	; 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	71fb      	strb	r3, [r7, #7]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800900a:	2b00      	cmp	r3, #0
 800900c:	d123      	bne.n	8009056 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800900e:	88bb      	ldrh	r3, [r7, #4]
 8009010:	3303      	adds	r3, #3
 8009012:	089b      	lsrs	r3, r3, #2
 8009014:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009016:	2300      	movs	r3, #0
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	e018      	b.n	800904e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	031a      	lsls	r2, r3, #12
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	4413      	add	r3, r2
 8009024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009028:	461a      	mov	r2, r3
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	3301      	adds	r3, #1
 8009034:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	3301      	adds	r3, #1
 800903a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	3301      	adds	r3, #1
 8009040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	3301      	adds	r3, #1
 8009046:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	3301      	adds	r3, #1
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d3e2      	bcc.n	800901c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3724      	adds	r7, #36	; 0x24
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009064:	b480      	push	{r7}
 8009066:	b08b      	sub	sp, #44	; 0x2c
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800907a:	88fb      	ldrh	r3, [r7, #6]
 800907c:	089b      	lsrs	r3, r3, #2
 800907e:	b29b      	uxth	r3, r3
 8009080:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800908a:	2300      	movs	r3, #0
 800908c:	623b      	str	r3, [r7, #32]
 800908e:	e014      	b.n	80090ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	601a      	str	r2, [r3, #0]
    pDest++;
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	3301      	adds	r3, #1
 80090a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	3301      	adds	r3, #1
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	3301      	adds	r3, #1
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	3301      	adds	r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	3301      	adds	r3, #1
 80090b8:	623b      	str	r3, [r7, #32]
 80090ba:	6a3a      	ldr	r2, [r7, #32]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d3e6      	bcc.n	8009090 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090c2:	8bfb      	ldrh	r3, [r7, #30]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01e      	beq.n	8009106 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	461a      	mov	r2, r3
 80090d4:	f107 0310 	add.w	r3, r7, #16
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	fa22 f303 	lsr.w	r3, r2, r3
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	701a      	strb	r2, [r3, #0]
      i++;
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	3301      	adds	r3, #1
 80090f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	3301      	adds	r3, #1
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80090fa:	8bfb      	ldrh	r3, [r7, #30]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009100:	8bfb      	ldrh	r3, [r7, #30]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1ea      	bne.n	80090dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009108:	4618      	mov	r0, r3
 800910a:	372c      	adds	r7, #44	; 0x2c
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	4013      	ands	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800912c:	68fb      	ldr	r3, [r7, #12]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f003 0301 	and.w	r3, r3, #1
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
	...

08009158 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4a13      	ldr	r2, [pc, #76]	; (80091bc <USB_CoreReset+0x64>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d901      	bls.n	8009176 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e01b      	b.n	80091ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	daf2      	bge.n	8009164 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f043 0201 	orr.w	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a09      	ldr	r2, [pc, #36]	; (80091bc <USB_CoreReset+0x64>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d901      	bls.n	80091a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e006      	b.n	80091ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d0f0      	beq.n	800918e <USB_CoreReset+0x36>

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	00030d40 	.word	0x00030d40

080091c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091c0:	b084      	sub	sp, #16
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	f107 001c 	add.w	r0, r7, #28
 80091ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091dc:	461a      	mov	r2, r3
 80091de:	2300      	movs	r3, #0
 80091e0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009202:	2b00      	cmp	r3, #0
 8009204:	d018      	beq.n	8009238 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	2b01      	cmp	r3, #1
 800920a:	d10a      	bne.n	8009222 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800921a:	f043 0304 	orr.w	r3, r3, #4
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	e014      	b.n	800924c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009230:	f023 0304 	bic.w	r3, r3, #4
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	e009      	b.n	800924c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009246:	f023 0304 	bic.w	r3, r3, #4
 800924a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800924c:	2110      	movs	r1, #16
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fe82 	bl	8008f58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff fea5 	bl	8008fa4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800925a:	2300      	movs	r3, #0
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	e015      	b.n	800928c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4413      	add	r3, r2
 8009268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800926c:	461a      	mov	r2, r3
 800926e:	f04f 33ff 	mov.w	r3, #4294967295
 8009272:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4413      	add	r3, r2
 800927c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009280:	461a      	mov	r2, r3
 8009282:	2300      	movs	r3, #0
 8009284:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	429a      	cmp	r2, r3
 8009292:	d3e5      	bcc.n	8009260 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009294:	2101      	movs	r1, #1
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8ac 	bl	80093f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800929c:	20c8      	movs	r0, #200	; 0xc8
 800929e:	f7f8 f86d 	bl	800137c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00b      	beq.n	80092d4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a14      	ldr	r2, [pc, #80]	; (8009318 <USB_HostInit+0x158>)
 80092c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a13      	ldr	r2, [pc, #76]	; (800931c <USB_HostInit+0x15c>)
 80092ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80092d2:	e009      	b.n	80092e8 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2280      	movs	r2, #128	; 0x80
 80092d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a10      	ldr	r2, [pc, #64]	; (8009320 <USB_HostInit+0x160>)
 80092de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a10      	ldr	r2, [pc, #64]	; (8009324 <USB_HostInit+0x164>)
 80092e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d105      	bne.n	80092fa <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	f043 0210 	orr.w	r2, r3, #16
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699a      	ldr	r2, [r3, #24]
 80092fe:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <USB_HostInit+0x168>)
 8009300:	4313      	orrs	r3, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009312:	b004      	add	sp, #16
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	01000200 	.word	0x01000200
 800931c:	00e00300 	.word	0x00e00300
 8009320:	00600080 	.word	0x00600080
 8009324:	004000e0 	.word	0x004000e0
 8009328:	a3200008 	.word	0xa3200008

0800932c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800934a:	f023 0303 	bic.w	r3, r3, #3
 800934e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009364:	4313      	orrs	r3, r2
 8009366:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d107      	bne.n	800937e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009374:	461a      	mov	r2, r3
 8009376:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800937a:	6053      	str	r3, [r2, #4]
 800937c:	e009      	b.n	8009392 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d106      	bne.n	8009392 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800938a:	461a      	mov	r2, r3
 800938c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009390:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80093c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80093d0:	2064      	movs	r0, #100	; 0x64
 80093d2:	f7f7 ffd3 	bl	800137c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80093e4:	200a      	movs	r0, #10
 80093e6:	f7f7 ffc9 	bl	800137c <HAL_Delay>

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009418:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <USB_DriveVbus+0x44>
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d106      	bne.n	8009438 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009436:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800943e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009442:	d109      	bne.n	8009458 <USB_DriveVbus+0x64>
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009456:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	0c5b      	lsrs	r3, r3, #17
 8009484:	f003 0303 	and.w	r3, r3, #3
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	b29b      	uxth	r3, r3
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
	...

080094b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	70fb      	strb	r3, [r7, #3]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70bb      	strb	r3, [r7, #2]
 80094ce:	4613      	mov	r3, r2
 80094d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e6:	461a      	mov	r2, r3
 80094e8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80094ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d87e      	bhi.n	80095f4 <USB_HC_Init+0x13c>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <USB_HC_Init+0x44>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	080095b7 	.word	0x080095b7
 8009504:	0800950d 	.word	0x0800950d
 8009508:	08009579 	.word	0x08009579
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	4413      	add	r3, r2
 8009514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009518:	461a      	mov	r2, r3
 800951a:	f240 439d 	movw	r3, #1181	; 0x49d
 800951e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009524:	2b00      	cmp	r3, #0
 8009526:	da10      	bge.n	800954a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	4413      	add	r3, r2
 8009530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	78fa      	ldrb	r2, [r7, #3]
 8009538:	0151      	lsls	r1, r2, #5
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	440a      	add	r2, r1
 800953e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009546:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009548:	e057      	b.n	80095fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d051      	beq.n	80095fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	4413      	add	r3, r2
 800955e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	440a      	add	r2, r1
 800956c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009570:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009574:	60d3      	str	r3, [r2, #12]
      break;
 8009576:	e040      	b.n	80095fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	4413      	add	r3, r2
 8009580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009584:	461a      	mov	r2, r3
 8009586:	f240 639d 	movw	r3, #1693	; 0x69d
 800958a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800958c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009590:	2b00      	cmp	r3, #0
 8009592:	da34      	bge.n	80095fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	4413      	add	r3, r2
 800959c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	0151      	lsls	r1, r2, #5
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	440a      	add	r2, r1
 80095aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80095b4:	e023      	b.n	80095fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c2:	461a      	mov	r2, r3
 80095c4:	f240 2325 	movw	r3, #549	; 0x225
 80095c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80095ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	da17      	bge.n	8009602 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	0151      	lsls	r1, r2, #5
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	440a      	add	r2, r1
 80095e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80095f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80095f2:	e006      	b.n	8009602 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	77fb      	strb	r3, [r7, #31]
      break;
 80095f8:	e004      	b.n	8009604 <USB_HC_Init+0x14c>
      break;
 80095fa:	bf00      	nop
 80095fc:	e002      	b.n	8009604 <USB_HC_Init+0x14c>
      break;
 80095fe:	bf00      	nop
 8009600:	e000      	b.n	8009604 <USB_HC_Init+0x14c>
      break;
 8009602:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	2101      	movs	r1, #1
 8009614:	fa01 f303 	lsl.w	r3, r1, r3
 8009618:	6939      	ldr	r1, [r7, #16]
 800961a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800961e:	4313      	orrs	r3, r2
 8009620:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800962e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009632:	2b00      	cmp	r3, #0
 8009634:	da03      	bge.n	800963e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800963a:	61bb      	str	r3, [r7, #24]
 800963c:	e001      	b.n	8009642 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800963e:	2300      	movs	r3, #0
 8009640:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7ff ff0f 	bl	8009466 <USB_GetHostSpeed>
 8009648:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800964a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800964e:	2b02      	cmp	r3, #2
 8009650:	d106      	bne.n	8009660 <USB_HC_Init+0x1a8>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d003      	beq.n	8009660 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e001      	b.n	8009664 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009664:	787b      	ldrb	r3, [r7, #1]
 8009666:	059b      	lsls	r3, r3, #22
 8009668:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800966c:	78bb      	ldrb	r3, [r7, #2]
 800966e:	02db      	lsls	r3, r3, #11
 8009670:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009674:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009676:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800967a:	049b      	lsls	r3, r3, #18
 800967c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009680:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009682:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009684:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009688:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	0159      	lsls	r1, r3, #5
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	440b      	add	r3, r1
 8009696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800969a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096a0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80096a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d10f      	bne.n	80096ca <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	0151      	lsls	r1, r2, #5
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	440a      	add	r2, r1
 80096c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80096ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	; 0x30
 80096d8:	af02      	add	r7, sp, #8
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	785b      	ldrb	r3, [r3, #1]
 80096ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80096ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d02d      	beq.n	800975a <USB_HC_StartXfer+0x86>
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	791b      	ldrb	r3, [r3, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d129      	bne.n	800975a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d117      	bne.n	800973c <USB_HC_StartXfer+0x68>
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	79db      	ldrb	r3, [r3, #7]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <USB_HC_StartXfer+0x48>
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	79db      	ldrb	r3, [r3, #7]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d10f      	bne.n	800973c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	4413      	add	r3, r2
 8009724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	0151      	lsls	r1, r2, #5
 800972e:	6a3a      	ldr	r2, [r7, #32]
 8009730:	440a      	add	r2, r1
 8009732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10b      	bne.n	800975a <USB_HC_StartXfer+0x86>
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	795b      	ldrb	r3, [r3, #5]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d107      	bne.n	800975a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	4619      	mov	r1, r3
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 fa2f 	bl	8009bb4 <USB_DoPing>
      return HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	e0f8      	b.n	800994c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d018      	beq.n	8009794 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	8912      	ldrh	r2, [r2, #8]
 800976a:	4413      	add	r3, r2
 800976c:	3b01      	subs	r3, #1
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	8912      	ldrh	r2, [r2, #8]
 8009772:	fbb3 f3f2 	udiv	r3, r3, r2
 8009776:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009778:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800977a:	8b7b      	ldrh	r3, [r7, #26]
 800977c:	429a      	cmp	r2, r3
 800977e:	d90b      	bls.n	8009798 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009780:	8b7b      	ldrh	r3, [r7, #26]
 8009782:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	8912      	ldrh	r2, [r2, #8]
 800978a:	fb02 f203 	mul.w	r2, r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	611a      	str	r2, [r3, #16]
 8009792:	e001      	b.n	8009798 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009794:	2301      	movs	r3, #1
 8009796:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	78db      	ldrb	r3, [r3, #3]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80097a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	8912      	ldrh	r2, [r2, #8]
 80097a6:	fb02 f203 	mul.w	r2, r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	611a      	str	r2, [r3, #16]
 80097ae:	e003      	b.n	80097b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	695a      	ldr	r2, [r3, #20]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097c2:	04d9      	lsls	r1, r3, #19
 80097c4:	4b63      	ldr	r3, [pc, #396]	; (8009954 <USB_HC_StartXfer+0x280>)
 80097c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	7a9b      	ldrb	r3, [r3, #10]
 80097ce:	075b      	lsls	r3, r3, #29
 80097d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	0148      	lsls	r0, r1, #5
 80097d8:	6a39      	ldr	r1, [r7, #32]
 80097da:	4401      	add	r1, r0
 80097dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	68d9      	ldr	r1, [r3, #12]
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fa:	460a      	mov	r2, r1
 80097fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	bf0c      	ite	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	2300      	movne	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	4413      	add	r3, r2
 800981e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	6a3a      	ldr	r2, [r7, #32]
 800982a:	440a      	add	r2, r1
 800982c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009830:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009834:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	7e7b      	ldrb	r3, [r7, #25]
 8009846:	075b      	lsls	r3, r3, #29
 8009848:	69f9      	ldr	r1, [r7, #28]
 800984a:	0148      	lsls	r0, r1, #5
 800984c:	6a39      	ldr	r1, [r7, #32]
 800984e:	4401      	add	r1, r0
 8009850:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009854:	4313      	orrs	r3, r2
 8009856:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	4413      	add	r3, r2
 8009860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800986e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	78db      	ldrb	r3, [r3, #3]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d004      	beq.n	8009882 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	e003      	b.n	800988a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009888:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009890:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	461a      	mov	r2, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	e04e      	b.n	800994c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	78db      	ldrb	r3, [r3, #3]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d149      	bne.n	800994a <USB_HC_StartXfer+0x276>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d045      	beq.n	800994a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	79db      	ldrb	r3, [r3, #7]
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d830      	bhi.n	8009928 <USB_HC_StartXfer+0x254>
 80098c6:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <USB_HC_StartXfer+0x1f8>)
 80098c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098cc:	080098dd 	.word	0x080098dd
 80098d0:	08009901 	.word	0x08009901
 80098d4:	080098dd 	.word	0x080098dd
 80098d8:	08009901 	.word	0x08009901
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	3303      	adds	r3, #3
 80098e2:	089b      	lsrs	r3, r3, #2
 80098e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80098e6:	8afa      	ldrh	r2, [r7, #22]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d91c      	bls.n	800992c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f043 0220 	orr.w	r2, r3, #32
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80098fe:	e015      	b.n	800992c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	3303      	adds	r3, #3
 8009906:	089b      	lsrs	r3, r3, #2
 8009908:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800990a:	8afa      	ldrh	r2, [r7, #22]
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	b29b      	uxth	r3, r3
 8009916:	429a      	cmp	r2, r3
 8009918:	d90a      	bls.n	8009930 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	619a      	str	r2, [r3, #24]
        }
        break;
 8009926:	e003      	b.n	8009930 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009928:	bf00      	nop
 800992a:	e002      	b.n	8009932 <USB_HC_StartXfer+0x25e>
        break;
 800992c:	bf00      	nop
 800992e:	e000      	b.n	8009932 <USB_HC_StartXfer+0x25e>
        break;
 8009930:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	68d9      	ldr	r1, [r3, #12]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	785a      	ldrb	r2, [r3, #1]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	b29b      	uxth	r3, r3
 8009940:	2000      	movs	r0, #0
 8009942:	9000      	str	r0, [sp, #0]
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff fb4f 	bl	8008fe8 <USB_WritePacket>
  }

  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3728      	adds	r7, #40	; 0x28
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	1ff80000 	.word	0x1ff80000

08009958 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	b29b      	uxth	r3, r3
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800997a:	b480      	push	{r7}
 800997c:	b089      	sub	sp, #36	; 0x24
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800998a:	78fb      	ldrb	r3, [r7, #3]
 800998c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	4413      	add	r3, r2
 800999a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	0c9b      	lsrs	r3, r3, #18
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	0fdb      	lsrs	r3, r3, #31
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	d104      	bne.n	80099d4 <USB_HC_Halt+0x5a>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	e0e8      	b.n	8009ba6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <USB_HC_Halt+0x66>
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d173      	bne.n	8009ac8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f040 80cb 	bne.w	8009ba4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d143      	bne.n	8009aa2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a38:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	0151      	lsls	r1, r2, #5
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	440a      	add	r2, r1
 8009a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a58:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	0151      	lsls	r1, r2, #5
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	440a      	add	r2, r1
 8009a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a78:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	61fb      	str	r3, [r7, #28]
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a86:	d81d      	bhi.n	8009ac4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a9e:	d0ec      	beq.n	8009a7a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009aa0:	e080      	b.n	8009ba4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	0151      	lsls	r1, r2, #5
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	440a      	add	r2, r1
 8009ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ac0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ac2:	e06f      	b.n	8009ba4 <USB_HC_Halt+0x22a>
            break;
 8009ac4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ac6:	e06d      	b.n	8009ba4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	0151      	lsls	r1, r2, #5
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	440a      	add	r2, r1
 8009ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ae6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d143      	bne.n	8009b80 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	0151      	lsls	r1, r2, #5
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	440a      	add	r2, r1
 8009b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	0151      	lsls	r1, r2, #5
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	440a      	add	r2, r1
 8009b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	0151      	lsls	r1, r2, #5
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	440a      	add	r2, r1
 8009b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b56:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b64:	d81d      	bhi.n	8009ba2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b7c:	d0ec      	beq.n	8009b58 <USB_HC_Halt+0x1de>
 8009b7e:	e011      	b.n	8009ba4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	0151      	lsls	r1, r2, #5
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	440a      	add	r2, r1
 8009b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	e000      	b.n	8009ba4 <USB_HC_Halt+0x22a>
          break;
 8009ba2:	bf00      	nop
    }
  }

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3724      	adds	r7, #36	; 0x24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	04da      	lsls	r2, r3, #19
 8009bd0:	4b15      	ldr	r3, [pc, #84]	; (8009c28 <USB_DoPing+0x74>)
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	0151      	lsls	r1, r2, #5
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	440a      	add	r2, r1
 8009bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009be4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bfc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c04:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c12:	461a      	mov	r2, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	1ff80000 	.word	0x1ff80000

08009c2c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff f950 	bl	8008ee2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009c42:	2110      	movs	r1, #16
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff f987 	bl	8008f58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff f9aa 	bl	8008fa4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009c50:	2300      	movs	r3, #0
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	e01f      	b.n	8009c96 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c7c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	3301      	adds	r3, #1
 8009c94:	613b      	str	r3, [r7, #16]
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	2b0f      	cmp	r3, #15
 8009c9a:	d9dc      	bls.n	8009c56 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	613b      	str	r3, [r7, #16]
 8009ca0:	e034      	b.n	8009d0c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cb8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cc0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cc8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ce8:	d80c      	bhi.n	8009d04 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d00:	d0ec      	beq.n	8009cdc <USB_StopHost+0xb0>
 8009d02:	e000      	b.n	8009d06 <USB_StopHost+0xda>
        break;
 8009d04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b0f      	cmp	r3, #15
 8009d10:	d9c7      	bls.n	8009ca2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d18:	461a      	mov	r2, r3
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295
 8009d26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff f8c9 	bl	8008ec0 <USB_EnableGlobalInt>

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b089      	sub	sp, #36	; 0x24
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009d40:	2301      	movs	r3, #1
 8009d42:	2202      	movs	r2, #2
 8009d44:	2102      	movs	r1, #2
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fccc 	bl	800a6e4 <USBH_FindInterface>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	2bff      	cmp	r3, #255	; 0xff
 8009d54:	d002      	beq.n	8009d5c <USBH_CDC_InterfaceInit+0x24>
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d901      	bls.n	8009d60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	e13d      	b.n	8009fdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fca1 	bl	800a6ac <USBH_SelectInterface>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009d74:	2302      	movs	r3, #2
 8009d76:	e131      	b.n	8009fdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009d7e:	2050      	movs	r0, #80	; 0x50
 8009d80:	f002 fb40 	bl	800c404 <malloc>
 8009d84:	4603      	mov	r3, r0
 8009d86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e11f      	b.n	8009fdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009d9c:	2250      	movs	r2, #80	; 0x50
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68b8      	ldr	r0, [r7, #8]
 8009da2:	f002 fb3f 	bl	800c424 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	211a      	movs	r1, #26
 8009dac:	fb01 f303 	mul.w	r3, r1, r3
 8009db0:	4413      	add	r3, r2
 8009db2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	b25b      	sxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da15      	bge.n	8009dea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	211a      	movs	r1, #26
 8009dc4:	fb01 f303 	mul.w	r3, r1, r3
 8009dc8:	4413      	add	r3, r2
 8009dca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	211a      	movs	r1, #26
 8009dda:	fb01 f303 	mul.w	r3, r1, r3
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009de4:	881a      	ldrh	r2, [r3, #0]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 fe98 	bl	800bb26 <USBH_AllocPipe>
 8009df6:	4603      	mov	r3, r0
 8009df8:	461a      	mov	r2, r3
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	7819      	ldrb	r1, [r3, #0]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	7858      	ldrb	r0, [r3, #1]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	8952      	ldrh	r2, [r2, #10]
 8009e16:	9202      	str	r2, [sp, #8]
 8009e18:	2203      	movs	r2, #3
 8009e1a:	9201      	str	r2, [sp, #4]
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	4623      	mov	r3, r4
 8009e20:	4602      	mov	r2, r0
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 fe50 	bl	800bac8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f002 fa39 	bl	800c2a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009e36:	2300      	movs	r3, #0
 8009e38:	2200      	movs	r2, #0
 8009e3a:	210a      	movs	r1, #10
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fc51 	bl	800a6e4 <USBH_FindInterface>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	2bff      	cmp	r3, #255	; 0xff
 8009e4a:	d002      	beq.n	8009e52 <USBH_CDC_InterfaceInit+0x11a>
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d901      	bls.n	8009e56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009e52:	2302      	movs	r3, #2
 8009e54:	e0c2      	b.n	8009fdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	211a      	movs	r1, #26
 8009e5c:	fb01 f303 	mul.w	r3, r1, r3
 8009e60:	4413      	add	r3, r2
 8009e62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b25b      	sxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da16      	bge.n	8009e9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	211a      	movs	r1, #26
 8009e74:	fb01 f303 	mul.w	r3, r1, r3
 8009e78:	4413      	add	r3, r2
 8009e7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	211a      	movs	r1, #26
 8009e8a:	fb01 f303 	mul.w	r3, r1, r3
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e94:	881a      	ldrh	r2, [r3, #0]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	835a      	strh	r2, [r3, #26]
 8009e9a:	e015      	b.n	8009ec8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	211a      	movs	r1, #26
 8009ea2:	fb01 f303 	mul.w	r3, r1, r3
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	211a      	movs	r1, #26
 8009eb8:	fb01 f303 	mul.w	r3, r1, r3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ec2:	881a      	ldrh	r2, [r3, #0]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	211a      	movs	r1, #26
 8009ece:	fb01 f303 	mul.w	r3, r1, r3
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	b25b      	sxtb	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da16      	bge.n	8009f0e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	211a      	movs	r1, #26
 8009ee6:	fb01 f303 	mul.w	r3, r1, r3
 8009eea:	4413      	add	r3, r2
 8009eec:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	211a      	movs	r1, #26
 8009efc:	fb01 f303 	mul.w	r3, r1, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009f06:	881a      	ldrh	r2, [r3, #0]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	835a      	strh	r2, [r3, #26]
 8009f0c:	e015      	b.n	8009f3a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	211a      	movs	r1, #26
 8009f14:	fb01 f303 	mul.w	r3, r1, r3
 8009f18:	4413      	add	r3, r2
 8009f1a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009f1e:	781a      	ldrb	r2, [r3, #0]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	211a      	movs	r1, #26
 8009f2a:	fb01 f303 	mul.w	r3, r1, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009f34:	881a      	ldrh	r2, [r3, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	7b9b      	ldrb	r3, [r3, #14]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f001 fdf0 	bl	800bb26 <USBH_AllocPipe>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	7bdb      	ldrb	r3, [r3, #15]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 fde6 	bl	800bb26 <USBH_AllocPipe>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	7b59      	ldrb	r1, [r3, #13]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	7b98      	ldrb	r0, [r3, #14]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	8b12      	ldrh	r2, [r2, #24]
 8009f7a:	9202      	str	r2, [sp, #8]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	9201      	str	r2, [sp, #4]
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	4623      	mov	r3, r4
 8009f84:	4602      	mov	r2, r0
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 fd9e 	bl	800bac8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	7b19      	ldrb	r1, [r3, #12]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	7bd8      	ldrb	r0, [r3, #15]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	8b52      	ldrh	r2, [r2, #26]
 8009fa4:	9202      	str	r2, [sp, #8]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	9201      	str	r2, [sp, #4]
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	4623      	mov	r3, r4
 8009fae:	4602      	mov	r2, r0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 fd89 	bl	800bac8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	7b5b      	ldrb	r3, [r3, #13]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f002 f96e 	bl	800c2a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	7b1b      	ldrb	r3, [r3, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f002 f967 	bl	800c2a8 <USBH_LL_SetToggle>

  return USBH_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd90      	pop	{r4, r7, pc}

08009fe4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00e      	beq.n	800a01c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	4619      	mov	r1, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 fd7e 	bl	800bb06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 fda9 	bl	800bb68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	7b1b      	ldrb	r3, [r3, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00e      	beq.n	800a042 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	7b1b      	ldrb	r3, [r3, #12]
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 fd6b 	bl	800bb06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	7b1b      	ldrb	r3, [r3, #12]
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 fd96 	bl	800bb68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	7b5b      	ldrb	r3, [r3, #13]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00e      	beq.n	800a068 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	7b5b      	ldrb	r3, [r3, #13]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 fd58 	bl	800bb06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	7b5b      	ldrb	r3, [r3, #13]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 fd83 	bl	800bb68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f002 f9c9 	bl	800c414 <free>
    phost->pActiveClass->pData = 0U;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a088:	2200      	movs	r2, #0
 800a08a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0a4:	69db      	ldr	r3, [r3, #28]
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3340      	adds	r3, #64	; 0x40
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f8b1 	bl	800a216 <GetLineCoding>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d105      	bne.n	800a0ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0c4:	2102      	movs	r1, #2
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a0ca:	7afb      	ldrb	r3, [r7, #11]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d877      	bhi.n	800a1e8 <USBH_CDC_Process+0x114>
 800a0f8:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <USBH_CDC_Process+0x2c>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a115 	.word	0x0800a115
 800a104:	0800a11b 	.word	0x0800a11b
 800a108:	0800a14b 	.word	0x0800a14b
 800a10c:	0800a1bf 	.word	0x0800a1bf
 800a110:	0800a1cd 	.word	0x0800a1cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
      break;
 800a118:	e06d      	b.n	800a1f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f897 	bl	800a254 <SetLineCoding>
 800a126:	4603      	mov	r3, r0
 800a128:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a138:	e058      	b.n	800a1ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d055      	beq.n	800a1ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2204      	movs	r2, #4
 800a144:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a148:	e050      	b.n	800a1ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	3340      	adds	r3, #64	; 0x40
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f860 	bl	800a216 <GetLineCoding>
 800a156:	4603      	mov	r3, r0
 800a158:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d126      	bne.n	800a1ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a172:	791b      	ldrb	r3, [r3, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d13b      	bne.n	800a1f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a182:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a184:	429a      	cmp	r2, r3
 800a186:	d133      	bne.n	800a1f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a192:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a194:	429a      	cmp	r2, r3
 800a196:	d12b      	bne.n	800a1f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d124      	bne.n	800a1f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f9be 	bl	800a528 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a1ac:	e020      	b.n	800a1f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d01d      	beq.n	800a1f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a1bc:	e018      	b.n	800a1f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f8e1 	bl	800a386 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f954 	bl	800a472 <CDC_ProcessReception>
      break;
 800a1ca:	e014      	b.n	800a1f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 f849 	bl	800b266 <USBH_ClrFeature>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a1e6:	e005      	b.n	800a1f4 <USBH_CDC_Process+0x120>

    default:
      break;
 800a1e8:	bf00      	nop
 800a1ea:	e004      	b.n	800a1f6 <USBH_CDC_Process+0x122>
      break;
 800a1ec:	bf00      	nop
 800a1ee:	e002      	b.n	800a1f6 <USBH_CDC_Process+0x122>
      break;
 800a1f0:	bf00      	nop
 800a1f2:	e000      	b.n	800a1f6 <USBH_CDC_Process+0x122>
      break;
 800a1f4:	bf00      	nop

  }

  return status;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	22a1      	movs	r2, #161	; 0xa1
 800a224:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2221      	movs	r2, #33	; 0x21
 800a22a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2207      	movs	r2, #7
 800a23c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2207      	movs	r2, #7
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f001 f9ee 	bl	800b626 <USBH_CtlReq>
 800a24a:	4603      	mov	r3, r0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2221      	movs	r2, #33	; 0x21
 800a262:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2207      	movs	r2, #7
 800a27a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2207      	movs	r2, #7
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 f9cf 	bl	800b626 <USBH_CtlReq>
 800a288:	4603      	mov	r3, r0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b0b      	cmp	r3, #11
 800a2ac:	d107      	bne.n	800a2be <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	7b1b      	ldrb	r3, [r3, #12]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 ff3b 	bl	800c130 <USBH_LL_GetLastXferSize>
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	e001      	b.n	800a2c2 <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	b29b      	uxth	r3, r3
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b087      	sub	sp, #28
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <USBH_CDC_Transmit+0x2e>
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d10f      	bne.n	800a31c <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	2203      	movs	r2, #3
 800a30c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b087      	sub	sp, #28
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a336:	2301      	movs	r3, #1
 800a338:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d004      	beq.n	800a358 <USBH_CDC_Receive+0x2e>
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a354:	2b03      	cmp	r3, #3
 800a356:	d10f      	bne.n	800a378 <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2203      	movs	r2, #3
 800a368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2203      	movs	r2, #3
 800a370:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	371c      	adds	r7, #28
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b086      	sub	sp, #24
 800a38a:	af02      	add	r7, sp, #8
 800a38c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a398:	2300      	movs	r3, #0
 800a39a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d002      	beq.n	800a3ac <CDC_ProcessTransmission+0x26>
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d023      	beq.n	800a3f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a3aa:	e05e      	b.n	800a46a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	8b12      	ldrh	r2, [r2, #24]
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d90b      	bls.n	800a3d0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	69d9      	ldr	r1, [r3, #28]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8b1a      	ldrh	r2, [r3, #24]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	7b5b      	ldrb	r3, [r3, #13]
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	9000      	str	r0, [sp, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f001 fb3a 	bl	800ba42 <USBH_BulkSendData>
 800a3ce:	e00b      	b.n	800a3e8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	7b5b      	ldrb	r3, [r3, #13]
 800a3de:	2001      	movs	r0, #1
 800a3e0:	9000      	str	r0, [sp, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 fb2d 	bl	800ba42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a3f0:	e03b      	b.n	800a46a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	7b5b      	ldrb	r3, [r3, #13]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f001 ff2b 	bl	800c254 <USBH_LL_GetURBState>
 800a3fe:	4603      	mov	r3, r0
 800a400:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a402:	7afb      	ldrb	r3, [r7, #11]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d128      	bne.n	800a45a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	8b12      	ldrh	r2, [r2, #24]
 800a410:	4293      	cmp	r3, r2
 800a412:	d90e      	bls.n	800a432 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	8b12      	ldrh	r2, [r2, #24]
 800a41c:	1a9a      	subs	r2, r3, r2
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	8b12      	ldrh	r2, [r2, #24]
 800a42a:	441a      	add	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	61da      	str	r2, [r3, #28]
 800a430:	e002      	b.n	800a438 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d004      	beq.n	800a44a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a448:	e00e      	b.n	800a468 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f001 fbca 	bl	800bbec <USBH_CDC_TransmitCallback>
      break;
 800a458:	e006      	b.n	800a468 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a45a:	7afb      	ldrb	r3, [r7, #11]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d103      	bne.n	800a468 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a468:	bf00      	nop
  }
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b086      	sub	sp, #24
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a484:	2300      	movs	r3, #0
 800a486:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d002      	beq.n	800a498 <CDC_ProcessReception+0x26>
 800a492:	2b04      	cmp	r3, #4
 800a494:	d00e      	beq.n	800a4b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a496:	e043      	b.n	800a520 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	6a19      	ldr	r1, [r3, #32]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	8b5a      	ldrh	r2, [r3, #26]
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	7b1b      	ldrb	r3, [r3, #12]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 faf1 	bl	800ba8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a4b2:	e035      	b.n	800a520 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	7b1b      	ldrb	r3, [r3, #12]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f001 feca 	bl	800c254 <USBH_LL_GetURBState>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a4c4:	7cfb      	ldrb	r3, [r7, #19]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d129      	bne.n	800a51e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	7b1b      	ldrb	r3, [r3, #12]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 fe2d 	bl	800c130 <USBH_LL_GetLastXferSize>
 800a4d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d016      	beq.n	800a510 <CDC_ProcessReception+0x9e>
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	8b5b      	ldrh	r3, [r3, #26]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d910      	bls.n	800a510 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	1ad2      	subs	r2, r2, r3
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	6a1a      	ldr	r2, [r3, #32]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	441a      	add	r2, r3
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2203      	movs	r2, #3
 800a50a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a50e:	e006      	b.n	800a51e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 fb71 	bl	800bc00 <USBH_CDC_ReceiveCallback>
      break;
 800a51e:	bf00      	nop
  }
}
 800a520:	bf00      	nop
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	4613      	mov	r3, r2
 800a548:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a550:	2302      	movs	r3, #2
 800a552:	e029      	b.n	800a5a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	79fa      	ldrb	r2, [r7, #7]
 800a558:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 f81f 	bl	800a5b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f001 fd11 	bl	800bfc8 <USBH_LL_Init>

  return USBH_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	e009      	b.n	800a5d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	33e0      	adds	r3, #224	; 0xe0
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b0e      	cmp	r3, #14
 800a5da:	d9f2      	bls.n	800a5c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	e009      	b.n	800a5f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5fc:	d3f1      	bcc.n	800a5e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2240      	movs	r2, #64	; 0x40
 800a622:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d016      	beq.n	800a69a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10e      	bne.n	800a694 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	33de      	adds	r3, #222	; 0xde
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
 800a692:	e004      	b.n	800a69e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a694:	2302      	movs	r3, #2
 800a696:	73fb      	strb	r3, [r7, #15]
 800a698:	e001      	b.n	800a69e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a69a:	2302      	movs	r3, #2
 800a69c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d204      	bcs.n	800a6d2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	78fa      	ldrb	r2, [r7, #3]
 800a6cc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a6d0:	e001      	b.n	800a6d6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	70fb      	strb	r3, [r7, #3]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70bb      	strb	r3, [r7, #2]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a702:	2300      	movs	r3, #0
 800a704:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a70c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a70e:	e025      	b.n	800a75c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a710:	7dfb      	ldrb	r3, [r7, #23]
 800a712:	221a      	movs	r2, #26
 800a714:	fb02 f303 	mul.w	r3, r2, r3
 800a718:	3308      	adds	r3, #8
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	3302      	adds	r3, #2
 800a720:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	795b      	ldrb	r3, [r3, #5]
 800a726:	78fa      	ldrb	r2, [r7, #3]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d002      	beq.n	800a732 <USBH_FindInterface+0x4e>
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	2bff      	cmp	r3, #255	; 0xff
 800a730:	d111      	bne.n	800a756 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a736:	78ba      	ldrb	r2, [r7, #2]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d002      	beq.n	800a742 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a73c:	78bb      	ldrb	r3, [r7, #2]
 800a73e:	2bff      	cmp	r3, #255	; 0xff
 800a740:	d109      	bne.n	800a756 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a746:	787a      	ldrb	r2, [r7, #1]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d002      	beq.n	800a752 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a74c:	787b      	ldrb	r3, [r7, #1]
 800a74e:	2bff      	cmp	r3, #255	; 0xff
 800a750:	d101      	bne.n	800a756 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	e006      	b.n	800a764 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	3301      	adds	r3, #1
 800a75a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d9d6      	bls.n	800a710 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a762:	23ff      	movs	r3, #255	; 0xff
}
 800a764:	4618      	mov	r0, r3
 800a766:	371c      	adds	r7, #28
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f001 fc61 	bl	800c040 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a77e:	2101      	movs	r1, #1
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f001 fd7a 	bl	800c27a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af04      	add	r7, sp, #16
 800a796:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a798:	2302      	movs	r3, #2
 800a79a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d102      	bne.n	800a7b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2203      	movs	r2, #3
 800a7b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b0b      	cmp	r3, #11
 800a7ba:	f200 81b3 	bhi.w	800ab24 <USBH_Process+0x394>
 800a7be:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <USBH_Process+0x34>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a7f5 	.word	0x0800a7f5
 800a7c8:	0800a827 	.word	0x0800a827
 800a7cc:	0800a88f 	.word	0x0800a88f
 800a7d0:	0800aabf 	.word	0x0800aabf
 800a7d4:	0800ab25 	.word	0x0800ab25
 800a7d8:	0800a933 	.word	0x0800a933
 800a7dc:	0800aa65 	.word	0x0800aa65
 800a7e0:	0800a969 	.word	0x0800a969
 800a7e4:	0800a989 	.word	0x0800a989
 800a7e8:	0800a9a9 	.word	0x0800a9a9
 800a7ec:	0800a9d7 	.word	0x0800a9d7
 800a7f0:	0800aaa7 	.word	0x0800aaa7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 8193 	beq.w	800ab28 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a808:	20c8      	movs	r0, #200	; 0xc8
 800a80a:	f001 fd7d 	bl	800c308 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 fc73 	bl	800c0fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a824:	e180      	b.n	800ab28 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d107      	bne.n	800a840 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a83e:	e182      	b.n	800ab46 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a84a:	d914      	bls.n	800a876 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a852:	3301      	adds	r3, #1
 800a854:	b2da      	uxtb	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a862:	2b03      	cmp	r3, #3
 800a864:	d903      	bls.n	800a86e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	220d      	movs	r2, #13
 800a86a:	701a      	strb	r2, [r3, #0]
      break;
 800a86c:	e16b      	b.n	800ab46 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	701a      	strb	r2, [r3, #0]
      break;
 800a874:	e167      	b.n	800ab46 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a87c:	f103 020a 	add.w	r2, r3, #10
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a886:	200a      	movs	r0, #10
 800a888:	f001 fd3e 	bl	800c308 <USBH_Delay>
      break;
 800a88c:	e15b      	b.n	800ab46 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a89e:	2104      	movs	r1, #4
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a8a4:	2064      	movs	r0, #100	; 0x64
 800a8a6:	f001 fd2f 	bl	800c308 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 fbfe 	bl	800c0ac <USBH_LL_GetSpeed>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2205      	movs	r2, #5
 800a8be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 f92f 	bl	800bb26 <USBH_AllocPipe>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a8d0:	2180      	movs	r1, #128	; 0x80
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 f927 	bl	800bb26 <USBH_AllocPipe>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	461a      	mov	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	7919      	ldrb	r1, [r3, #4]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a8f4:	b292      	uxth	r2, r2
 800a8f6:	9202      	str	r2, [sp, #8]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	9201      	str	r2, [sp, #4]
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	4603      	mov	r3, r0
 800a900:	2280      	movs	r2, #128	; 0x80
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 f8e0 	bl	800bac8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7959      	ldrb	r1, [r3, #5]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a91c:	b292      	uxth	r2, r2
 800a91e:	9202      	str	r2, [sp, #8]
 800a920:	2200      	movs	r2, #0
 800a922:	9201      	str	r2, [sp, #4]
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	4603      	mov	r3, r0
 800a928:	2200      	movs	r2, #0
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 f8cc 	bl	800bac8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a930:	e109      	b.n	800ab46 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f90c 	bl	800ab50 <USBH_HandleEnum>
 800a938:	4603      	mov	r3, r0
 800a93a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	f040 80f3 	bne.w	800ab2c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a954:	2b01      	cmp	r3, #1
 800a956:	d103      	bne.n	800a960 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2208      	movs	r2, #8
 800a95c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a95e:	e0e5      	b.n	800ab2c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2207      	movs	r2, #7
 800a964:	701a      	strb	r2, [r3, #0]
      break;
 800a966:	e0e1      	b.n	800ab2c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 80de 	beq.w	800ab30 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a97a:	2101      	movs	r1, #1
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2208      	movs	r2, #8
 800a984:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a986:	e0d3      	b.n	800ab30 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a98e:	b29b      	uxth	r3, r3
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fc20 	bl	800b1d8 <USBH_SetCfg>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f040 80ca 	bne.w	800ab34 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2209      	movs	r2, #9
 800a9a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9a6:	e0c5      	b.n	800ab34 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00b      	beq.n	800a9ce <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc30 	bl	800b21e <USBH_SetFeature>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f040 80b9 	bne.w	800ab38 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	220a      	movs	r2, #10
 800a9ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9cc:	e0b4      	b.n	800ab38 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	220a      	movs	r2, #10
 800a9d2:	701a      	strb	r2, [r3, #0]
      break;
 800a9d4:	e0b0      	b.n	800ab38 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f000 80ad 	beq.w	800ab3c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]
 800a9ee:	e016      	b.n	800aa1e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a9f0:	7bfa      	ldrb	r2, [r7, #15]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	32de      	adds	r2, #222	; 0xde
 800a9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fa:	791a      	ldrb	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d108      	bne.n	800aa18 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aa06:	7bfa      	ldrb	r2, [r7, #15]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	32de      	adds	r2, #222	; 0xde
 800aa0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aa16:	e005      	b.n	800aa24 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	73fb      	strb	r3, [r7, #15]
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0e5      	beq.n	800a9f0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d016      	beq.n	800aa5c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	4798      	blx	r3
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d109      	bne.n	800aa54 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2206      	movs	r2, #6
 800aa44:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa4c:	2103      	movs	r1, #3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa52:	e073      	b.n	800ab3c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	220d      	movs	r2, #13
 800aa58:	701a      	strb	r2, [r3, #0]
      break;
 800aa5a:	e06f      	b.n	800ab3c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	220d      	movs	r2, #13
 800aa60:	701a      	strb	r2, [r3, #0]
      break;
 800aa62:	e06b      	b.n	800ab3c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d017      	beq.n	800aa9e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aa7e:	7bbb      	ldrb	r3, [r7, #14]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d103      	bne.n	800aa8e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	220b      	movs	r2, #11
 800aa8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa8c:	e058      	b.n	800ab40 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d154      	bne.n	800ab40 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	220d      	movs	r2, #13
 800aa9a:	701a      	strb	r2, [r3, #0]
      break;
 800aa9c:	e050      	b.n	800ab40 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	220d      	movs	r2, #13
 800aaa2:	701a      	strb	r2, [r3, #0]
      break;
 800aaa4:	e04c      	b.n	800ab40 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d049      	beq.n	800ab44 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	4798      	blx	r3
      }
      break;
 800aabc:	e042      	b.n	800ab44 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fd72 	bl	800a5b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d009      	beq.n	800aaea <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d005      	beq.n	800ab00 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aafa:	2105      	movs	r1, #5
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d107      	bne.n	800ab1c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff fe2b 	bl	800a770 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab1a:	e014      	b.n	800ab46 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f001 fa8f 	bl	800c040 <USBH_LL_Start>
      break;
 800ab22:	e010      	b.n	800ab46 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab24:	bf00      	nop
 800ab26:	e00e      	b.n	800ab46 <USBH_Process+0x3b6>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e00c      	b.n	800ab46 <USBH_Process+0x3b6>
      break;
 800ab2c:	bf00      	nop
 800ab2e:	e00a      	b.n	800ab46 <USBH_Process+0x3b6>
    break;
 800ab30:	bf00      	nop
 800ab32:	e008      	b.n	800ab46 <USBH_Process+0x3b6>
      break;
 800ab34:	bf00      	nop
 800ab36:	e006      	b.n	800ab46 <USBH_Process+0x3b6>
      break;
 800ab38:	bf00      	nop
 800ab3a:	e004      	b.n	800ab46 <USBH_Process+0x3b6>
      break;
 800ab3c:	bf00      	nop
 800ab3e:	e002      	b.n	800ab46 <USBH_Process+0x3b6>
      break;
 800ab40:	bf00      	nop
 800ab42:	e000      	b.n	800ab46 <USBH_Process+0x3b6>
      break;
 800ab44:	bf00      	nop
  }
  return USBH_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af04      	add	r7, sp, #16
 800ab56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2b07      	cmp	r3, #7
 800ab66:	f200 81c1 	bhi.w	800aeec <USBH_HandleEnum+0x39c>
 800ab6a:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <USBH_HandleEnum+0x20>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800ab91 	.word	0x0800ab91
 800ab74:	0800ac4f 	.word	0x0800ac4f
 800ab78:	0800acb9 	.word	0x0800acb9
 800ab7c:	0800ad47 	.word	0x0800ad47
 800ab80:	0800adb1 	.word	0x0800adb1
 800ab84:	0800ae21 	.word	0x0800ae21
 800ab88:	0800ae67 	.word	0x0800ae67
 800ab8c:	0800aead 	.word	0x0800aead
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ab90:	2108      	movs	r1, #8
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa50 	bl	800b038 <USBH_Get_DevDesc>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d130      	bne.n	800ac04 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	7919      	ldrb	r1, [r3, #4]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800abc6:	b292      	uxth	r2, r2
 800abc8:	9202      	str	r2, [sp, #8]
 800abca:	2200      	movs	r2, #0
 800abcc:	9201      	str	r2, [sp, #4]
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	4603      	mov	r3, r0
 800abd2:	2280      	movs	r2, #128	; 0x80
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 ff77 	bl	800bac8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	7959      	ldrb	r1, [r3, #5]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abee:	b292      	uxth	r2, r2
 800abf0:	9202      	str	r2, [sp, #8]
 800abf2:	2200      	movs	r2, #0
 800abf4:	9201      	str	r2, [sp, #4]
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	4603      	mov	r3, r0
 800abfa:	2200      	movs	r2, #0
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 ff63 	bl	800bac8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac02:	e175      	b.n	800aef0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	f040 8172 	bne.w	800aef0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac12:	3301      	adds	r3, #1
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d903      	bls.n	800ac2e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	220d      	movs	r2, #13
 800ac2a:	701a      	strb	r2, [r3, #0]
      break;
 800ac2c:	e160      	b.n	800aef0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	795b      	ldrb	r3, [r3, #5]
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 ff97 	bl	800bb68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	791b      	ldrb	r3, [r3, #4]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 ff91 	bl	800bb68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	701a      	strb	r2, [r3, #0]
      break;
 800ac4c:	e150      	b.n	800aef0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ac4e:	2112      	movs	r1, #18
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f9f1 	bl	800b038 <USBH_Get_DevDesc>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d103      	bne.n	800ac68 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac66:	e145      	b.n	800aef4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	f040 8142 	bne.w	800aef4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac76:	3301      	adds	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d903      	bls.n	800ac92 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	220d      	movs	r2, #13
 800ac8e:	701a      	strb	r2, [r3, #0]
      break;
 800ac90:	e130      	b.n	800aef4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	795b      	ldrb	r3, [r3, #5]
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 ff65 	bl	800bb68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	791b      	ldrb	r3, [r3, #4]
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 ff5f 	bl	800bb68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	701a      	strb	r2, [r3, #0]
      break;
 800acb6:	e11d      	b.n	800aef4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800acb8:	2101      	movs	r1, #1
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fa68 	bl	800b190 <USBH_SetAddress>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d132      	bne.n	800ad30 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800acca:	2002      	movs	r0, #2
 800accc:	f001 fb1c 	bl	800c308 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2203      	movs	r2, #3
 800acdc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	7919      	ldrb	r1, [r3, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800acf2:	b292      	uxth	r2, r2
 800acf4:	9202      	str	r2, [sp, #8]
 800acf6:	2200      	movs	r2, #0
 800acf8:	9201      	str	r2, [sp, #4]
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	4603      	mov	r3, r0
 800acfe:	2280      	movs	r2, #128	; 0x80
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fee1 	bl	800bac8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	7959      	ldrb	r1, [r3, #5]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad1a:	b292      	uxth	r2, r2
 800ad1c:	9202      	str	r2, [sp, #8]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	9201      	str	r2, [sp, #4]
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	4603      	mov	r3, r0
 800ad26:	2200      	movs	r2, #0
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fecd 	bl	800bac8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ad2e:	e0e3      	b.n	800aef8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	f040 80e0 	bne.w	800aef8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	220d      	movs	r2, #13
 800ad3c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	705a      	strb	r2, [r3, #1]
      break;
 800ad44:	e0d8      	b.n	800aef8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad46:	2109      	movs	r1, #9
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f99d 	bl	800b088 <USBH_Get_CfgDesc>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d103      	bne.n	800ad60 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2204      	movs	r2, #4
 800ad5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad5e:	e0cd      	b.n	800aefc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad60:	7bbb      	ldrb	r3, [r7, #14]
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	f040 80ca 	bne.w	800aefc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad6e:	3301      	adds	r3, #1
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d903      	bls.n	800ad8a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	220d      	movs	r2, #13
 800ad86:	701a      	strb	r2, [r3, #0]
      break;
 800ad88:	e0b8      	b.n	800aefc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	795b      	ldrb	r3, [r3, #5]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fee9 	bl	800bb68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	791b      	ldrb	r3, [r3, #4]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fee3 	bl	800bb68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	701a      	strb	r2, [r3, #0]
      break;
 800adae:	e0a5      	b.n	800aefc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f965 	bl	800b088 <USBH_Get_CfgDesc>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d103      	bne.n	800add0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2205      	movs	r2, #5
 800adcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800adce:	e097      	b.n	800af00 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	2b03      	cmp	r3, #3
 800add4:	f040 8094 	bne.w	800af00 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adde:	3301      	adds	r3, #1
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d903      	bls.n	800adfa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	220d      	movs	r2, #13
 800adf6:	701a      	strb	r2, [r3, #0]
      break;
 800adf8:	e082      	b.n	800af00 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	795b      	ldrb	r3, [r3, #5]
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 feb1 	bl	800bb68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	791b      	ldrb	r3, [r3, #4]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 feab 	bl	800bb68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	701a      	strb	r2, [r3, #0]
      break;
 800ae1e:	e06f      	b.n	800af00 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d019      	beq.n	800ae5e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae36:	23ff      	movs	r3, #255	; 0xff
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f949 	bl	800b0d0 <USBH_Get_StringDesc>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d103      	bne.n	800ae50 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2206      	movs	r2, #6
 800ae4c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae4e:	e059      	b.n	800af04 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d156      	bne.n	800af04 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2206      	movs	r2, #6
 800ae5a:	705a      	strb	r2, [r3, #1]
      break;
 800ae5c:	e052      	b.n	800af04 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2206      	movs	r2, #6
 800ae62:	705a      	strb	r2, [r3, #1]
      break;
 800ae64:	e04e      	b.n	800af04 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d019      	beq.n	800aea4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae7c:	23ff      	movs	r3, #255	; 0xff
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f926 	bl	800b0d0 <USBH_Get_StringDesc>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d103      	bne.n	800ae96 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2207      	movs	r2, #7
 800ae92:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae94:	e038      	b.n	800af08 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d135      	bne.n	800af08 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2207      	movs	r2, #7
 800aea0:	705a      	strb	r2, [r3, #1]
      break;
 800aea2:	e031      	b.n	800af08 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2207      	movs	r2, #7
 800aea8:	705a      	strb	r2, [r3, #1]
      break;
 800aeaa:	e02d      	b.n	800af08 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d017      	beq.n	800aee6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aec2:	23ff      	movs	r3, #255	; 0xff
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f903 	bl	800b0d0 <USBH_Get_StringDesc>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d102      	bne.n	800aeda <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aed8:	e018      	b.n	800af0c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b03      	cmp	r3, #3
 800aede:	d115      	bne.n	800af0c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
      break;
 800aee4:	e012      	b.n	800af0c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeea:	e00f      	b.n	800af0c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800aeec:	bf00      	nop
 800aeee:	e00e      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800aef0:	bf00      	nop
 800aef2:	e00c      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800aef4:	bf00      	nop
 800aef6:	e00a      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800aef8:	bf00      	nop
 800aefa:	e008      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800aefc:	bf00      	nop
 800aefe:	e006      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800af00:	bf00      	nop
 800af02:	e004      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800af04:	bf00      	nop
 800af06:	e002      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800af08:	bf00      	nop
 800af0a:	e000      	b.n	800af0e <USBH_HandleEnum+0x3be>
      break;
 800af0c:	bf00      	nop
  }
  return Status;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f804 	bl	800af5a <USBH_HandleSof>
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b0b      	cmp	r3, #11
 800af6a:	d10a      	bne.n	800af82 <USBH_HandleSof+0x28>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	4798      	blx	r3
  }
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2201      	movs	r2, #1
 800af96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800af9a:	bf00      	nop
}
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b083      	sub	sp, #12
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800afb6:	bf00      	nop
}
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 f830 	bl	800c076 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	791b      	ldrb	r3, [r3, #4]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fda3 	bl	800bb68 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	795b      	ldrb	r3, [r3, #5]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fd9d 	bl	800bb68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	4613      	mov	r3, r2
 800b052:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b056:	2100      	movs	r1, #0
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f864 	bl	800b126 <USBH_GetDescriptor>
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	b292      	uxth	r2, r2
 800b078:	4619      	mov	r1, r3
 800b07a:	f000 f918 	bl	800b2ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	331c      	adds	r3, #28
 800b098:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b09a:	887b      	ldrh	r3, [r7, #2]
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f83d 	bl	800b126 <USBH_GetDescriptor>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	72fb      	strb	r3, [r7, #11]
 800b0b0:	7afb      	ldrb	r3, [r7, #11]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d107      	bne.n	800b0c6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b0bc:	887a      	ldrh	r2, [r7, #2]
 800b0be:	68f9      	ldr	r1, [r7, #12]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 f964 	bl	800b38e <USBH_ParseCfgDesc>
  }

  return status;
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	607a      	str	r2, [r7, #4]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	460b      	mov	r3, r1
 800b0de:	72fb      	strb	r3, [r7, #11]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b0ec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b0f4:	893b      	ldrh	r3, [r7, #8]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 f812 	bl	800b126 <USBH_GetDescriptor>
 800b102:	4603      	mov	r3, r0
 800b104:	75fb      	strb	r3, [r7, #23]
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d107      	bne.n	800b11c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b112:	893a      	ldrh	r2, [r7, #8]
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fa37 	bl	800b58a <USBH_ParseStringDesc>
  }

  return status;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	607b      	str	r3, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	72fb      	strb	r3, [r7, #11]
 800b134:	4613      	mov	r3, r2
 800b136:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	789b      	ldrb	r3, [r3, #2]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d11c      	bne.n	800b17a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b140:	7afb      	ldrb	r3, [r7, #11]
 800b142:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b146:	b2da      	uxtb	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2206      	movs	r2, #6
 800b150:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	893a      	ldrh	r2, [r7, #8]
 800b156:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b158:	893b      	ldrh	r3, [r7, #8]
 800b15a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b15e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b162:	d104      	bne.n	800b16e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f240 4209 	movw	r2, #1033	; 0x409
 800b16a:	829a      	strh	r2, [r3, #20]
 800b16c:	e002      	b.n	800b174 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8b3a      	ldrh	r2, [r7, #24]
 800b178:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b17a:	8b3b      	ldrh	r3, [r7, #24]
 800b17c:	461a      	mov	r2, r3
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 fa50 	bl	800b626 <USBH_CtlReq>
 800b186:	4603      	mov	r3, r0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	789b      	ldrb	r3, [r3, #2]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d10f      	bne.n	800b1c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2205      	movs	r2, #5
 800b1ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fa2c 	bl	800b626 <USBH_CtlReq>
 800b1ce:	4603      	mov	r3, r0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	789b      	ldrb	r3, [r3, #2]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d10e      	bne.n	800b20a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2209      	movs	r2, #9
 800b1f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	887a      	ldrh	r2, [r7, #2]
 800b1fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b20a:	2200      	movs	r2, #0
 800b20c:	2100      	movs	r1, #0
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa09 	bl	800b626 <USBH_CtlReq>
 800b214:	4603      	mov	r3, r0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	789b      	ldrb	r3, [r3, #2]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d10f      	bne.n	800b252 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2203      	movs	r2, #3
 800b23c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	b29a      	uxth	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b252:	2200      	movs	r2, #0
 800b254:	2100      	movs	r1, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f9e5 	bl	800b626 <USBH_CtlReq>
 800b25c:	4603      	mov	r3, r0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	789b      	ldrb	r3, [r3, #2]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d10f      	bne.n	800b29a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2202      	movs	r2, #2
 800b27e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b29a:	2200      	movs	r2, #0
 800b29c:	2100      	movs	r1, #0
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f9c1 	bl	800b626 <USBH_CtlReq>
 800b2a4:	4603      	mov	r3, r0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	60f8      	str	r0, [r7, #12]
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	781a      	ldrb	r2, [r3, #0]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	785a      	ldrb	r2, [r3, #1]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	3302      	adds	r3, #2
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3303      	adds	r3, #3
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	791a      	ldrb	r2, [r3, #4]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	795a      	ldrb	r2, [r3, #5]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	799a      	ldrb	r2, [r3, #6]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	79da      	ldrb	r2, [r3, #7]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b308:	88fb      	ldrh	r3, [r7, #6]
 800b30a:	2b08      	cmp	r3, #8
 800b30c:	d939      	bls.n	800b382 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	3308      	adds	r3, #8
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	b29a      	uxth	r2, r3
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	3309      	adds	r3, #9
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	b29b      	uxth	r3, r3
 800b322:	4313      	orrs	r3, r2
 800b324:	b29a      	uxth	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	330a      	adds	r3, #10
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	b29a      	uxth	r2, r3
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	330b      	adds	r3, #11
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	4313      	orrs	r3, r2
 800b340:	b29a      	uxth	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	330c      	adds	r3, #12
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	330d      	adds	r3, #13
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	b29b      	uxth	r3, r3
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	b29b      	uxth	r3, r3
 800b35a:	4313      	orrs	r3, r2
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	7b9a      	ldrb	r2, [r3, #14]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	7bda      	ldrb	r2, [r3, #15]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	7c1a      	ldrb	r2, [r3, #16]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	7c5a      	ldrb	r2, [r3, #17]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	745a      	strb	r2, [r3, #17]
  }
}
 800b382:	bf00      	nop
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b08a      	sub	sp, #40	; 0x28
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	4613      	mov	r3, r2
 800b39a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	781a      	ldrb	r2, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	785a      	ldrb	r2, [r3, #1]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	3302      	adds	r3, #2
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	3303      	adds	r3, #3
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	021b      	lsls	r3, r3, #8
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	791a      	ldrb	r2, [r3, #4]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	795a      	ldrb	r2, [r3, #5]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	799a      	ldrb	r2, [r3, #6]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	79da      	ldrb	r2, [r3, #7]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	7a1a      	ldrb	r2, [r3, #8]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b404:	88fb      	ldrh	r3, [r7, #6]
 800b406:	2b09      	cmp	r3, #9
 800b408:	d95f      	bls.n	800b4ca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b40a:	2309      	movs	r3, #9
 800b40c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b40e:	2300      	movs	r3, #0
 800b410:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b412:	e051      	b.n	800b4b8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b414:	f107 0316 	add.w	r3, r7, #22
 800b418:	4619      	mov	r1, r3
 800b41a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b41c:	f000 f8e8 	bl	800b5f0 <USBH_GetNextDesc>
 800b420:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	2b04      	cmp	r3, #4
 800b428:	d146      	bne.n	800b4b8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b42a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b42e:	221a      	movs	r2, #26
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	3308      	adds	r3, #8
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	3302      	adds	r3, #2
 800b43c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b43e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b440:	69f8      	ldr	r0, [r7, #28]
 800b442:	f000 f846 	bl	800b4d2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b450:	e022      	b.n	800b498 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b452:	f107 0316 	add.w	r3, r7, #22
 800b456:	4619      	mov	r1, r3
 800b458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b45a:	f000 f8c9 	bl	800b5f0 <USBH_GetNextDesc>
 800b45e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	2b05      	cmp	r3, #5
 800b466:	d117      	bne.n	800b498 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b46c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b470:	3201      	adds	r2, #1
 800b472:	00d2      	lsls	r2, r2, #3
 800b474:	211a      	movs	r1, #26
 800b476:	fb01 f303 	mul.w	r3, r1, r3
 800b47a:	4413      	add	r3, r2
 800b47c:	3308      	adds	r3, #8
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	4413      	add	r3, r2
 800b482:	3304      	adds	r3, #4
 800b484:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b488:	69b8      	ldr	r0, [r7, #24]
 800b48a:	f000 f851 	bl	800b530 <USBH_ParseEPDesc>
            ep_ix++;
 800b48e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b492:	3301      	adds	r3, #1
 800b494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	791b      	ldrb	r3, [r3, #4]
 800b49c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d204      	bcs.n	800b4ae <USBH_ParseCfgDesc+0x120>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	885a      	ldrh	r2, [r3, #2]
 800b4a8:	8afb      	ldrh	r3, [r7, #22]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d8d1      	bhi.n	800b452 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b4ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b4b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d804      	bhi.n	800b4ca <USBH_ParseCfgDesc+0x13c>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	885a      	ldrh	r2, [r3, #2]
 800b4c4:	8afb      	ldrh	r3, [r7, #22]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d8a4      	bhi.n	800b414 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b4ca:	bf00      	nop
 800b4cc:	3728      	adds	r7, #40	; 0x28
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	781a      	ldrb	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	785a      	ldrb	r2, [r3, #1]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	789a      	ldrb	r2, [r3, #2]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	78da      	ldrb	r2, [r3, #3]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	791a      	ldrb	r2, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	795a      	ldrb	r2, [r3, #5]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	799a      	ldrb	r2, [r3, #6]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	79da      	ldrb	r2, [r3, #7]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	7a1a      	ldrb	r2, [r3, #8]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	721a      	strb	r2, [r3, #8]
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781a      	ldrb	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	785a      	ldrb	r2, [r3, #1]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	789a      	ldrb	r2, [r3, #2]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	78da      	ldrb	r2, [r3, #3]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	3304      	adds	r3, #4
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	b29a      	uxth	r2, r3
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	3305      	adds	r3, #5
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4313      	orrs	r3, r2
 800b570:	b29a      	uxth	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	799a      	ldrb	r2, [r3, #6]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	719a      	strb	r2, [r3, #6]
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b087      	sub	sp, #28
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	4613      	mov	r3, r2
 800b596:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3301      	adds	r3, #1
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d120      	bne.n	800b5e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	1e9a      	subs	r2, r3, #2
 800b5a8:	88fb      	ldrh	r3, [r7, #6]
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	bf28      	it	cs
 800b5ae:	4613      	movcs	r3, r2
 800b5b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	3302      	adds	r3, #2
 800b5b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	82fb      	strh	r3, [r7, #22]
 800b5bc:	e00b      	b.n	800b5d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b5be:	8afb      	ldrh	r3, [r7, #22]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	781a      	ldrb	r2, [r3, #0]
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b5d0:	8afb      	ldrh	r3, [r7, #22]
 800b5d2:	3302      	adds	r3, #2
 800b5d4:	82fb      	strh	r3, [r7, #22]
 800b5d6:	8afa      	ldrh	r2, [r7, #22]
 800b5d8:	8abb      	ldrh	r3, [r7, #20]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d3ef      	bcc.n	800b5be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	701a      	strb	r2, [r3, #0]
  }
}
 800b5e4:	bf00      	nop
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	881a      	ldrh	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	b29b      	uxth	r3, r3
 800b604:	4413      	add	r3, r2
 800b606:	b29a      	uxth	r2, r3
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4413      	add	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b618:	68fb      	ldr	r3, [r7, #12]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b086      	sub	sp, #24
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	4613      	mov	r3, r2
 800b632:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b634:	2301      	movs	r3, #1
 800b636:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	789b      	ldrb	r3, [r3, #2]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d002      	beq.n	800b646 <USBH_CtlReq+0x20>
 800b640:	2b02      	cmp	r3, #2
 800b642:	d00f      	beq.n	800b664 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b644:	e027      	b.n	800b696 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	88fa      	ldrh	r2, [r7, #6]
 800b650:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2201      	movs	r2, #1
 800b656:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2202      	movs	r2, #2
 800b65c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b65e:	2301      	movs	r3, #1
 800b660:	75fb      	strb	r3, [r7, #23]
      break;
 800b662:	e018      	b.n	800b696 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 f81b 	bl	800b6a0 <USBH_HandleControl>
 800b66a:	4603      	mov	r3, r0
 800b66c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <USBH_CtlReq+0x54>
 800b674:	7dfb      	ldrb	r3, [r7, #23]
 800b676:	2b03      	cmp	r3, #3
 800b678:	d106      	bne.n	800b688 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2201      	movs	r2, #1
 800b67e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	761a      	strb	r2, [r3, #24]
      break;
 800b686:	e005      	b.n	800b694 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d102      	bne.n	800b694 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2201      	movs	r2, #1
 800b692:	709a      	strb	r2, [r3, #2]
      break;
 800b694:	bf00      	nop
  }
  return status;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	7e1b      	ldrb	r3, [r3, #24]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	2b0a      	cmp	r3, #10
 800b6b8:	f200 8156 	bhi.w	800b968 <USBH_HandleControl+0x2c8>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <USBH_HandleControl+0x24>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b6f1 	.word	0x0800b6f1
 800b6c8:	0800b70b 	.word	0x0800b70b
 800b6cc:	0800b775 	.word	0x0800b775
 800b6d0:	0800b79b 	.word	0x0800b79b
 800b6d4:	0800b7d3 	.word	0x0800b7d3
 800b6d8:	0800b7fd 	.word	0x0800b7fd
 800b6dc:	0800b84f 	.word	0x0800b84f
 800b6e0:	0800b871 	.word	0x0800b871
 800b6e4:	0800b8ad 	.word	0x0800b8ad
 800b6e8:	0800b8d3 	.word	0x0800b8d3
 800b6ec:	0800b911 	.word	0x0800b911
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f103 0110 	add.w	r1, r3, #16
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	795b      	ldrb	r3, [r3, #5]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f943 	bl	800b988 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2202      	movs	r2, #2
 800b706:	761a      	strb	r2, [r3, #24]
      break;
 800b708:	e139      	b.n	800b97e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	795b      	ldrb	r3, [r3, #5]
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fd9f 	bl	800c254 <USBH_LL_GetURBState>
 800b716:	4603      	mov	r3, r0
 800b718:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d11e      	bne.n	800b75e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	7c1b      	ldrb	r3, [r3, #16]
 800b724:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b728:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8adb      	ldrh	r3, [r3, #22]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00a      	beq.n	800b748 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b732:	7b7b      	ldrb	r3, [r7, #13]
 800b734:	2b80      	cmp	r3, #128	; 0x80
 800b736:	d103      	bne.n	800b740 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2203      	movs	r2, #3
 800b73c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b73e:	e115      	b.n	800b96c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2205      	movs	r2, #5
 800b744:	761a      	strb	r2, [r3, #24]
      break;
 800b746:	e111      	b.n	800b96c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b748:	7b7b      	ldrb	r3, [r7, #13]
 800b74a:	2b80      	cmp	r3, #128	; 0x80
 800b74c:	d103      	bne.n	800b756 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2209      	movs	r2, #9
 800b752:	761a      	strb	r2, [r3, #24]
      break;
 800b754:	e10a      	b.n	800b96c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2207      	movs	r2, #7
 800b75a:	761a      	strb	r2, [r3, #24]
      break;
 800b75c:	e106      	b.n	800b96c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
 800b760:	2b04      	cmp	r3, #4
 800b762:	d003      	beq.n	800b76c <USBH_HandleControl+0xcc>
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	2b02      	cmp	r3, #2
 800b768:	f040 8100 	bne.w	800b96c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	220b      	movs	r2, #11
 800b770:	761a      	strb	r2, [r3, #24]
      break;
 800b772:	e0fb      	b.n	800b96c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6899      	ldr	r1, [r3, #8]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	899a      	ldrh	r2, [r3, #12]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	791b      	ldrb	r3, [r3, #4]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f93a 	bl	800ba06 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2204      	movs	r2, #4
 800b796:	761a      	strb	r2, [r3, #24]
      break;
 800b798:	e0f1      	b.n	800b97e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	791b      	ldrb	r3, [r3, #4]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fd57 	bl	800c254 <USBH_LL_GetURBState>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d102      	bne.n	800b7b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2209      	movs	r2, #9
 800b7b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	2b05      	cmp	r3, #5
 800b7ba:	d102      	bne.n	800b7c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b7c0:	e0d6      	b.n	800b970 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	f040 80d3 	bne.w	800b970 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	220b      	movs	r2, #11
 800b7ce:	761a      	strb	r2, [r3, #24]
      break;
 800b7d0:	e0ce      	b.n	800b970 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6899      	ldr	r1, [r3, #8]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	899a      	ldrh	r2, [r3, #12]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	795b      	ldrb	r3, [r3, #5]
 800b7de:	2001      	movs	r0, #1
 800b7e0:	9000      	str	r0, [sp, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f8ea 	bl	800b9bc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2206      	movs	r2, #6
 800b7f8:	761a      	strb	r2, [r3, #24]
      break;
 800b7fa:	e0c0      	b.n	800b97e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	795b      	ldrb	r3, [r3, #5]
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 fd26 	bl	800c254 <USBH_LL_GetURBState>
 800b808:	4603      	mov	r3, r0
 800b80a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d103      	bne.n	800b81a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2207      	movs	r2, #7
 800b816:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b818:	e0ac      	b.n	800b974 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d105      	bne.n	800b82c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	220c      	movs	r2, #12
 800b824:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b826:	2303      	movs	r3, #3
 800b828:	73fb      	strb	r3, [r7, #15]
      break;
 800b82a:	e0a3      	b.n	800b974 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d103      	bne.n	800b83a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2205      	movs	r2, #5
 800b836:	761a      	strb	r2, [r3, #24]
      break;
 800b838:	e09c      	b.n	800b974 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b83a:	7bbb      	ldrb	r3, [r7, #14]
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	f040 8099 	bne.w	800b974 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	220b      	movs	r2, #11
 800b846:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b848:	2302      	movs	r3, #2
 800b84a:	73fb      	strb	r3, [r7, #15]
      break;
 800b84c:	e092      	b.n	800b974 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	791b      	ldrb	r3, [r3, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	2100      	movs	r1, #0
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f8d5 	bl	800ba06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b862:	b29a      	uxth	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2208      	movs	r2, #8
 800b86c:	761a      	strb	r2, [r3, #24]

      break;
 800b86e:	e086      	b.n	800b97e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	791b      	ldrb	r3, [r3, #4]
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fcec 	bl	800c254 <USBH_LL_GetURBState>
 800b87c:	4603      	mov	r3, r0
 800b87e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b880:	7bbb      	ldrb	r3, [r7, #14]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d105      	bne.n	800b892 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	220d      	movs	r2, #13
 800b88a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b890:	e072      	b.n	800b978 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b892:	7bbb      	ldrb	r3, [r7, #14]
 800b894:	2b04      	cmp	r3, #4
 800b896:	d103      	bne.n	800b8a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	220b      	movs	r2, #11
 800b89c:	761a      	strb	r2, [r3, #24]
      break;
 800b89e:	e06b      	b.n	800b978 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2b05      	cmp	r3, #5
 800b8a4:	d168      	bne.n	800b978 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8aa:	e065      	b.n	800b978 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	795b      	ldrb	r3, [r3, #5]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	9200      	str	r2, [sp, #0]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f87f 	bl	800b9bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	220a      	movs	r2, #10
 800b8ce:	761a      	strb	r2, [r3, #24]
      break;
 800b8d0:	e055      	b.n	800b97e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	795b      	ldrb	r3, [r3, #5]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fcbb 	bl	800c254 <USBH_LL_GetURBState>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d105      	bne.n	800b8f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	220d      	movs	r2, #13
 800b8f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8f2:	e043      	b.n	800b97c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d103      	bne.n	800b902 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2209      	movs	r2, #9
 800b8fe:	761a      	strb	r2, [r3, #24]
      break;
 800b900:	e03c      	b.n	800b97c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b902:	7bbb      	ldrb	r3, [r7, #14]
 800b904:	2b04      	cmp	r3, #4
 800b906:	d139      	bne.n	800b97c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	220b      	movs	r2, #11
 800b90c:	761a      	strb	r2, [r3, #24]
      break;
 800b90e:	e035      	b.n	800b97c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	7e5b      	ldrb	r3, [r3, #25]
 800b914:	3301      	adds	r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	765a      	strb	r2, [r3, #25]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	7e5b      	ldrb	r3, [r3, #25]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d806      	bhi.n	800b932 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b930:	e025      	b.n	800b97e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b938:	2106      	movs	r1, #6
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	795b      	ldrb	r3, [r3, #5]
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f90c 	bl	800bb68 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	791b      	ldrb	r3, [r3, #4]
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f906 	bl	800bb68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b962:	2302      	movs	r3, #2
 800b964:	73fb      	strb	r3, [r7, #15]
      break;
 800b966:	e00a      	b.n	800b97e <USBH_HandleControl+0x2de>

    default:
      break;
 800b968:	bf00      	nop
 800b96a:	e008      	b.n	800b97e <USBH_HandleControl+0x2de>
      break;
 800b96c:	bf00      	nop
 800b96e:	e006      	b.n	800b97e <USBH_HandleControl+0x2de>
      break;
 800b970:	bf00      	nop
 800b972:	e004      	b.n	800b97e <USBH_HandleControl+0x2de>
      break;
 800b974:	bf00      	nop
 800b976:	e002      	b.n	800b97e <USBH_HandleControl+0x2de>
      break;
 800b978:	bf00      	nop
 800b97a:	e000      	b.n	800b97e <USBH_HandleControl+0x2de>
      break;
 800b97c:	bf00      	nop
  }

  return status;
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af04      	add	r7, sp, #16
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	4613      	mov	r3, r2
 800b994:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b996:	79f9      	ldrb	r1, [r7, #7]
 800b998:	2300      	movs	r3, #0
 800b99a:	9303      	str	r3, [sp, #12]
 800b99c:	2308      	movs	r3, #8
 800b99e:	9302      	str	r3, [sp, #8]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fc20 	bl	800c1f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af04      	add	r7, sp, #16
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	80fb      	strh	r3, [r7, #6]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9e0:	7979      	ldrb	r1, [r7, #5]
 800b9e2:	7e3b      	ldrb	r3, [r7, #24]
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	88fb      	ldrh	r3, [r7, #6]
 800b9e8:	9302      	str	r3, [sp, #8]
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f000 fbfb 	bl	800c1f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b088      	sub	sp, #32
 800ba0a:	af04      	add	r7, sp, #16
 800ba0c:	60f8      	str	r0, [r7, #12]
 800ba0e:	60b9      	str	r1, [r7, #8]
 800ba10:	4611      	mov	r1, r2
 800ba12:	461a      	mov	r2, r3
 800ba14:	460b      	mov	r3, r1
 800ba16:	80fb      	strh	r3, [r7, #6]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba1c:	7979      	ldrb	r1, [r7, #5]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9303      	str	r3, [sp, #12]
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	9302      	str	r3, [sp, #8]
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2201      	movs	r2, #1
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f000 fbdd 	bl	800c1f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ba38:	2300      	movs	r3, #0

}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b088      	sub	sp, #32
 800ba46:	af04      	add	r7, sp, #16
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	60b9      	str	r1, [r7, #8]
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	461a      	mov	r2, r3
 800ba50:	460b      	mov	r3, r1
 800ba52:	80fb      	strh	r3, [r7, #6]
 800ba54:	4613      	mov	r3, r2
 800ba56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba66:	7979      	ldrb	r1, [r7, #5]
 800ba68:	7e3b      	ldrb	r3, [r7, #24]
 800ba6a:	9303      	str	r3, [sp, #12]
 800ba6c:	88fb      	ldrh	r3, [r7, #6]
 800ba6e:	9302      	str	r3, [sp, #8]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	2301      	movs	r3, #1
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	2302      	movs	r3, #2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f000 fbb8 	bl	800c1f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af04      	add	r7, sp, #16
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	4611      	mov	r1, r2
 800ba98:	461a      	mov	r2, r3
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	80fb      	strh	r3, [r7, #6]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800baa2:	7979      	ldrb	r1, [r7, #5]
 800baa4:	2300      	movs	r3, #0
 800baa6:	9303      	str	r3, [sp, #12]
 800baa8:	88fb      	ldrh	r3, [r7, #6]
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	2301      	movs	r3, #1
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2302      	movs	r3, #2
 800bab6:	2201      	movs	r2, #1
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f000 fb9a 	bl	800c1f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af04      	add	r7, sp, #16
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	4608      	mov	r0, r1
 800bad2:	4611      	mov	r1, r2
 800bad4:	461a      	mov	r2, r3
 800bad6:	4603      	mov	r3, r0
 800bad8:	70fb      	strb	r3, [r7, #3]
 800bada:	460b      	mov	r3, r1
 800badc:	70bb      	strb	r3, [r7, #2]
 800bade:	4613      	mov	r3, r2
 800bae0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bae2:	7878      	ldrb	r0, [r7, #1]
 800bae4:	78ba      	ldrb	r2, [r7, #2]
 800bae6:	78f9      	ldrb	r1, [r7, #3]
 800bae8:	8b3b      	ldrh	r3, [r7, #24]
 800baea:	9302      	str	r3, [sp, #8]
 800baec:	7d3b      	ldrb	r3, [r7, #20]
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	7c3b      	ldrb	r3, [r7, #16]
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	4603      	mov	r3, r0
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fb2d 	bl	800c156 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b082      	sub	sp, #8
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bb12:	78fb      	ldrb	r3, [r7, #3]
 800bb14:	4619      	mov	r1, r3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fb4c 	bl	800c1b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f836 	bl	800bba4 <USBH_GetFreePipe>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bb3c:	89fb      	ldrh	r3, [r7, #14]
 800bb3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d00a      	beq.n	800bb5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bb46:	78fa      	ldrb	r2, [r7, #3]
 800bb48:	89fb      	ldrh	r3, [r7, #14]
 800bb4a:	f003 030f 	and.w	r3, r3, #15
 800bb4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	33e0      	adds	r3, #224	; 0xe0
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	440b      	add	r3, r1
 800bb5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bb5c:	89fb      	ldrh	r3, [r7, #14]
 800bb5e:	b2db      	uxtb	r3, r3
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	2b0a      	cmp	r3, #10
 800bb78:	d80d      	bhi.n	800bb96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	33e0      	adds	r3, #224	; 0xe0
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	78fb      	ldrb	r3, [r7, #3]
 800bb88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	33e0      	adds	r3, #224	; 0xe0
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	440b      	add	r3, r1
 800bb94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73fb      	strb	r3, [r7, #15]
 800bbb4:	e00f      	b.n	800bbd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	33e0      	adds	r3, #224	; 0xe0
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	e007      	b.n	800bbe0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	73fb      	strb	r3, [r7, #15]
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
 800bbd8:	2b0a      	cmp	r3, #10
 800bbda:	d9ec      	bls.n	800bbb6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bbdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
  	{

  	}
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a12      	ldr	r2, [pc, #72]	; (800bc54 <USBH_CDC_ReceiveCallback+0x54>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d11c      	bne.n	800bc4a <USBH_CDC_ReceiveCallback+0x4a>
  	{
  		// handles the data recived from the USB CDC host, we just print it out to UART
  		rx_size = USBH_CDC_GetLastReceivedDataSize(phost);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7fe fb3e 	bl	800a292 <USBH_CDC_GetLastReceivedDataSize>
 800bc16:	4603      	mov	r3, r0
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4b0f      	ldr	r3, [pc, #60]	; (800bc58 <USBH_CDC_ReceiveCallback+0x58>)
 800bc1c:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, CDC_RX_Buffer, rx_size, HAL_MAX_DELAY);
 800bc1e:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <USBH_CDC_ReceiveCallback+0x58>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295
 800bc28:	490c      	ldr	r1, [pc, #48]	; (800bc5c <USBH_CDC_ReceiveCallback+0x5c>)
 800bc2a:	480d      	ldr	r0, [pc, #52]	; (800bc60 <USBH_CDC_ReceiveCallback+0x60>)
 800bc2c:	f7fb f938 	bl	8006ea0 <HAL_UART_Transmit>

		memset(CDC_RX_Buffer,0,RX_BUFF_SIZE);
 800bc30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc34:	2100      	movs	r1, #0
 800bc36:	4809      	ldr	r0, [pc, #36]	; (800bc5c <USBH_CDC_ReceiveCallback+0x5c>)
 800bc38:	f000 fbf4 	bl	800c424 <memset>
		USBH_CDC_Receive(phost, CDC_RX_Buffer, RX_BUFF_SIZE);
 800bc3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc40:	4906      	ldr	r1, [pc, #24]	; (800bc5c <USBH_CDC_ReceiveCallback+0x5c>)
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7fe fb71 	bl	800a32a <USBH_CDC_Receive>
  	}

  	return;
 800bc48:	bf00      	nop
 800bc4a:	bf00      	nop
}
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	240003e8 	.word	0x240003e8
 800bc58:	24000280 	.word	0x24000280
 800bc5c:	240007c0 	.word	0x240007c0
 800bc60:	24000290 	.word	0x24000290

0800bc64 <writeToDongle>:
/**
  * @brief Simple function that takes a string and transmit it to the dongle
  * @retval None
  */
void writeToDongle(uint8_t * cmd)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	USBH_CDC_Transmit (&hUsbHostFS, cmd, strlen((char *)cmd));
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7f4 fb37 	bl	80002e0 <strlen>
 800bc72:	4603      	mov	r3, r0
 800bc74:	461a      	mov	r2, r3
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	4803      	ldr	r0, [pc, #12]	; (800bc88 <writeToDongle+0x24>)
 800bc7a:	f7fe fb28 	bl	800a2ce <USBH_CDC_Transmit>
}
 800bc7e:	bf00      	nop
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	240003e8 	.word	0x240003e8

0800bc8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bc90:	2201      	movs	r2, #1
 800bc92:	490e      	ldr	r1, [pc, #56]	; (800bccc <MX_USB_HOST_Init+0x40>)
 800bc94:	480e      	ldr	r0, [pc, #56]	; (800bcd0 <MX_USB_HOST_Init+0x44>)
 800bc96:	f7fe fc51 	bl	800a53c <USBH_Init>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bca0:	f7f5 f840 	bl	8000d24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bca4:	490b      	ldr	r1, [pc, #44]	; (800bcd4 <MX_USB_HOST_Init+0x48>)
 800bca6:	480a      	ldr	r0, [pc, #40]	; (800bcd0 <MX_USB_HOST_Init+0x44>)
 800bca8:	f7fe fcd6 	bl	800a658 <USBH_RegisterClass>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bcb2:	f7f5 f837 	bl	8000d24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bcb6:	4806      	ldr	r0, [pc, #24]	; (800bcd0 <MX_USB_HOST_Init+0x44>)
 800bcb8:	f7fe fd5a 	bl	800a770 <USBH_Start>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bcc2:	f7f5 f82f 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bcc6:	bf00      	nop
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	0800bced 	.word	0x0800bced
 800bcd0:	240003e8 	.word	0x240003e8
 800bcd4:	24000010 	.word	0x24000010

0800bcd8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bcdc:	4802      	ldr	r0, [pc, #8]	; (800bce8 <MX_USB_HOST_Process+0x10>)
 800bcde:	f7fe fd57 	bl	800a790 <USBH_Process>
}
 800bce2:	bf00      	nop
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	240003e8 	.word	0x240003e8

0800bcec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d866      	bhi.n	800bdce <USBH_UserProcess+0xe2>
 800bd00:	a201      	add	r2, pc, #4	; (adr r2, 800bd08 <USBH_UserProcess+0x1c>)
 800bd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd06:	bf00      	nop
 800bd08:	0800bdcf 	.word	0x0800bdcf
 800bd0c:	0800bd4b 	.word	0x0800bd4b
 800bd10:	0800bdcf 	.word	0x0800bdcf
 800bd14:	0800bda1 	.word	0x0800bda1
 800bd18:	0800bd1d 	.word	0x0800bd1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bd1c:	4b2f      	ldr	r3, [pc, #188]	; (800bddc <USBH_UserProcess+0xf0>)
 800bd1e:	2203      	movs	r2, #3
 800bd20:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800bd22:	4b2f      	ldr	r3, [pc, #188]	; (800bde0 <USBH_UserProcess+0xf4>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	701a      	strb	r2, [r3, #0]

  // Turn on Red LED, turn off Green and Yellow LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	482d      	ldr	r0, [pc, #180]	; (800bde4 <USBH_UserProcess+0xf8>)
 800bd2e:	f7f6 ffa1 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800bd32:	2200      	movs	r2, #0
 800bd34:	2102      	movs	r1, #2
 800bd36:	482c      	ldr	r0, [pc, #176]	; (800bde8 <USBH_UserProcess+0xfc>)
 800bd38:	f7f6 ff9c 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bd42:	4828      	ldr	r0, [pc, #160]	; (800bde4 <USBH_UserProcess+0xf8>)
 800bd44:	f7f6 ff96 	bl	8002c74 <HAL_GPIO_WritePin>
  break;
 800bd48:	e044      	b.n	800bdd4 <USBH_UserProcess+0xe8>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bd4a:	4b24      	ldr	r3, [pc, #144]	; (800bddc <USBH_UserProcess+0xf0>)
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	701a      	strb	r2, [r3, #0]
  // Check if BleuIO firmware is running
  if(phost->device.DevDesc.idProduct == 0x6002)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800bd56:	f246 0202 	movw	r2, #24578	; 0x6002
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d139      	bne.n	800bdd2 <USBH_UserProcess+0xe6>
  {
	  isBleuIOReady = true;
 800bd5e:	4b20      	ldr	r3, [pc, #128]	; (800bde0 <USBH_UserProcess+0xf4>)
 800bd60:	2201      	movs	r2, #1
 800bd62:	701a      	strb	r2, [r3, #0]
	  // Sends message to uart that BleuIO is connected and ready
	  HAL_UART_Transmit(&huart3, (uint8_t*)BLEUIO_READY, strlen(BLEUIO_READY), HAL_MAX_DELAY);
 800bd64:	f04f 33ff 	mov.w	r3, #4294967295
 800bd68:	2219      	movs	r2, #25
 800bd6a:	4920      	ldr	r1, [pc, #128]	; (800bdec <USBH_UserProcess+0x100>)
 800bd6c:	4820      	ldr	r0, [pc, #128]	; (800bdf0 <USBH_UserProcess+0x104>)
 800bd6e:	f7fb f897 	bl	8006ea0 <HAL_UART_Transmit>

	  // Turn on Green LED, turn off Yellow and Red LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800bd72:	2201      	movs	r2, #1
 800bd74:	2101      	movs	r1, #1
 800bd76:	481b      	ldr	r0, [pc, #108]	; (800bde4 <USBH_UserProcess+0xf8>)
 800bd78:	f7f6 ff7c 	bl	8002c74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2102      	movs	r1, #2
 800bd80:	4819      	ldr	r0, [pc, #100]	; (800bde8 <USBH_UserProcess+0xfc>)
 800bd82:	f7f6 ff77 	bl	8002c74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800bd86:	2200      	movs	r2, #0
 800bd88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bd8c:	4815      	ldr	r0, [pc, #84]	; (800bde4 <USBH_UserProcess+0xf8>)
 800bd8e:	f7f6 ff71 	bl	8002c74 <HAL_GPIO_WritePin>

	  // Start receiving from usb
	  USBH_CDC_Receive(&hUsbHostFS, CDC_RX_Buffer, RX_BUFF_SIZE);
 800bd92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd96:	4917      	ldr	r1, [pc, #92]	; (800bdf4 <USBH_UserProcess+0x108>)
 800bd98:	4817      	ldr	r0, [pc, #92]	; (800bdf8 <USBH_UserProcess+0x10c>)
 800bd9a:	f7fe fac6 	bl	800a32a <USBH_CDC_Receive>
  }
  break;
 800bd9e:	e018      	b.n	800bdd2 <USBH_UserProcess+0xe6>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bda0:	4b0e      	ldr	r3, [pc, #56]	; (800bddc <USBH_UserProcess+0xf0>)
 800bda2:	2201      	movs	r2, #1
 800bda4:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800bda6:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <USBH_UserProcess+0xf4>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	701a      	strb	r2, [r3, #0]
  // Turn on Yellow LED, turn off Green and Red LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800bdac:	2200      	movs	r2, #0
 800bdae:	2101      	movs	r1, #1
 800bdb0:	480c      	ldr	r0, [pc, #48]	; (800bde4 <USBH_UserProcess+0xf8>)
 800bdb2:	f7f6 ff5f 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	2102      	movs	r1, #2
 800bdba:	480b      	ldr	r0, [pc, #44]	; (800bde8 <USBH_UserProcess+0xfc>)
 800bdbc:	f7f6 ff5a 	bl	8002c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bdc6:	4807      	ldr	r0, [pc, #28]	; (800bde4 <USBH_UserProcess+0xf8>)
 800bdc8:	f7f6 ff54 	bl	8002c74 <HAL_GPIO_WritePin>
  break;
 800bdcc:	e002      	b.n	800bdd4 <USBH_UserProcess+0xe8>

  default:
  break;
 800bdce:	bf00      	nop
 800bdd0:	e000      	b.n	800bdd4 <USBH_UserProcess+0xe8>
  break;
 800bdd2:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	24000284 	.word	0x24000284
 800bde0:	24000324 	.word	0x24000324
 800bde4:	58020400 	.word	0x58020400
 800bde8:	58021000 	.word	0x58021000
 800bdec:	0800cda0 	.word	0x0800cda0
 800bdf0:	24000290 	.word	0x24000290
 800bdf4:	240007c0 	.word	0x240007c0
 800bdf8:	240003e8 	.word	0x240003e8

0800bdfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b0b8      	sub	sp, #224	; 0xe0
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	605a      	str	r2, [r3, #4]
 800be0e:	609a      	str	r2, [r3, #8]
 800be10:	60da      	str	r2, [r3, #12]
 800be12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800be14:	f107 0310 	add.w	r3, r7, #16
 800be18:	22bc      	movs	r2, #188	; 0xbc
 800be1a:	2100      	movs	r1, #0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 fb01 	bl	800c424 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a3b      	ldr	r2, [pc, #236]	; (800bf14 <HAL_HCD_MspInit+0x118>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d16e      	bne.n	800bf0a <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800be2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800be32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800be36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800be3a:	f107 0310 	add.w	r3, r7, #16
 800be3e:	4618      	mov	r0, r3
 800be40:	f7f9 fc7c 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800be4a:	f7f4 ff6b 	bl	8000d24 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800be4e:	f7f8 fcc9 	bl	80047e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be52:	4b31      	ldr	r3, [pc, #196]	; (800bf18 <HAL_HCD_MspInit+0x11c>)
 800be54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be58:	4a2f      	ldr	r2, [pc, #188]	; (800bf18 <HAL_HCD_MspInit+0x11c>)
 800be5a:	f043 0301 	orr.w	r3, r3, #1
 800be5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be62:	4b2d      	ldr	r3, [pc, #180]	; (800bf18 <HAL_HCD_MspInit+0x11c>)
 800be64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800be70:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800be74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be78:	2302      	movs	r3, #2
 800be7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be7e:	2300      	movs	r3, #0
 800be80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be84:	2300      	movs	r3, #0
 800be86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800be8a:	230a      	movs	r3, #10
 800be8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800be94:	4619      	mov	r1, r3
 800be96:	4821      	ldr	r0, [pc, #132]	; (800bf1c <HAL_HCD_MspInit+0x120>)
 800be98:	f7f6 fd3c 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800be9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beaa:	2300      	movs	r3, #0
 800beac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800beb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800beb4:	4619      	mov	r1, r3
 800beb6:	4819      	ldr	r0, [pc, #100]	; (800bf1c <HAL_HCD_MspInit+0x120>)
 800beb8:	f7f6 fd2c 	bl	8002914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bebc:	4b16      	ldr	r3, [pc, #88]	; (800bf18 <HAL_HCD_MspInit+0x11c>)
 800bebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bec2:	4a15      	ldr	r2, [pc, #84]	; (800bf18 <HAL_HCD_MspInit+0x11c>)
 800bec4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bec8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800becc:	4b12      	ldr	r3, [pc, #72]	; (800bf18 <HAL_HCD_MspInit+0x11c>)
 800bece:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bed6:	60bb      	str	r3, [r7, #8]
 800bed8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800beda:	2200      	movs	r2, #0
 800bedc:	2100      	movs	r1, #0
 800bede:	2062      	movs	r0, #98	; 0x62
 800bee0:	f7f5 fb6b 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800bee4:	2062      	movs	r0, #98	; 0x62
 800bee6:	f7f5 fb82 	bl	80015ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800beea:	2200      	movs	r2, #0
 800beec:	2100      	movs	r1, #0
 800beee:	2063      	movs	r0, #99	; 0x63
 800bef0:	f7f5 fb63 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800bef4:	2063      	movs	r0, #99	; 0x63
 800bef6:	f7f5 fb7a 	bl	80015ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800befa:	2200      	movs	r2, #0
 800befc:	2100      	movs	r1, #0
 800befe:	2065      	movs	r0, #101	; 0x65
 800bf00:	f7f5 fb5b 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf04:	2065      	movs	r0, #101	; 0x65
 800bf06:	f7f5 fb72 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	37e0      	adds	r7, #224	; 0xe0
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	40080000 	.word	0x40080000
 800bf18:	58024400 	.word	0x58024400
 800bf1c:	58020000 	.word	0x58020000

0800bf20 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff f801 	bl	800af36 <USBH_LL_IncTimer>
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff f839 	bl	800afc2 <USBH_LL_Connect>
}
 800bf50:	bf00      	nop
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff f842 	bl	800aff0 <USBH_LL_Disconnect>
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
 800bf80:	4613      	mov	r3, r2
 800bf82:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fff3 	bl	800af8a <USBH_LL_PortEnabled>
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fe fff3 	bl	800afa6 <USBH_LL_PortDisabled>
}
 800bfc0:	bf00      	nop
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d129      	bne.n	800c02e <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bfda:	4a17      	ldr	r2, [pc, #92]	; (800c038 <USBH_LL_Init+0x70>)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a14      	ldr	r2, [pc, #80]	; (800c038 <USBH_LL_Init+0x70>)
 800bfe6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bfea:	4b13      	ldr	r3, [pc, #76]	; (800c038 <USBH_LL_Init+0x70>)
 800bfec:	4a13      	ldr	r2, [pc, #76]	; (800c03c <USBH_LL_Init+0x74>)
 800bfee:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800bff0:	4b11      	ldr	r3, [pc, #68]	; (800c038 <USBH_LL_Init+0x70>)
 800bff2:	2210      	movs	r2, #16
 800bff4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bff6:	4b10      	ldr	r3, [pc, #64]	; (800c038 <USBH_LL_Init+0x70>)
 800bff8:	2201      	movs	r2, #1
 800bffa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bffc:	4b0e      	ldr	r3, [pc, #56]	; (800c038 <USBH_LL_Init+0x70>)
 800bffe:	2200      	movs	r2, #0
 800c000:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c002:	4b0d      	ldr	r3, [pc, #52]	; (800c038 <USBH_LL_Init+0x70>)
 800c004:	2202      	movs	r2, #2
 800c006:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c008:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <USBH_LL_Init+0x70>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c00e:	480a      	ldr	r0, [pc, #40]	; (800c038 <USBH_LL_Init+0x70>)
 800c010:	f7f6 fe49 	bl	8002ca6 <HAL_HCD_Init>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800c01a:	f7f4 fe83 	bl	8000d24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c01e:	4806      	ldr	r0, [pc, #24]	; (800c038 <USBH_LL_Init+0x70>)
 800c020:	f7f7 fa26 	bl	8003470 <HAL_HCD_GetCurrentFrame>
 800c024:	4603      	mov	r3, r0
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7fe ff75 	bl	800af18 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	24000bc0 	.word	0x24000bc0
 800c03c:	40080000 	.word	0x40080000

0800c040 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c056:	4618      	mov	r0, r3
 800c058:	f7f7 f994 	bl	8003384 <HAL_HCD_Start>
 800c05c:	4603      	mov	r3, r0
 800c05e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	4618      	mov	r0, r3
 800c064:	f000 f95c 	bl	800c320 <USBH_Get_USB_Status>
 800c068:	4603      	mov	r3, r0
 800c06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b084      	sub	sp, #16
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7f7 f99c 	bl	80033ca <HAL_HCD_Stop>
 800c092:	4603      	mov	r3, r0
 800c094:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 f941 	bl	800c320 <USBH_Get_USB_Status>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7f7 f9e4 	bl	800348c <HAL_HCD_GetCurrentSpeed>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d00c      	beq.n	800c0e4 <USBH_LL_GetSpeed+0x38>
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d80d      	bhi.n	800c0ea <USBH_LL_GetSpeed+0x3e>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d002      	beq.n	800c0d8 <USBH_LL_GetSpeed+0x2c>
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d003      	beq.n	800c0de <USBH_LL_GetSpeed+0x32>
 800c0d6:	e008      	b.n	800c0ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]
    break;
 800c0dc:	e008      	b.n	800c0f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e2:	e005      	b.n	800c0f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e8:	e002      	b.n	800c0f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ee:	bf00      	nop
  }
  return  speed;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c110:	4618      	mov	r0, r3
 800c112:	f7f7 f977 	bl	8003404 <HAL_HCD_ResetPort>
 800c116:	4603      	mov	r3, r0
 800c118:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f000 f8ff 	bl	800c320 <USBH_Get_USB_Status>
 800c122:	4603      	mov	r3, r0
 800c124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c126:	7bbb      	ldrb	r3, [r7, #14]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c142:	78fa      	ldrb	r2, [r7, #3]
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f7f7 f97e 	bl	8003448 <HAL_HCD_HC_GetXferCount>
 800c14c:	4603      	mov	r3, r0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c156:	b590      	push	{r4, r7, lr}
 800c158:	b089      	sub	sp, #36	; 0x24
 800c15a:	af04      	add	r7, sp, #16
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	4608      	mov	r0, r1
 800c160:	4611      	mov	r1, r2
 800c162:	461a      	mov	r2, r3
 800c164:	4603      	mov	r3, r0
 800c166:	70fb      	strb	r3, [r7, #3]
 800c168:	460b      	mov	r3, r1
 800c16a:	70bb      	strb	r3, [r7, #2]
 800c16c:	4613      	mov	r3, r2
 800c16e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c170:	2300      	movs	r3, #0
 800c172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c17e:	787c      	ldrb	r4, [r7, #1]
 800c180:	78ba      	ldrb	r2, [r7, #2]
 800c182:	78f9      	ldrb	r1, [r7, #3]
 800c184:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c186:	9302      	str	r3, [sp, #8]
 800c188:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	4623      	mov	r3, r4
 800c196:	f7f6 fde8 	bl	8002d6a <HAL_HCD_HC_Init>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f000 f8bd 	bl	800c320 <USBH_Get_USB_Status>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3714      	adds	r7, #20
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd90      	pop	{r4, r7, pc}

0800c1b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1ce:	78fa      	ldrb	r2, [r7, #3]
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f6 fe58 	bl	8002e88 <HAL_HCD_HC_Halt>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f89e 	bl	800c320 <USBH_Get_USB_Status>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c1f2:	b590      	push	{r4, r7, lr}
 800c1f4:	b089      	sub	sp, #36	; 0x24
 800c1f6:	af04      	add	r7, sp, #16
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	4608      	mov	r0, r1
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	461a      	mov	r2, r3
 800c200:	4603      	mov	r3, r0
 800c202:	70fb      	strb	r3, [r7, #3]
 800c204:	460b      	mov	r3, r1
 800c206:	70bb      	strb	r3, [r7, #2]
 800c208:	4613      	mov	r3, r2
 800c20a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c21a:	787c      	ldrb	r4, [r7, #1]
 800c21c:	78ba      	ldrb	r2, [r7, #2]
 800c21e:	78f9      	ldrb	r1, [r7, #3]
 800c220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c224:	9303      	str	r3, [sp, #12]
 800c226:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c228:	9302      	str	r3, [sp, #8]
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4623      	mov	r3, r4
 800c236:	f7f6 fe4b 	bl	8002ed0 <HAL_HCD_HC_SubmitRequest>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 f86d 	bl	800c320 <USBH_Get_USB_Status>
 800c246:	4603      	mov	r3, r0
 800c248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	bd90      	pop	{r4, r7, pc}

0800c254 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c266:	78fa      	ldrb	r2, [r7, #3]
 800c268:	4611      	mov	r1, r2
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7f7 f8d8 	bl	8003420 <HAL_HCD_HC_GetURBState>
 800c270:	4603      	mov	r3, r0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b082      	sub	sp, #8
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	460b      	mov	r3, r1
 800c284:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d103      	bne.n	800c298 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	4618      	mov	r0, r3
 800c294:	f000 f870 	bl	800c378 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c298:	20c8      	movs	r0, #200	; 0xc8
 800c29a:	f7f5 f86f 	bl	800137c <HAL_Delay>
  return USBH_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	70fb      	strb	r3, [r7, #3]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	212c      	movs	r1, #44	; 0x2c
 800c2c6:	fb01 f303 	mul.w	r3, r1, r3
 800c2ca:	4413      	add	r3, r2
 800c2cc:	333b      	adds	r3, #59	; 0x3b
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d009      	beq.n	800c2e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	212c      	movs	r1, #44	; 0x2c
 800c2da:	fb01 f303 	mul.w	r3, r1, r3
 800c2de:	4413      	add	r3, r2
 800c2e0:	3354      	adds	r3, #84	; 0x54
 800c2e2:	78ba      	ldrb	r2, [r7, #2]
 800c2e4:	701a      	strb	r2, [r3, #0]
 800c2e6:	e008      	b.n	800c2fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	212c      	movs	r1, #44	; 0x2c
 800c2ee:	fb01 f303 	mul.w	r3, r1, r3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	3355      	adds	r3, #85	; 0x55
 800c2f6:	78ba      	ldrb	r2, [r7, #2]
 800c2f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f7f5 f833 	bl	800137c <HAL_Delay>
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c32a:	2300      	movs	r3, #0
 800c32c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	2b03      	cmp	r3, #3
 800c332:	d817      	bhi.n	800c364 <USBH_Get_USB_Status+0x44>
 800c334:	a201      	add	r2, pc, #4	; (adr r2, 800c33c <USBH_Get_USB_Status+0x1c>)
 800c336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33a:	bf00      	nop
 800c33c:	0800c34d 	.word	0x0800c34d
 800c340:	0800c353 	.word	0x0800c353
 800c344:	0800c359 	.word	0x0800c359
 800c348:	0800c35f 	.word	0x0800c35f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	73fb      	strb	r3, [r7, #15]
    break;
 800c350:	e00b      	b.n	800c36a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c352:	2302      	movs	r3, #2
 800c354:	73fb      	strb	r3, [r7, #15]
    break;
 800c356:	e008      	b.n	800c36a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c358:	2301      	movs	r3, #1
 800c35a:	73fb      	strb	r3, [r7, #15]
    break;
 800c35c:	e005      	b.n	800c36a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c35e:	2302      	movs	r3, #2
 800c360:	73fb      	strb	r3, [r7, #15]
    break;
 800c362:	e002      	b.n	800c36a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c364:	2302      	movs	r3, #2
 800c366:	73fb      	strb	r3, [r7, #15]
    break;
 800c368:	bf00      	nop
  }
  return usb_status;
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c38c:	2301      	movs	r3, #1
 800c38e:	73fb      	strb	r3, [r7, #15]
 800c390:	e001      	b.n	800c396 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,(GPIO_PinState)data);
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	461a      	mov	r2, r3
 800c39a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c39e:	4803      	ldr	r0, [pc, #12]	; (800c3ac <MX_DriverVbusFS+0x34>)
 800c3a0:	f7f6 fc68 	bl	8002c74 <HAL_GPIO_WritePin>
}
 800c3a4:	bf00      	nop
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	58020c00 	.word	0x58020c00

0800c3b0 <__errno>:
 800c3b0:	4b01      	ldr	r3, [pc, #4]	; (800c3b8 <__errno+0x8>)
 800c3b2:	6818      	ldr	r0, [r3, #0]
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	24000030 	.word	0x24000030

0800c3bc <__libc_init_array>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	4d0d      	ldr	r5, [pc, #52]	; (800c3f4 <__libc_init_array+0x38>)
 800c3c0:	4c0d      	ldr	r4, [pc, #52]	; (800c3f8 <__libc_init_array+0x3c>)
 800c3c2:	1b64      	subs	r4, r4, r5
 800c3c4:	10a4      	asrs	r4, r4, #2
 800c3c6:	2600      	movs	r6, #0
 800c3c8:	42a6      	cmp	r6, r4
 800c3ca:	d109      	bne.n	800c3e0 <__libc_init_array+0x24>
 800c3cc:	4d0b      	ldr	r5, [pc, #44]	; (800c3fc <__libc_init_array+0x40>)
 800c3ce:	4c0c      	ldr	r4, [pc, #48]	; (800c400 <__libc_init_array+0x44>)
 800c3d0:	f000 fc5e 	bl	800cc90 <_init>
 800c3d4:	1b64      	subs	r4, r4, r5
 800c3d6:	10a4      	asrs	r4, r4, #2
 800c3d8:	2600      	movs	r6, #0
 800c3da:	42a6      	cmp	r6, r4
 800c3dc:	d105      	bne.n	800c3ea <__libc_init_array+0x2e>
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e4:	4798      	blx	r3
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	e7ee      	b.n	800c3c8 <__libc_init_array+0xc>
 800c3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ee:	4798      	blx	r3
 800c3f0:	3601      	adds	r6, #1
 800c3f2:	e7f2      	b.n	800c3da <__libc_init_array+0x1e>
 800c3f4:	0800ce30 	.word	0x0800ce30
 800c3f8:	0800ce30 	.word	0x0800ce30
 800c3fc:	0800ce30 	.word	0x0800ce30
 800c400:	0800ce34 	.word	0x0800ce34

0800c404 <malloc>:
 800c404:	4b02      	ldr	r3, [pc, #8]	; (800c410 <malloc+0xc>)
 800c406:	4601      	mov	r1, r0
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	f000 b863 	b.w	800c4d4 <_malloc_r>
 800c40e:	bf00      	nop
 800c410:	24000030 	.word	0x24000030

0800c414 <free>:
 800c414:	4b02      	ldr	r3, [pc, #8]	; (800c420 <free+0xc>)
 800c416:	4601      	mov	r1, r0
 800c418:	6818      	ldr	r0, [r3, #0]
 800c41a:	f000 b80b 	b.w	800c434 <_free_r>
 800c41e:	bf00      	nop
 800c420:	24000030 	.word	0x24000030

0800c424 <memset>:
 800c424:	4402      	add	r2, r0
 800c426:	4603      	mov	r3, r0
 800c428:	4293      	cmp	r3, r2
 800c42a:	d100      	bne.n	800c42e <memset+0xa>
 800c42c:	4770      	bx	lr
 800c42e:	f803 1b01 	strb.w	r1, [r3], #1
 800c432:	e7f9      	b.n	800c428 <memset+0x4>

0800c434 <_free_r>:
 800c434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c436:	2900      	cmp	r1, #0
 800c438:	d048      	beq.n	800c4cc <_free_r+0x98>
 800c43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c43e:	9001      	str	r0, [sp, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	f1a1 0404 	sub.w	r4, r1, #4
 800c446:	bfb8      	it	lt
 800c448:	18e4      	addlt	r4, r4, r3
 800c44a:	f000 f8cd 	bl	800c5e8 <__malloc_lock>
 800c44e:	4a20      	ldr	r2, [pc, #128]	; (800c4d0 <_free_r+0x9c>)
 800c450:	9801      	ldr	r0, [sp, #4]
 800c452:	6813      	ldr	r3, [r2, #0]
 800c454:	4615      	mov	r5, r2
 800c456:	b933      	cbnz	r3, 800c466 <_free_r+0x32>
 800c458:	6063      	str	r3, [r4, #4]
 800c45a:	6014      	str	r4, [r2, #0]
 800c45c:	b003      	add	sp, #12
 800c45e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c462:	f000 b8c7 	b.w	800c5f4 <__malloc_unlock>
 800c466:	42a3      	cmp	r3, r4
 800c468:	d90b      	bls.n	800c482 <_free_r+0x4e>
 800c46a:	6821      	ldr	r1, [r4, #0]
 800c46c:	1862      	adds	r2, r4, r1
 800c46e:	4293      	cmp	r3, r2
 800c470:	bf04      	itt	eq
 800c472:	681a      	ldreq	r2, [r3, #0]
 800c474:	685b      	ldreq	r3, [r3, #4]
 800c476:	6063      	str	r3, [r4, #4]
 800c478:	bf04      	itt	eq
 800c47a:	1852      	addeq	r2, r2, r1
 800c47c:	6022      	streq	r2, [r4, #0]
 800c47e:	602c      	str	r4, [r5, #0]
 800c480:	e7ec      	b.n	800c45c <_free_r+0x28>
 800c482:	461a      	mov	r2, r3
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	b10b      	cbz	r3, 800c48c <_free_r+0x58>
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d9fa      	bls.n	800c482 <_free_r+0x4e>
 800c48c:	6811      	ldr	r1, [r2, #0]
 800c48e:	1855      	adds	r5, r2, r1
 800c490:	42a5      	cmp	r5, r4
 800c492:	d10b      	bne.n	800c4ac <_free_r+0x78>
 800c494:	6824      	ldr	r4, [r4, #0]
 800c496:	4421      	add	r1, r4
 800c498:	1854      	adds	r4, r2, r1
 800c49a:	42a3      	cmp	r3, r4
 800c49c:	6011      	str	r1, [r2, #0]
 800c49e:	d1dd      	bne.n	800c45c <_free_r+0x28>
 800c4a0:	681c      	ldr	r4, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	6053      	str	r3, [r2, #4]
 800c4a6:	4421      	add	r1, r4
 800c4a8:	6011      	str	r1, [r2, #0]
 800c4aa:	e7d7      	b.n	800c45c <_free_r+0x28>
 800c4ac:	d902      	bls.n	800c4b4 <_free_r+0x80>
 800c4ae:	230c      	movs	r3, #12
 800c4b0:	6003      	str	r3, [r0, #0]
 800c4b2:	e7d3      	b.n	800c45c <_free_r+0x28>
 800c4b4:	6825      	ldr	r5, [r4, #0]
 800c4b6:	1961      	adds	r1, r4, r5
 800c4b8:	428b      	cmp	r3, r1
 800c4ba:	bf04      	itt	eq
 800c4bc:	6819      	ldreq	r1, [r3, #0]
 800c4be:	685b      	ldreq	r3, [r3, #4]
 800c4c0:	6063      	str	r3, [r4, #4]
 800c4c2:	bf04      	itt	eq
 800c4c4:	1949      	addeq	r1, r1, r5
 800c4c6:	6021      	streq	r1, [r4, #0]
 800c4c8:	6054      	str	r4, [r2, #4]
 800c4ca:	e7c7      	b.n	800c45c <_free_r+0x28>
 800c4cc:	b003      	add	sp, #12
 800c4ce:	bd30      	pop	{r4, r5, pc}
 800c4d0:	24000288 	.word	0x24000288

0800c4d4 <_malloc_r>:
 800c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d6:	1ccd      	adds	r5, r1, #3
 800c4d8:	f025 0503 	bic.w	r5, r5, #3
 800c4dc:	3508      	adds	r5, #8
 800c4de:	2d0c      	cmp	r5, #12
 800c4e0:	bf38      	it	cc
 800c4e2:	250c      	movcc	r5, #12
 800c4e4:	2d00      	cmp	r5, #0
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	db01      	blt.n	800c4ee <_malloc_r+0x1a>
 800c4ea:	42a9      	cmp	r1, r5
 800c4ec:	d903      	bls.n	800c4f6 <_malloc_r+0x22>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	6033      	str	r3, [r6, #0]
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f6:	f000 f877 	bl	800c5e8 <__malloc_lock>
 800c4fa:	4921      	ldr	r1, [pc, #132]	; (800c580 <_malloc_r+0xac>)
 800c4fc:	680a      	ldr	r2, [r1, #0]
 800c4fe:	4614      	mov	r4, r2
 800c500:	b99c      	cbnz	r4, 800c52a <_malloc_r+0x56>
 800c502:	4f20      	ldr	r7, [pc, #128]	; (800c584 <_malloc_r+0xb0>)
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	b923      	cbnz	r3, 800c512 <_malloc_r+0x3e>
 800c508:	4621      	mov	r1, r4
 800c50a:	4630      	mov	r0, r6
 800c50c:	f000 f83c 	bl	800c588 <_sbrk_r>
 800c510:	6038      	str	r0, [r7, #0]
 800c512:	4629      	mov	r1, r5
 800c514:	4630      	mov	r0, r6
 800c516:	f000 f837 	bl	800c588 <_sbrk_r>
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	d123      	bne.n	800c566 <_malloc_r+0x92>
 800c51e:	230c      	movs	r3, #12
 800c520:	6033      	str	r3, [r6, #0]
 800c522:	4630      	mov	r0, r6
 800c524:	f000 f866 	bl	800c5f4 <__malloc_unlock>
 800c528:	e7e3      	b.n	800c4f2 <_malloc_r+0x1e>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	1b5b      	subs	r3, r3, r5
 800c52e:	d417      	bmi.n	800c560 <_malloc_r+0x8c>
 800c530:	2b0b      	cmp	r3, #11
 800c532:	d903      	bls.n	800c53c <_malloc_r+0x68>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	441c      	add	r4, r3
 800c538:	6025      	str	r5, [r4, #0]
 800c53a:	e004      	b.n	800c546 <_malloc_r+0x72>
 800c53c:	6863      	ldr	r3, [r4, #4]
 800c53e:	42a2      	cmp	r2, r4
 800c540:	bf0c      	ite	eq
 800c542:	600b      	streq	r3, [r1, #0]
 800c544:	6053      	strne	r3, [r2, #4]
 800c546:	4630      	mov	r0, r6
 800c548:	f000 f854 	bl	800c5f4 <__malloc_unlock>
 800c54c:	f104 000b 	add.w	r0, r4, #11
 800c550:	1d23      	adds	r3, r4, #4
 800c552:	f020 0007 	bic.w	r0, r0, #7
 800c556:	1ac2      	subs	r2, r0, r3
 800c558:	d0cc      	beq.n	800c4f4 <_malloc_r+0x20>
 800c55a:	1a1b      	subs	r3, r3, r0
 800c55c:	50a3      	str	r3, [r4, r2]
 800c55e:	e7c9      	b.n	800c4f4 <_malloc_r+0x20>
 800c560:	4622      	mov	r2, r4
 800c562:	6864      	ldr	r4, [r4, #4]
 800c564:	e7cc      	b.n	800c500 <_malloc_r+0x2c>
 800c566:	1cc4      	adds	r4, r0, #3
 800c568:	f024 0403 	bic.w	r4, r4, #3
 800c56c:	42a0      	cmp	r0, r4
 800c56e:	d0e3      	beq.n	800c538 <_malloc_r+0x64>
 800c570:	1a21      	subs	r1, r4, r0
 800c572:	4630      	mov	r0, r6
 800c574:	f000 f808 	bl	800c588 <_sbrk_r>
 800c578:	3001      	adds	r0, #1
 800c57a:	d1dd      	bne.n	800c538 <_malloc_r+0x64>
 800c57c:	e7cf      	b.n	800c51e <_malloc_r+0x4a>
 800c57e:	bf00      	nop
 800c580:	24000288 	.word	0x24000288
 800c584:	2400028c 	.word	0x2400028c

0800c588 <_sbrk_r>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4d06      	ldr	r5, [pc, #24]	; (800c5a4 <_sbrk_r+0x1c>)
 800c58c:	2300      	movs	r3, #0
 800c58e:	4604      	mov	r4, r0
 800c590:	4608      	mov	r0, r1
 800c592:	602b      	str	r3, [r5, #0]
 800c594:	f7f4 fd74 	bl	8001080 <_sbrk>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	d102      	bne.n	800c5a2 <_sbrk_r+0x1a>
 800c59c:	682b      	ldr	r3, [r5, #0]
 800c59e:	b103      	cbz	r3, 800c5a2 <_sbrk_r+0x1a>
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	24000ec4 	.word	0x24000ec4

0800c5a8 <siprintf>:
 800c5a8:	b40e      	push	{r1, r2, r3}
 800c5aa:	b500      	push	{lr}
 800c5ac:	b09c      	sub	sp, #112	; 0x70
 800c5ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c5b0:	9002      	str	r0, [sp, #8]
 800c5b2:	9006      	str	r0, [sp, #24]
 800c5b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5b8:	4809      	ldr	r0, [pc, #36]	; (800c5e0 <siprintf+0x38>)
 800c5ba:	9107      	str	r1, [sp, #28]
 800c5bc:	9104      	str	r1, [sp, #16]
 800c5be:	4909      	ldr	r1, [pc, #36]	; (800c5e4 <siprintf+0x3c>)
 800c5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c4:	9105      	str	r1, [sp, #20]
 800c5c6:	6800      	ldr	r0, [r0, #0]
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	a902      	add	r1, sp, #8
 800c5cc:	f000 f874 	bl	800c6b8 <_svfiprintf_r>
 800c5d0:	9b02      	ldr	r3, [sp, #8]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	b01c      	add	sp, #112	; 0x70
 800c5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5dc:	b003      	add	sp, #12
 800c5de:	4770      	bx	lr
 800c5e0:	24000030 	.word	0x24000030
 800c5e4:	ffff0208 	.word	0xffff0208

0800c5e8 <__malloc_lock>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	; (800c5f0 <__malloc_lock+0x8>)
 800c5ea:	f000 baf9 	b.w	800cbe0 <__retarget_lock_acquire_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	24000ecc 	.word	0x24000ecc

0800c5f4 <__malloc_unlock>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	; (800c5fc <__malloc_unlock+0x8>)
 800c5f6:	f000 baf4 	b.w	800cbe2 <__retarget_lock_release_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	24000ecc 	.word	0x24000ecc

0800c600 <__ssputs_r>:
 800c600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c604:	688e      	ldr	r6, [r1, #8]
 800c606:	429e      	cmp	r6, r3
 800c608:	4682      	mov	sl, r0
 800c60a:	460c      	mov	r4, r1
 800c60c:	4690      	mov	r8, r2
 800c60e:	461f      	mov	r7, r3
 800c610:	d838      	bhi.n	800c684 <__ssputs_r+0x84>
 800c612:	898a      	ldrh	r2, [r1, #12]
 800c614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c618:	d032      	beq.n	800c680 <__ssputs_r+0x80>
 800c61a:	6825      	ldr	r5, [r4, #0]
 800c61c:	6909      	ldr	r1, [r1, #16]
 800c61e:	eba5 0901 	sub.w	r9, r5, r1
 800c622:	6965      	ldr	r5, [r4, #20]
 800c624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c62c:	3301      	adds	r3, #1
 800c62e:	444b      	add	r3, r9
 800c630:	106d      	asrs	r5, r5, #1
 800c632:	429d      	cmp	r5, r3
 800c634:	bf38      	it	cc
 800c636:	461d      	movcc	r5, r3
 800c638:	0553      	lsls	r3, r2, #21
 800c63a:	d531      	bpl.n	800c6a0 <__ssputs_r+0xa0>
 800c63c:	4629      	mov	r1, r5
 800c63e:	f7ff ff49 	bl	800c4d4 <_malloc_r>
 800c642:	4606      	mov	r6, r0
 800c644:	b950      	cbnz	r0, 800c65c <__ssputs_r+0x5c>
 800c646:	230c      	movs	r3, #12
 800c648:	f8ca 3000 	str.w	r3, [sl]
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c652:	81a3      	strh	r3, [r4, #12]
 800c654:	f04f 30ff 	mov.w	r0, #4294967295
 800c658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65c:	6921      	ldr	r1, [r4, #16]
 800c65e:	464a      	mov	r2, r9
 800c660:	f000 fac0 	bl	800cbe4 <memcpy>
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c66e:	81a3      	strh	r3, [r4, #12]
 800c670:	6126      	str	r6, [r4, #16]
 800c672:	6165      	str	r5, [r4, #20]
 800c674:	444e      	add	r6, r9
 800c676:	eba5 0509 	sub.w	r5, r5, r9
 800c67a:	6026      	str	r6, [r4, #0]
 800c67c:	60a5      	str	r5, [r4, #8]
 800c67e:	463e      	mov	r6, r7
 800c680:	42be      	cmp	r6, r7
 800c682:	d900      	bls.n	800c686 <__ssputs_r+0x86>
 800c684:	463e      	mov	r6, r7
 800c686:	4632      	mov	r2, r6
 800c688:	6820      	ldr	r0, [r4, #0]
 800c68a:	4641      	mov	r1, r8
 800c68c:	f000 fab8 	bl	800cc00 <memmove>
 800c690:	68a3      	ldr	r3, [r4, #8]
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	1b9b      	subs	r3, r3, r6
 800c696:	4432      	add	r2, r6
 800c698:	60a3      	str	r3, [r4, #8]
 800c69a:	6022      	str	r2, [r4, #0]
 800c69c:	2000      	movs	r0, #0
 800c69e:	e7db      	b.n	800c658 <__ssputs_r+0x58>
 800c6a0:	462a      	mov	r2, r5
 800c6a2:	f000 fac7 	bl	800cc34 <_realloc_r>
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1e1      	bne.n	800c670 <__ssputs_r+0x70>
 800c6ac:	6921      	ldr	r1, [r4, #16]
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	f7ff fec0 	bl	800c434 <_free_r>
 800c6b4:	e7c7      	b.n	800c646 <__ssputs_r+0x46>
	...

0800c6b8 <_svfiprintf_r>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	4698      	mov	r8, r3
 800c6be:	898b      	ldrh	r3, [r1, #12]
 800c6c0:	061b      	lsls	r3, r3, #24
 800c6c2:	b09d      	sub	sp, #116	; 0x74
 800c6c4:	4607      	mov	r7, r0
 800c6c6:	460d      	mov	r5, r1
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	d50e      	bpl.n	800c6ea <_svfiprintf_r+0x32>
 800c6cc:	690b      	ldr	r3, [r1, #16]
 800c6ce:	b963      	cbnz	r3, 800c6ea <_svfiprintf_r+0x32>
 800c6d0:	2140      	movs	r1, #64	; 0x40
 800c6d2:	f7ff feff 	bl	800c4d4 <_malloc_r>
 800c6d6:	6028      	str	r0, [r5, #0]
 800c6d8:	6128      	str	r0, [r5, #16]
 800c6da:	b920      	cbnz	r0, 800c6e6 <_svfiprintf_r+0x2e>
 800c6dc:	230c      	movs	r3, #12
 800c6de:	603b      	str	r3, [r7, #0]
 800c6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e4:	e0d1      	b.n	800c88a <_svfiprintf_r+0x1d2>
 800c6e6:	2340      	movs	r3, #64	; 0x40
 800c6e8:	616b      	str	r3, [r5, #20]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ee:	2320      	movs	r3, #32
 800c6f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f8:	2330      	movs	r3, #48	; 0x30
 800c6fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8a4 <_svfiprintf_r+0x1ec>
 800c6fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c702:	f04f 0901 	mov.w	r9, #1
 800c706:	4623      	mov	r3, r4
 800c708:	469a      	mov	sl, r3
 800c70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c70e:	b10a      	cbz	r2, 800c714 <_svfiprintf_r+0x5c>
 800c710:	2a25      	cmp	r2, #37	; 0x25
 800c712:	d1f9      	bne.n	800c708 <_svfiprintf_r+0x50>
 800c714:	ebba 0b04 	subs.w	fp, sl, r4
 800c718:	d00b      	beq.n	800c732 <_svfiprintf_r+0x7a>
 800c71a:	465b      	mov	r3, fp
 800c71c:	4622      	mov	r2, r4
 800c71e:	4629      	mov	r1, r5
 800c720:	4638      	mov	r0, r7
 800c722:	f7ff ff6d 	bl	800c600 <__ssputs_r>
 800c726:	3001      	adds	r0, #1
 800c728:	f000 80aa 	beq.w	800c880 <_svfiprintf_r+0x1c8>
 800c72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c72e:	445a      	add	r2, fp
 800c730:	9209      	str	r2, [sp, #36]	; 0x24
 800c732:	f89a 3000 	ldrb.w	r3, [sl]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 80a2 	beq.w	800c880 <_svfiprintf_r+0x1c8>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f04f 32ff 	mov.w	r2, #4294967295
 800c742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c746:	f10a 0a01 	add.w	sl, sl, #1
 800c74a:	9304      	str	r3, [sp, #16]
 800c74c:	9307      	str	r3, [sp, #28]
 800c74e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c752:	931a      	str	r3, [sp, #104]	; 0x68
 800c754:	4654      	mov	r4, sl
 800c756:	2205      	movs	r2, #5
 800c758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75c:	4851      	ldr	r0, [pc, #324]	; (800c8a4 <_svfiprintf_r+0x1ec>)
 800c75e:	f7f3 fdc7 	bl	80002f0 <memchr>
 800c762:	9a04      	ldr	r2, [sp, #16]
 800c764:	b9d8      	cbnz	r0, 800c79e <_svfiprintf_r+0xe6>
 800c766:	06d0      	lsls	r0, r2, #27
 800c768:	bf44      	itt	mi
 800c76a:	2320      	movmi	r3, #32
 800c76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c770:	0711      	lsls	r1, r2, #28
 800c772:	bf44      	itt	mi
 800c774:	232b      	movmi	r3, #43	; 0x2b
 800c776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c77a:	f89a 3000 	ldrb.w	r3, [sl]
 800c77e:	2b2a      	cmp	r3, #42	; 0x2a
 800c780:	d015      	beq.n	800c7ae <_svfiprintf_r+0xf6>
 800c782:	9a07      	ldr	r2, [sp, #28]
 800c784:	4654      	mov	r4, sl
 800c786:	2000      	movs	r0, #0
 800c788:	f04f 0c0a 	mov.w	ip, #10
 800c78c:	4621      	mov	r1, r4
 800c78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c792:	3b30      	subs	r3, #48	; 0x30
 800c794:	2b09      	cmp	r3, #9
 800c796:	d94e      	bls.n	800c836 <_svfiprintf_r+0x17e>
 800c798:	b1b0      	cbz	r0, 800c7c8 <_svfiprintf_r+0x110>
 800c79a:	9207      	str	r2, [sp, #28]
 800c79c:	e014      	b.n	800c7c8 <_svfiprintf_r+0x110>
 800c79e:	eba0 0308 	sub.w	r3, r0, r8
 800c7a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	46a2      	mov	sl, r4
 800c7ac:	e7d2      	b.n	800c754 <_svfiprintf_r+0x9c>
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	1d19      	adds	r1, r3, #4
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	9103      	str	r1, [sp, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bfbb      	ittet	lt
 800c7ba:	425b      	neglt	r3, r3
 800c7bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7c0:	9307      	strge	r3, [sp, #28]
 800c7c2:	9307      	strlt	r3, [sp, #28]
 800c7c4:	bfb8      	it	lt
 800c7c6:	9204      	strlt	r2, [sp, #16]
 800c7c8:	7823      	ldrb	r3, [r4, #0]
 800c7ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c7cc:	d10c      	bne.n	800c7e8 <_svfiprintf_r+0x130>
 800c7ce:	7863      	ldrb	r3, [r4, #1]
 800c7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7d2:	d135      	bne.n	800c840 <_svfiprintf_r+0x188>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	1d1a      	adds	r2, r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	9203      	str	r2, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bfb8      	it	lt
 800c7e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7e4:	3402      	adds	r4, #2
 800c7e6:	9305      	str	r3, [sp, #20]
 800c7e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8b4 <_svfiprintf_r+0x1fc>
 800c7ec:	7821      	ldrb	r1, [r4, #0]
 800c7ee:	2203      	movs	r2, #3
 800c7f0:	4650      	mov	r0, sl
 800c7f2:	f7f3 fd7d 	bl	80002f0 <memchr>
 800c7f6:	b140      	cbz	r0, 800c80a <_svfiprintf_r+0x152>
 800c7f8:	2340      	movs	r3, #64	; 0x40
 800c7fa:	eba0 000a 	sub.w	r0, r0, sl
 800c7fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c802:	9b04      	ldr	r3, [sp, #16]
 800c804:	4303      	orrs	r3, r0
 800c806:	3401      	adds	r4, #1
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80e:	4826      	ldr	r0, [pc, #152]	; (800c8a8 <_svfiprintf_r+0x1f0>)
 800c810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c814:	2206      	movs	r2, #6
 800c816:	f7f3 fd6b 	bl	80002f0 <memchr>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d038      	beq.n	800c890 <_svfiprintf_r+0x1d8>
 800c81e:	4b23      	ldr	r3, [pc, #140]	; (800c8ac <_svfiprintf_r+0x1f4>)
 800c820:	bb1b      	cbnz	r3, 800c86a <_svfiprintf_r+0x1b2>
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	3307      	adds	r3, #7
 800c826:	f023 0307 	bic.w	r3, r3, #7
 800c82a:	3308      	adds	r3, #8
 800c82c:	9303      	str	r3, [sp, #12]
 800c82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c830:	4433      	add	r3, r6
 800c832:	9309      	str	r3, [sp, #36]	; 0x24
 800c834:	e767      	b.n	800c706 <_svfiprintf_r+0x4e>
 800c836:	fb0c 3202 	mla	r2, ip, r2, r3
 800c83a:	460c      	mov	r4, r1
 800c83c:	2001      	movs	r0, #1
 800c83e:	e7a5      	b.n	800c78c <_svfiprintf_r+0xd4>
 800c840:	2300      	movs	r3, #0
 800c842:	3401      	adds	r4, #1
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	4619      	mov	r1, r3
 800c848:	f04f 0c0a 	mov.w	ip, #10
 800c84c:	4620      	mov	r0, r4
 800c84e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c852:	3a30      	subs	r2, #48	; 0x30
 800c854:	2a09      	cmp	r2, #9
 800c856:	d903      	bls.n	800c860 <_svfiprintf_r+0x1a8>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d0c5      	beq.n	800c7e8 <_svfiprintf_r+0x130>
 800c85c:	9105      	str	r1, [sp, #20]
 800c85e:	e7c3      	b.n	800c7e8 <_svfiprintf_r+0x130>
 800c860:	fb0c 2101 	mla	r1, ip, r1, r2
 800c864:	4604      	mov	r4, r0
 800c866:	2301      	movs	r3, #1
 800c868:	e7f0      	b.n	800c84c <_svfiprintf_r+0x194>
 800c86a:	ab03      	add	r3, sp, #12
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	462a      	mov	r2, r5
 800c870:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <_svfiprintf_r+0x1f8>)
 800c872:	a904      	add	r1, sp, #16
 800c874:	4638      	mov	r0, r7
 800c876:	f3af 8000 	nop.w
 800c87a:	1c42      	adds	r2, r0, #1
 800c87c:	4606      	mov	r6, r0
 800c87e:	d1d6      	bne.n	800c82e <_svfiprintf_r+0x176>
 800c880:	89ab      	ldrh	r3, [r5, #12]
 800c882:	065b      	lsls	r3, r3, #25
 800c884:	f53f af2c 	bmi.w	800c6e0 <_svfiprintf_r+0x28>
 800c888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c88a:	b01d      	add	sp, #116	; 0x74
 800c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c890:	ab03      	add	r3, sp, #12
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	462a      	mov	r2, r5
 800c896:	4b06      	ldr	r3, [pc, #24]	; (800c8b0 <_svfiprintf_r+0x1f8>)
 800c898:	a904      	add	r1, sp, #16
 800c89a:	4638      	mov	r0, r7
 800c89c:	f000 f87a 	bl	800c994 <_printf_i>
 800c8a0:	e7eb      	b.n	800c87a <_svfiprintf_r+0x1c2>
 800c8a2:	bf00      	nop
 800c8a4:	0800cdf4 	.word	0x0800cdf4
 800c8a8:	0800cdfe 	.word	0x0800cdfe
 800c8ac:	00000000 	.word	0x00000000
 800c8b0:	0800c601 	.word	0x0800c601
 800c8b4:	0800cdfa 	.word	0x0800cdfa

0800c8b8 <_printf_common>:
 800c8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8bc:	4616      	mov	r6, r2
 800c8be:	4699      	mov	r9, r3
 800c8c0:	688a      	ldr	r2, [r1, #8]
 800c8c2:	690b      	ldr	r3, [r1, #16]
 800c8c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	bfb8      	it	lt
 800c8cc:	4613      	movlt	r3, r2
 800c8ce:	6033      	str	r3, [r6, #0]
 800c8d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8d4:	4607      	mov	r7, r0
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	b10a      	cbz	r2, 800c8de <_printf_common+0x26>
 800c8da:	3301      	adds	r3, #1
 800c8dc:	6033      	str	r3, [r6, #0]
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	0699      	lsls	r1, r3, #26
 800c8e2:	bf42      	ittt	mi
 800c8e4:	6833      	ldrmi	r3, [r6, #0]
 800c8e6:	3302      	addmi	r3, #2
 800c8e8:	6033      	strmi	r3, [r6, #0]
 800c8ea:	6825      	ldr	r5, [r4, #0]
 800c8ec:	f015 0506 	ands.w	r5, r5, #6
 800c8f0:	d106      	bne.n	800c900 <_printf_common+0x48>
 800c8f2:	f104 0a19 	add.w	sl, r4, #25
 800c8f6:	68e3      	ldr	r3, [r4, #12]
 800c8f8:	6832      	ldr	r2, [r6, #0]
 800c8fa:	1a9b      	subs	r3, r3, r2
 800c8fc:	42ab      	cmp	r3, r5
 800c8fe:	dc26      	bgt.n	800c94e <_printf_common+0x96>
 800c900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c904:	1e13      	subs	r3, r2, #0
 800c906:	6822      	ldr	r2, [r4, #0]
 800c908:	bf18      	it	ne
 800c90a:	2301      	movne	r3, #1
 800c90c:	0692      	lsls	r2, r2, #26
 800c90e:	d42b      	bmi.n	800c968 <_printf_common+0xb0>
 800c910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c914:	4649      	mov	r1, r9
 800c916:	4638      	mov	r0, r7
 800c918:	47c0      	blx	r8
 800c91a:	3001      	adds	r0, #1
 800c91c:	d01e      	beq.n	800c95c <_printf_common+0xa4>
 800c91e:	6823      	ldr	r3, [r4, #0]
 800c920:	68e5      	ldr	r5, [r4, #12]
 800c922:	6832      	ldr	r2, [r6, #0]
 800c924:	f003 0306 	and.w	r3, r3, #6
 800c928:	2b04      	cmp	r3, #4
 800c92a:	bf08      	it	eq
 800c92c:	1aad      	subeq	r5, r5, r2
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	6922      	ldr	r2, [r4, #16]
 800c932:	bf0c      	ite	eq
 800c934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c938:	2500      	movne	r5, #0
 800c93a:	4293      	cmp	r3, r2
 800c93c:	bfc4      	itt	gt
 800c93e:	1a9b      	subgt	r3, r3, r2
 800c940:	18ed      	addgt	r5, r5, r3
 800c942:	2600      	movs	r6, #0
 800c944:	341a      	adds	r4, #26
 800c946:	42b5      	cmp	r5, r6
 800c948:	d11a      	bne.n	800c980 <_printf_common+0xc8>
 800c94a:	2000      	movs	r0, #0
 800c94c:	e008      	b.n	800c960 <_printf_common+0xa8>
 800c94e:	2301      	movs	r3, #1
 800c950:	4652      	mov	r2, sl
 800c952:	4649      	mov	r1, r9
 800c954:	4638      	mov	r0, r7
 800c956:	47c0      	blx	r8
 800c958:	3001      	adds	r0, #1
 800c95a:	d103      	bne.n	800c964 <_printf_common+0xac>
 800c95c:	f04f 30ff 	mov.w	r0, #4294967295
 800c960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c964:	3501      	adds	r5, #1
 800c966:	e7c6      	b.n	800c8f6 <_printf_common+0x3e>
 800c968:	18e1      	adds	r1, r4, r3
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	2030      	movs	r0, #48	; 0x30
 800c96e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c972:	4422      	add	r2, r4
 800c974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c97c:	3302      	adds	r3, #2
 800c97e:	e7c7      	b.n	800c910 <_printf_common+0x58>
 800c980:	2301      	movs	r3, #1
 800c982:	4622      	mov	r2, r4
 800c984:	4649      	mov	r1, r9
 800c986:	4638      	mov	r0, r7
 800c988:	47c0      	blx	r8
 800c98a:	3001      	adds	r0, #1
 800c98c:	d0e6      	beq.n	800c95c <_printf_common+0xa4>
 800c98e:	3601      	adds	r6, #1
 800c990:	e7d9      	b.n	800c946 <_printf_common+0x8e>
	...

0800c994 <_printf_i>:
 800c994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c998:	460c      	mov	r4, r1
 800c99a:	4691      	mov	r9, r2
 800c99c:	7e27      	ldrb	r7, [r4, #24]
 800c99e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c9a0:	2f78      	cmp	r7, #120	; 0x78
 800c9a2:	4680      	mov	r8, r0
 800c9a4:	469a      	mov	sl, r3
 800c9a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9aa:	d807      	bhi.n	800c9bc <_printf_i+0x28>
 800c9ac:	2f62      	cmp	r7, #98	; 0x62
 800c9ae:	d80a      	bhi.n	800c9c6 <_printf_i+0x32>
 800c9b0:	2f00      	cmp	r7, #0
 800c9b2:	f000 80d8 	beq.w	800cb66 <_printf_i+0x1d2>
 800c9b6:	2f58      	cmp	r7, #88	; 0x58
 800c9b8:	f000 80a3 	beq.w	800cb02 <_printf_i+0x16e>
 800c9bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9c4:	e03a      	b.n	800ca3c <_printf_i+0xa8>
 800c9c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ca:	2b15      	cmp	r3, #21
 800c9cc:	d8f6      	bhi.n	800c9bc <_printf_i+0x28>
 800c9ce:	a001      	add	r0, pc, #4	; (adr r0, 800c9d4 <_printf_i+0x40>)
 800c9d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c9d4:	0800ca2d 	.word	0x0800ca2d
 800c9d8:	0800ca41 	.word	0x0800ca41
 800c9dc:	0800c9bd 	.word	0x0800c9bd
 800c9e0:	0800c9bd 	.word	0x0800c9bd
 800c9e4:	0800c9bd 	.word	0x0800c9bd
 800c9e8:	0800c9bd 	.word	0x0800c9bd
 800c9ec:	0800ca41 	.word	0x0800ca41
 800c9f0:	0800c9bd 	.word	0x0800c9bd
 800c9f4:	0800c9bd 	.word	0x0800c9bd
 800c9f8:	0800c9bd 	.word	0x0800c9bd
 800c9fc:	0800c9bd 	.word	0x0800c9bd
 800ca00:	0800cb4d 	.word	0x0800cb4d
 800ca04:	0800ca71 	.word	0x0800ca71
 800ca08:	0800cb2f 	.word	0x0800cb2f
 800ca0c:	0800c9bd 	.word	0x0800c9bd
 800ca10:	0800c9bd 	.word	0x0800c9bd
 800ca14:	0800cb6f 	.word	0x0800cb6f
 800ca18:	0800c9bd 	.word	0x0800c9bd
 800ca1c:	0800ca71 	.word	0x0800ca71
 800ca20:	0800c9bd 	.word	0x0800c9bd
 800ca24:	0800c9bd 	.word	0x0800c9bd
 800ca28:	0800cb37 	.word	0x0800cb37
 800ca2c:	680b      	ldr	r3, [r1, #0]
 800ca2e:	1d1a      	adds	r2, r3, #4
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	600a      	str	r2, [r1, #0]
 800ca34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ca38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e0a3      	b.n	800cb88 <_printf_i+0x1f4>
 800ca40:	6825      	ldr	r5, [r4, #0]
 800ca42:	6808      	ldr	r0, [r1, #0]
 800ca44:	062e      	lsls	r6, r5, #24
 800ca46:	f100 0304 	add.w	r3, r0, #4
 800ca4a:	d50a      	bpl.n	800ca62 <_printf_i+0xce>
 800ca4c:	6805      	ldr	r5, [r0, #0]
 800ca4e:	600b      	str	r3, [r1, #0]
 800ca50:	2d00      	cmp	r5, #0
 800ca52:	da03      	bge.n	800ca5c <_printf_i+0xc8>
 800ca54:	232d      	movs	r3, #45	; 0x2d
 800ca56:	426d      	negs	r5, r5
 800ca58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca5c:	485e      	ldr	r0, [pc, #376]	; (800cbd8 <_printf_i+0x244>)
 800ca5e:	230a      	movs	r3, #10
 800ca60:	e019      	b.n	800ca96 <_printf_i+0x102>
 800ca62:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ca66:	6805      	ldr	r5, [r0, #0]
 800ca68:	600b      	str	r3, [r1, #0]
 800ca6a:	bf18      	it	ne
 800ca6c:	b22d      	sxthne	r5, r5
 800ca6e:	e7ef      	b.n	800ca50 <_printf_i+0xbc>
 800ca70:	680b      	ldr	r3, [r1, #0]
 800ca72:	6825      	ldr	r5, [r4, #0]
 800ca74:	1d18      	adds	r0, r3, #4
 800ca76:	6008      	str	r0, [r1, #0]
 800ca78:	0628      	lsls	r0, r5, #24
 800ca7a:	d501      	bpl.n	800ca80 <_printf_i+0xec>
 800ca7c:	681d      	ldr	r5, [r3, #0]
 800ca7e:	e002      	b.n	800ca86 <_printf_i+0xf2>
 800ca80:	0669      	lsls	r1, r5, #25
 800ca82:	d5fb      	bpl.n	800ca7c <_printf_i+0xe8>
 800ca84:	881d      	ldrh	r5, [r3, #0]
 800ca86:	4854      	ldr	r0, [pc, #336]	; (800cbd8 <_printf_i+0x244>)
 800ca88:	2f6f      	cmp	r7, #111	; 0x6f
 800ca8a:	bf0c      	ite	eq
 800ca8c:	2308      	moveq	r3, #8
 800ca8e:	230a      	movne	r3, #10
 800ca90:	2100      	movs	r1, #0
 800ca92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca96:	6866      	ldr	r6, [r4, #4]
 800ca98:	60a6      	str	r6, [r4, #8]
 800ca9a:	2e00      	cmp	r6, #0
 800ca9c:	bfa2      	ittt	ge
 800ca9e:	6821      	ldrge	r1, [r4, #0]
 800caa0:	f021 0104 	bicge.w	r1, r1, #4
 800caa4:	6021      	strge	r1, [r4, #0]
 800caa6:	b90d      	cbnz	r5, 800caac <_printf_i+0x118>
 800caa8:	2e00      	cmp	r6, #0
 800caaa:	d04d      	beq.n	800cb48 <_printf_i+0x1b4>
 800caac:	4616      	mov	r6, r2
 800caae:	fbb5 f1f3 	udiv	r1, r5, r3
 800cab2:	fb03 5711 	mls	r7, r3, r1, r5
 800cab6:	5dc7      	ldrb	r7, [r0, r7]
 800cab8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cabc:	462f      	mov	r7, r5
 800cabe:	42bb      	cmp	r3, r7
 800cac0:	460d      	mov	r5, r1
 800cac2:	d9f4      	bls.n	800caae <_printf_i+0x11a>
 800cac4:	2b08      	cmp	r3, #8
 800cac6:	d10b      	bne.n	800cae0 <_printf_i+0x14c>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	07df      	lsls	r7, r3, #31
 800cacc:	d508      	bpl.n	800cae0 <_printf_i+0x14c>
 800cace:	6923      	ldr	r3, [r4, #16]
 800cad0:	6861      	ldr	r1, [r4, #4]
 800cad2:	4299      	cmp	r1, r3
 800cad4:	bfde      	ittt	le
 800cad6:	2330      	movle	r3, #48	; 0x30
 800cad8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cadc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cae0:	1b92      	subs	r2, r2, r6
 800cae2:	6122      	str	r2, [r4, #16]
 800cae4:	f8cd a000 	str.w	sl, [sp]
 800cae8:	464b      	mov	r3, r9
 800caea:	aa03      	add	r2, sp, #12
 800caec:	4621      	mov	r1, r4
 800caee:	4640      	mov	r0, r8
 800caf0:	f7ff fee2 	bl	800c8b8 <_printf_common>
 800caf4:	3001      	adds	r0, #1
 800caf6:	d14c      	bne.n	800cb92 <_printf_i+0x1fe>
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cafc:	b004      	add	sp, #16
 800cafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb02:	4835      	ldr	r0, [pc, #212]	; (800cbd8 <_printf_i+0x244>)
 800cb04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	680e      	ldr	r6, [r1, #0]
 800cb0c:	061f      	lsls	r7, r3, #24
 800cb0e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cb12:	600e      	str	r6, [r1, #0]
 800cb14:	d514      	bpl.n	800cb40 <_printf_i+0x1ac>
 800cb16:	07d9      	lsls	r1, r3, #31
 800cb18:	bf44      	itt	mi
 800cb1a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb1e:	6023      	strmi	r3, [r4, #0]
 800cb20:	b91d      	cbnz	r5, 800cb2a <_printf_i+0x196>
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	f023 0320 	bic.w	r3, r3, #32
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	2310      	movs	r3, #16
 800cb2c:	e7b0      	b.n	800ca90 <_printf_i+0xfc>
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	f043 0320 	orr.w	r3, r3, #32
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	2378      	movs	r3, #120	; 0x78
 800cb38:	4828      	ldr	r0, [pc, #160]	; (800cbdc <_printf_i+0x248>)
 800cb3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb3e:	e7e3      	b.n	800cb08 <_printf_i+0x174>
 800cb40:	065e      	lsls	r6, r3, #25
 800cb42:	bf48      	it	mi
 800cb44:	b2ad      	uxthmi	r5, r5
 800cb46:	e7e6      	b.n	800cb16 <_printf_i+0x182>
 800cb48:	4616      	mov	r6, r2
 800cb4a:	e7bb      	b.n	800cac4 <_printf_i+0x130>
 800cb4c:	680b      	ldr	r3, [r1, #0]
 800cb4e:	6826      	ldr	r6, [r4, #0]
 800cb50:	6960      	ldr	r0, [r4, #20]
 800cb52:	1d1d      	adds	r5, r3, #4
 800cb54:	600d      	str	r5, [r1, #0]
 800cb56:	0635      	lsls	r5, r6, #24
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	d501      	bpl.n	800cb60 <_printf_i+0x1cc>
 800cb5c:	6018      	str	r0, [r3, #0]
 800cb5e:	e002      	b.n	800cb66 <_printf_i+0x1d2>
 800cb60:	0671      	lsls	r1, r6, #25
 800cb62:	d5fb      	bpl.n	800cb5c <_printf_i+0x1c8>
 800cb64:	8018      	strh	r0, [r3, #0]
 800cb66:	2300      	movs	r3, #0
 800cb68:	6123      	str	r3, [r4, #16]
 800cb6a:	4616      	mov	r6, r2
 800cb6c:	e7ba      	b.n	800cae4 <_printf_i+0x150>
 800cb6e:	680b      	ldr	r3, [r1, #0]
 800cb70:	1d1a      	adds	r2, r3, #4
 800cb72:	600a      	str	r2, [r1, #0]
 800cb74:	681e      	ldr	r6, [r3, #0]
 800cb76:	6862      	ldr	r2, [r4, #4]
 800cb78:	2100      	movs	r1, #0
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f7f3 fbb8 	bl	80002f0 <memchr>
 800cb80:	b108      	cbz	r0, 800cb86 <_printf_i+0x1f2>
 800cb82:	1b80      	subs	r0, r0, r6
 800cb84:	6060      	str	r0, [r4, #4]
 800cb86:	6863      	ldr	r3, [r4, #4]
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb90:	e7a8      	b.n	800cae4 <_printf_i+0x150>
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	4632      	mov	r2, r6
 800cb96:	4649      	mov	r1, r9
 800cb98:	4640      	mov	r0, r8
 800cb9a:	47d0      	blx	sl
 800cb9c:	3001      	adds	r0, #1
 800cb9e:	d0ab      	beq.n	800caf8 <_printf_i+0x164>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	079b      	lsls	r3, r3, #30
 800cba4:	d413      	bmi.n	800cbce <_printf_i+0x23a>
 800cba6:	68e0      	ldr	r0, [r4, #12]
 800cba8:	9b03      	ldr	r3, [sp, #12]
 800cbaa:	4298      	cmp	r0, r3
 800cbac:	bfb8      	it	lt
 800cbae:	4618      	movlt	r0, r3
 800cbb0:	e7a4      	b.n	800cafc <_printf_i+0x168>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	4632      	mov	r2, r6
 800cbb6:	4649      	mov	r1, r9
 800cbb8:	4640      	mov	r0, r8
 800cbba:	47d0      	blx	sl
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d09b      	beq.n	800caf8 <_printf_i+0x164>
 800cbc0:	3501      	adds	r5, #1
 800cbc2:	68e3      	ldr	r3, [r4, #12]
 800cbc4:	9903      	ldr	r1, [sp, #12]
 800cbc6:	1a5b      	subs	r3, r3, r1
 800cbc8:	42ab      	cmp	r3, r5
 800cbca:	dcf2      	bgt.n	800cbb2 <_printf_i+0x21e>
 800cbcc:	e7eb      	b.n	800cba6 <_printf_i+0x212>
 800cbce:	2500      	movs	r5, #0
 800cbd0:	f104 0619 	add.w	r6, r4, #25
 800cbd4:	e7f5      	b.n	800cbc2 <_printf_i+0x22e>
 800cbd6:	bf00      	nop
 800cbd8:	0800ce05 	.word	0x0800ce05
 800cbdc:	0800ce16 	.word	0x0800ce16

0800cbe0 <__retarget_lock_acquire_recursive>:
 800cbe0:	4770      	bx	lr

0800cbe2 <__retarget_lock_release_recursive>:
 800cbe2:	4770      	bx	lr

0800cbe4 <memcpy>:
 800cbe4:	440a      	add	r2, r1
 800cbe6:	4291      	cmp	r1, r2
 800cbe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbec:	d100      	bne.n	800cbf0 <memcpy+0xc>
 800cbee:	4770      	bx	lr
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbfa:	4291      	cmp	r1, r2
 800cbfc:	d1f9      	bne.n	800cbf2 <memcpy+0xe>
 800cbfe:	bd10      	pop	{r4, pc}

0800cc00 <memmove>:
 800cc00:	4288      	cmp	r0, r1
 800cc02:	b510      	push	{r4, lr}
 800cc04:	eb01 0402 	add.w	r4, r1, r2
 800cc08:	d902      	bls.n	800cc10 <memmove+0x10>
 800cc0a:	4284      	cmp	r4, r0
 800cc0c:	4623      	mov	r3, r4
 800cc0e:	d807      	bhi.n	800cc20 <memmove+0x20>
 800cc10:	1e43      	subs	r3, r0, #1
 800cc12:	42a1      	cmp	r1, r4
 800cc14:	d008      	beq.n	800cc28 <memmove+0x28>
 800cc16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc1e:	e7f8      	b.n	800cc12 <memmove+0x12>
 800cc20:	4402      	add	r2, r0
 800cc22:	4601      	mov	r1, r0
 800cc24:	428a      	cmp	r2, r1
 800cc26:	d100      	bne.n	800cc2a <memmove+0x2a>
 800cc28:	bd10      	pop	{r4, pc}
 800cc2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc32:	e7f7      	b.n	800cc24 <memmove+0x24>

0800cc34 <_realloc_r>:
 800cc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc36:	4607      	mov	r7, r0
 800cc38:	4614      	mov	r4, r2
 800cc3a:	460e      	mov	r6, r1
 800cc3c:	b921      	cbnz	r1, 800cc48 <_realloc_r+0x14>
 800cc3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc42:	4611      	mov	r1, r2
 800cc44:	f7ff bc46 	b.w	800c4d4 <_malloc_r>
 800cc48:	b922      	cbnz	r2, 800cc54 <_realloc_r+0x20>
 800cc4a:	f7ff fbf3 	bl	800c434 <_free_r>
 800cc4e:	4625      	mov	r5, r4
 800cc50:	4628      	mov	r0, r5
 800cc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc54:	f000 f814 	bl	800cc80 <_malloc_usable_size_r>
 800cc58:	42a0      	cmp	r0, r4
 800cc5a:	d20f      	bcs.n	800cc7c <_realloc_r+0x48>
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	4638      	mov	r0, r7
 800cc60:	f7ff fc38 	bl	800c4d4 <_malloc_r>
 800cc64:	4605      	mov	r5, r0
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d0f2      	beq.n	800cc50 <_realloc_r+0x1c>
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	f7ff ffb9 	bl	800cbe4 <memcpy>
 800cc72:	4631      	mov	r1, r6
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7ff fbdd 	bl	800c434 <_free_r>
 800cc7a:	e7e9      	b.n	800cc50 <_realloc_r+0x1c>
 800cc7c:	4635      	mov	r5, r6
 800cc7e:	e7e7      	b.n	800cc50 <_realloc_r+0x1c>

0800cc80 <_malloc_usable_size_r>:
 800cc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc84:	1f18      	subs	r0, r3, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	bfbc      	itt	lt
 800cc8a:	580b      	ldrlt	r3, [r1, r0]
 800cc8c:	18c0      	addlt	r0, r0, r3
 800cc8e:	4770      	bx	lr

0800cc90 <_init>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	bf00      	nop
 800cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc96:	bc08      	pop	{r3}
 800cc98:	469e      	mov	lr, r3
 800cc9a:	4770      	bx	lr

0800cc9c <_fini>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	bf00      	nop
 800cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca2:	bc08      	pop	{r3}
 800cca4:	469e      	mov	lr, r3
 800cca6:	4770      	bx	lr
